/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004a generated on 2020-12-24 22:58:35.108720
/// Generated using solver transform6d
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004a);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31;
x0=IKcos(j[3]);
x1=IKcos(j[1]);
x2=IKsin(j[1]);
x3=IKcos(j[2]);
x4=IKsin(j[3]);
x5=IKsin(j[2]);
x6=IKcos(j[4]);
x7=IKsin(j[4]);
x8=IKcos(j[5]);
x9=IKsin(j[5]);
x10=(x3*x4);
x11=(x0*x3);
x12=((((0.707107848183098)*x2))+(((-0.707105714188387)*x1)));
x13=((((0.707105714188387)*x2))+(((0.707107848183098)*x1)));
x14=((-1.0)*x13);
x15=((((1.86919445677633e-6)*x1))+(((1.86918881569753e-6)*x2)));
x16=((((-0.13541762238956)*x1))+(((-0.135417213710048)*x2)));
x17=((((0.694017773018373)*x2))+(((0.69401986751461)*x1)));
x18=(x12*x4);
x19=(x0*x12);
x20=((0.382679330634011)*x18);
x21=((0.375595785440231)*x19);
x22=((0.906781148754705)*x18);
x23=(x15*x5);
x24=(x16*x5);
x25=(x17*x5);
x26=((0.382679330634011)*x11*x14);
x27=((0.906781148754705)*x11*x14);
x28=((0.375595785440231)*x10*x13);
x29=(x26+x20);
x30=(x27+x21+x22+x28);
x31=(((x7*(((((-1.0)*x24))+(((1.0)*x30))))))+((x6*(((((-1.0)*x29))+(((0.92388123148948)*x19))+(((1.0)*x23))+(((0.92388123148948)*x10*x13)))))));
eerot[0]=((((((((((((-2.54103197211072e-6)*(IKsin(j[0]))))+(((7.28636577920142e-7)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((((((0.382679330634011)*(((((-0.231741058806616)*(IKsin(j[0]))))+(((-0.808168924704933)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.382679330634011)*(((((0.128455810082953)*(IKcos(j[0]))))+(((0.036834484138763)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.382679330634011)*(((((-0.0664513527990687)*(IKsin(j[0]))))+(((-0.231741058806616)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.382679330634011)*(((((-0.128455810082953)*(IKsin(j[0]))))+(((-0.44797410714116)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[3]))))+(((((((0.382679330634011)*(((((((((-0.0664513527990687)*(IKsin(j[0]))))+(((-0.231741058806616)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((((((-0.128455810082953)*(IKcos(j[0]))))+(((-0.036834484138763)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((((((-0.128455810082953)*(IKsin(j[0]))))+(((-0.44797410714116)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((((((0.231741058806616)*(IKsin(j[0]))))+(((0.808168924704933)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.382679330634011)*(((((0.961260955728737)*(IKsin(j[0]))))+(((-0.275639937221503)*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((-0.92388123148948)*(((((-0.231741058806616)*(IKsin(j[0]))))+(((-0.808168924704933)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.92388123148948)*(((((-0.128455810082953)*(IKsin(j[0]))))+(((-0.44797410714116)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.92388123148948)*(((((0.128455810082953)*(IKcos(j[0]))))+(((0.036834484138763)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.92388123148948)*(((((-0.0664513527990687)*(IKsin(j[0]))))+(((-0.231741058806616)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[3]))))+(((((((-0.92388123148948)*(((((-0.961260955728737)*(IKsin(j[0]))))+(((0.275639937221503)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-0.92388123148948)*(((((-1.0)*(((((-0.128455810082953)*(IKsin(j[0]))))+(((-0.44797410714116)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-1.0)*(((((-0.0664513527990687)*(IKsin(j[0]))))+(((-0.231741058806616)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-1.0)*(((((0.231741058806616)*(IKsin(j[0]))))+(((0.808168924704933)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-1.0)*(((((-0.128455810082953)*(IKcos(j[0]))))+(((-0.036834484138763)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((2.64343616264363e-6)*(((((-0.128455810082953)*(IKsin(j[0]))))+(((-0.44797410714116)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((2.64343616264363e-6)*(((((-0.128455810082953)*(IKcos(j[0]))))+(((-0.036834484138763)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((2.64343616264363e-6)*(((((0.231741058806616)*(IKsin(j[0]))))+(((0.808168924704933)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((2.64343616264363e-6)*(((((-0.0664513527990687)*(IKsin(j[0]))))+(((-0.231741058806616)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[4]))))+(((((((((((0.906781148754705)*(((((-0.231741058806616)*(IKsin(j[0]))))+(((-0.808168924704933)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.906781148754705)*(((((-0.128455810082953)*(IKsin(j[0]))))+(((-0.44797410714116)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.906781148754705)*(((((0.128455810082953)*(IKcos(j[0]))))+(((0.036834484138763)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.906781148754705)*(((((-0.0664513527990687)*(IKsin(j[0]))))+(((-0.231741058806616)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[3]))))+(((((((0.375595785440231)*(((((-0.961260955728737)*(IKsin(j[0]))))+(((0.275639937221503)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((0.375595785440231)*(((((-1.0)*(((((-0.128455810082953)*(IKsin(j[0]))))+(((-0.44797410714116)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-1.0)*(((((-0.0664513527990687)*(IKsin(j[0]))))+(((-0.231741058806616)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-1.0)*(((((0.231741058806616)*(IKsin(j[0]))))+(((0.808168924704933)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-1.0)*(((((-0.128455810082953)*(IKcos(j[0]))))+(((-0.036834484138763)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((0.18409026777906)*(IKsin(j[0]))))+(((-0.0527875698594682)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((((((-0.191509149187798)*(((((-0.128455810082953)*(IKsin(j[0]))))+(((-0.44797410714116)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.191509149187798)*(((((-0.128455810082953)*(IKcos(j[0]))))+(((-0.036834484138763)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.191509149187798)*(((((-0.0664513527990687)*(IKsin(j[0]))))+(((-0.231741058806616)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.191509149187798)*(((((0.231741058806616)*(IKsin(j[0]))))+(((0.808168924704933)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((0.375595785440231)*(((((-0.231741058806616)*(IKsin(j[0]))))+(((-0.808168924704933)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.375595785440231)*(((((-0.0664513527990687)*(IKsin(j[0]))))+(((-0.231741058806616)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.375595785440231)*(((((-0.128455810082953)*(IKsin(j[0]))))+(((-0.44797410714116)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.375595785440231)*(((((0.128455810082953)*(IKcos(j[0]))))+(((0.036834484138763)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((((((0.906781148754705)*(((((0.961260955728737)*(IKsin(j[0]))))+(((-0.275639937221503)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((0.906781148754705)*(((((((((-0.0664513527990687)*(IKsin(j[0]))))+(((-0.231741058806616)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((((((-0.128455810082953)*(IKcos(j[0]))))+(((-0.036834484138763)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((((((-0.128455810082953)*(IKsin(j[0]))))+(((-0.44797410714116)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((((((0.231741058806616)*(IKsin(j[0]))))+(((0.808168924704933)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))))*(IKcos(j[4])))));
eerot[1]=((((((((((((-0.176930715729644)*(((((-0.231741058806616)*(IKsin(j[0]))))+(((-0.808168924704933)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.176930715729644)*(((((0.128455810082953)*(IKcos(j[0]))))+(((0.036834484138763)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.176930715729644)*(((((-0.0664513527990687)*(IKsin(j[0]))))+(((-0.231741058806616)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.176930715729644)*(((((-0.128455810082953)*(IKsin(j[0]))))+(((-0.44797410714116)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[3]))))+(((((((-0.0732889900395557)*(((((-1.0)*(((((-0.128455810082953)*(IKsin(j[0]))))+(((-0.44797410714116)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-1.0)*(((((-0.0664513527990687)*(IKsin(j[0]))))+(((-0.231741058806616)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-1.0)*(((((0.231741058806616)*(IKsin(j[0]))))+(((0.808168924704933)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-1.0)*(((((-0.128455810082953)*(IKcos(j[0]))))+(((-0.036834484138763)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.0732889900395557)*(((((-0.961260955728737)*(IKsin(j[0]))))+(((0.275639937221503)*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((-0.0732889900395557)*(((((-0.0664513527990687)*(IKsin(j[0]))))+(((-0.231741058806616)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.0732889900395557)*(((((-0.128455810082953)*(IKsin(j[0]))))+(((-0.44797410714116)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.0732889900395557)*(((((-0.231741058806616)*(IKsin(j[0]))))+(((-0.808168924704933)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.0732889900395557)*(((((0.128455810082953)*(IKcos(j[0]))))+(((0.036834484138763)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((((((-0.270538070258651)*(IKcos(j[0]))))+(((0.943468811520075)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((-0.176930715729644)*(((((((((-0.0664513527990687)*(IKsin(j[0]))))+(((-0.231741058806616)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((((((-0.128455810082953)*(IKcos(j[0]))))+(((-0.036834484138763)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((((((-0.128455810082953)*(IKsin(j[0]))))+(((-0.44797410714116)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((((((0.231741058806616)*(IKsin(j[0]))))+(((0.808168924704933)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.176930715729644)*(((((0.961260955728737)*(IKsin(j[0]))))+(((-0.275639937221503)*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((-0.981490828164165)*(((((-0.128455810082953)*(IKcos(j[0]))))+(((-0.036834484138763)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.981490828164165)*(((((-0.128455810082953)*(IKsin(j[0]))))+(((-0.44797410714116)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.981490828164165)*(((((0.231741058806616)*(IKsin(j[0]))))+(((0.808168924704933)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.981490828164165)*(((((-0.0664513527990687)*(IKsin(j[0]))))+(((-0.231741058806616)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[5]))))+(((((((((((-1.0)*(((((0.382679330634011)*(((((((((-0.0664513527990687)*(IKsin(j[0]))))+(((-0.231741058806616)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((((((-0.128455810082953)*(IKcos(j[0]))))+(((-0.036834484138763)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((((((-0.128455810082953)*(IKsin(j[0]))))+(((-0.44797410714116)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((((((0.231741058806616)*(IKsin(j[0]))))+(((0.808168924704933)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.382679330634011)*(((((0.961260955728737)*(IKsin(j[0]))))+(((-0.275639937221503)*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-1.0)*(((((-0.92388123148948)*(((((-0.961260955728737)*(IKsin(j[0]))))+(((0.275639937221503)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-0.92388123148948)*(((((-1.0)*(((((-0.128455810082953)*(IKsin(j[0]))))+(((-0.44797410714116)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-1.0)*(((((-0.0664513527990687)*(IKsin(j[0]))))+(((-0.231741058806616)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-1.0)*(((((0.231741058806616)*(IKsin(j[0]))))+(((0.808168924704933)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-1.0)*(((((-0.128455810082953)*(IKcos(j[0]))))+(((-0.036834484138763)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((-1.0)*(((((0.382679330634011)*(((((-0.231741058806616)*(IKsin(j[0]))))+(((-0.808168924704933)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.382679330634011)*(((((0.128455810082953)*(IKcos(j[0]))))+(((0.036834484138763)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.382679330634011)*(((((-0.0664513527990687)*(IKsin(j[0]))))+(((-0.231741058806616)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.382679330634011)*(((((-0.128455810082953)*(IKsin(j[0]))))+(((-0.44797410714116)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[3]))))+(((-1.0)*(((((-0.92388123148948)*(((((-0.231741058806616)*(IKsin(j[0]))))+(((-0.808168924704933)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.92388123148948)*(((((-0.128455810082953)*(IKsin(j[0]))))+(((-0.44797410714116)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.92388123148948)*(((((0.128455810082953)*(IKcos(j[0]))))+(((0.036834484138763)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.92388123148948)*(((((-0.0664513527990687)*(IKsin(j[0]))))+(((-0.231741058806616)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[3]))))+(((-1.0)*(((((2.64343616264363e-6)*(((((-0.128455810082953)*(IKsin(j[0]))))+(((-0.44797410714116)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((2.64343616264363e-6)*(((((-0.128455810082953)*(IKcos(j[0]))))+(((-0.036834484138763)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((2.64343616264363e-6)*(((((0.231741058806616)*(IKsin(j[0]))))+(((0.808168924704933)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((2.64343616264363e-6)*(((((-0.0664513527990687)*(IKsin(j[0]))))+(((-0.231741058806616)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((-2.54103197211072e-6)*(IKsin(j[0]))))+(((7.28636577920142e-7)*(IKcos(j[0]))))))*(IKcos(j[2]))))))*(IKcos(j[4]))))+(((((((-1.0)*(((((-0.906781148754705)*(((((((((-0.0664513527990687)*(IKsin(j[0]))))+(((-0.231741058806616)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((((((-0.128455810082953)*(IKcos(j[0]))))+(((-0.036834484138763)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((((((-0.128455810082953)*(IKsin(j[0]))))+(((-0.44797410714116)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((((((0.231741058806616)*(IKsin(j[0]))))+(((0.808168924704933)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.906781148754705)*(((((0.961260955728737)*(IKsin(j[0]))))+(((-0.275639937221503)*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-1.0)*(((((-0.906781148754705)*(((((0.128455810082953)*(IKcos(j[0]))))+(((0.036834484138763)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.906781148754705)*(((((-0.231741058806616)*(IKsin(j[0]))))+(((-0.808168924704933)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.906781148754705)*(((((-0.128455810082953)*(IKsin(j[0]))))+(((-0.44797410714116)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.906781148754705)*(((((-0.0664513527990687)*(IKsin(j[0]))))+(((-0.231741058806616)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[3]))))+(((-1.0)*(((((-0.18409026777906)*(IKsin(j[0]))))+(((0.0527875698594682)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((-1.0)*(((((-0.375595785440231)*(((((-0.128455810082953)*(IKsin(j[0]))))+(((-0.44797410714116)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.375595785440231)*(((((-0.231741058806616)*(IKsin(j[0]))))+(((-0.808168924704933)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.375595785440231)*(((((0.128455810082953)*(IKcos(j[0]))))+(((0.036834484138763)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.375595785440231)*(((((-0.0664513527990687)*(IKsin(j[0]))))+(((-0.231741058806616)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[3]))))+(((-1.0)*(((((-0.375595785440231)*(((((-1.0)*(((((-0.128455810082953)*(IKsin(j[0]))))+(((-0.44797410714116)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-1.0)*(((((-0.0664513527990687)*(IKsin(j[0]))))+(((-0.231741058806616)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-1.0)*(((((0.231741058806616)*(IKsin(j[0]))))+(((0.808168924704933)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-1.0)*(((((-0.128455810082953)*(IKcos(j[0]))))+(((-0.036834484138763)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.375595785440231)*(((((-0.961260955728737)*(IKsin(j[0]))))+(((0.275639937221503)*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-1.0)*(((((0.191509149187798)*(((((-0.128455810082953)*(IKsin(j[0]))))+(((-0.44797410714116)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.191509149187798)*(((((0.231741058806616)*(IKsin(j[0]))))+(((0.808168924704933)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.191509149187798)*(((((-0.128455810082953)*(IKcos(j[0]))))+(((-0.036834484138763)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((0.191509149187798)*(((((-0.0664513527990687)*(IKsin(j[0]))))+(((-0.231741058806616)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[4]))))))*(IKsin(j[5])))));
eerot[2]=((((((((((((-1.0)*(((((0.382679330634011)*(((((((((-0.0664513527990687)*(IKsin(j[0]))))+(((-0.231741058806616)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((((((-0.128455810082953)*(IKcos(j[0]))))+(((-0.036834484138763)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((((((-0.128455810082953)*(IKsin(j[0]))))+(((-0.44797410714116)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((((((0.231741058806616)*(IKsin(j[0]))))+(((0.808168924704933)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.382679330634011)*(((((0.961260955728737)*(IKsin(j[0]))))+(((-0.275639937221503)*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-1.0)*(((((-0.92388123148948)*(((((-0.961260955728737)*(IKsin(j[0]))))+(((0.275639937221503)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-0.92388123148948)*(((((-1.0)*(((((-0.128455810082953)*(IKsin(j[0]))))+(((-0.44797410714116)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-1.0)*(((((-0.0664513527990687)*(IKsin(j[0]))))+(((-0.231741058806616)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-1.0)*(((((0.231741058806616)*(IKsin(j[0]))))+(((0.808168924704933)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-1.0)*(((((-0.128455810082953)*(IKcos(j[0]))))+(((-0.036834484138763)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((-1.0)*(((((0.382679330634011)*(((((-0.231741058806616)*(IKsin(j[0]))))+(((-0.808168924704933)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.382679330634011)*(((((0.128455810082953)*(IKcos(j[0]))))+(((0.036834484138763)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.382679330634011)*(((((-0.0664513527990687)*(IKsin(j[0]))))+(((-0.231741058806616)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.382679330634011)*(((((-0.128455810082953)*(IKsin(j[0]))))+(((-0.44797410714116)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[3]))))+(((-1.0)*(((((-0.92388123148948)*(((((-0.231741058806616)*(IKsin(j[0]))))+(((-0.808168924704933)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.92388123148948)*(((((-0.128455810082953)*(IKsin(j[0]))))+(((-0.44797410714116)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.92388123148948)*(((((0.128455810082953)*(IKcos(j[0]))))+(((0.036834484138763)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.92388123148948)*(((((-0.0664513527990687)*(IKsin(j[0]))))+(((-0.231741058806616)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[3]))))+(((-1.0)*(((((2.64343616264363e-6)*(((((-0.128455810082953)*(IKsin(j[0]))))+(((-0.44797410714116)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((2.64343616264363e-6)*(((((-0.128455810082953)*(IKcos(j[0]))))+(((-0.036834484138763)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((2.64343616264363e-6)*(((((0.231741058806616)*(IKsin(j[0]))))+(((0.808168924704933)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((2.64343616264363e-6)*(((((-0.0664513527990687)*(IKsin(j[0]))))+(((-0.231741058806616)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((-2.54103197211072e-6)*(IKsin(j[0]))))+(((7.28636577920142e-7)*(IKcos(j[0]))))))*(IKcos(j[2]))))))*(IKcos(j[4]))))+(((((((-1.0)*(((((-0.906781148754705)*(((((((((-0.0664513527990687)*(IKsin(j[0]))))+(((-0.231741058806616)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((((((-0.128455810082953)*(IKcos(j[0]))))+(((-0.036834484138763)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((((((-0.128455810082953)*(IKsin(j[0]))))+(((-0.44797410714116)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((((((0.231741058806616)*(IKsin(j[0]))))+(((0.808168924704933)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.906781148754705)*(((((0.961260955728737)*(IKsin(j[0]))))+(((-0.275639937221503)*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-1.0)*(((((-0.906781148754705)*(((((0.128455810082953)*(IKcos(j[0]))))+(((0.036834484138763)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.906781148754705)*(((((-0.231741058806616)*(IKsin(j[0]))))+(((-0.808168924704933)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.906781148754705)*(((((-0.128455810082953)*(IKsin(j[0]))))+(((-0.44797410714116)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.906781148754705)*(((((-0.0664513527990687)*(IKsin(j[0]))))+(((-0.231741058806616)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[3]))))+(((-1.0)*(((((-0.18409026777906)*(IKsin(j[0]))))+(((0.0527875698594682)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((-1.0)*(((((-0.375595785440231)*(((((-0.128455810082953)*(IKsin(j[0]))))+(((-0.44797410714116)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.375595785440231)*(((((-0.231741058806616)*(IKsin(j[0]))))+(((-0.808168924704933)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.375595785440231)*(((((0.128455810082953)*(IKcos(j[0]))))+(((0.036834484138763)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.375595785440231)*(((((-0.0664513527990687)*(IKsin(j[0]))))+(((-0.231741058806616)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[3]))))+(((-1.0)*(((((-0.375595785440231)*(((((-1.0)*(((((-0.128455810082953)*(IKsin(j[0]))))+(((-0.44797410714116)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-1.0)*(((((-0.0664513527990687)*(IKsin(j[0]))))+(((-0.231741058806616)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-1.0)*(((((0.231741058806616)*(IKsin(j[0]))))+(((0.808168924704933)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-1.0)*(((((-0.128455810082953)*(IKcos(j[0]))))+(((-0.036834484138763)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.375595785440231)*(((((-0.961260955728737)*(IKsin(j[0]))))+(((0.275639937221503)*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-1.0)*(((((0.191509149187798)*(((((-0.128455810082953)*(IKsin(j[0]))))+(((-0.44797410714116)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.191509149187798)*(((((0.231741058806616)*(IKsin(j[0]))))+(((0.808168924704933)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.191509149187798)*(((((-0.128455810082953)*(IKcos(j[0]))))+(((-0.036834484138763)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((0.191509149187798)*(((((-0.0664513527990687)*(IKsin(j[0]))))+(((-0.231741058806616)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[4]))))))*(IKcos(j[5]))))+(((((((((((0.0732889900395557)*(((((0.128455810082953)*(IKcos(j[0]))))+(((0.036834484138763)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.0732889900395557)*(((((-0.231741058806616)*(IKsin(j[0]))))+(((-0.808168924704933)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.0732889900395557)*(((((-0.0664513527990687)*(IKsin(j[0]))))+(((-0.231741058806616)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.0732889900395557)*(((((-0.128455810082953)*(IKsin(j[0]))))+(((-0.44797410714116)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[3]))))+(((((((0.176930715729644)*(((((-0.128455810082953)*(IKsin(j[0]))))+(((-0.44797410714116)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.176930715729644)*(((((0.128455810082953)*(IKcos(j[0]))))+(((0.036834484138763)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.176930715729644)*(((((-0.231741058806616)*(IKsin(j[0]))))+(((-0.808168924704933)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.176930715729644)*(((((-0.0664513527990687)*(IKsin(j[0]))))+(((-0.231741058806616)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[3]))))+(((((((0.0732889900395557)*(((((-1.0)*(((((-0.128455810082953)*(IKsin(j[0]))))+(((-0.44797410714116)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-1.0)*(((((-0.0664513527990687)*(IKsin(j[0]))))+(((-0.231741058806616)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-1.0)*(((((0.231741058806616)*(IKsin(j[0]))))+(((0.808168924704933)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-1.0)*(((((-0.128455810082953)*(IKcos(j[0]))))+(((-0.036834484138763)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.0732889900395557)*(((((-0.961260955728737)*(IKsin(j[0]))))+(((0.275639937221503)*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((0.176930715729644)*(((((((((-0.0664513527990687)*(IKsin(j[0]))))+(((-0.231741058806616)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((((((-0.128455810082953)*(IKcos(j[0]))))+(((-0.036834484138763)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((((((-0.128455810082953)*(IKsin(j[0]))))+(((-0.44797410714116)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((((((0.231741058806616)*(IKsin(j[0]))))+(((0.808168924704933)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.176930715729644)*(((((0.961260955728737)*(IKsin(j[0]))))+(((-0.275639937221503)*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((0.270538070258651)*(IKcos(j[0]))))+(((-0.943468811520075)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((0.981490828164165)*(((((-0.128455810082953)*(IKsin(j[0]))))+(((-0.44797410714116)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.981490828164165)*(((((0.231741058806616)*(IKsin(j[0]))))+(((0.808168924704933)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.981490828164165)*(((((-0.128455810082953)*(IKcos(j[0]))))+(((-0.036834484138763)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((0.981490828164165)*(((((-0.0664513527990687)*(IKsin(j[0]))))+(((-0.231741058806616)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[5])))));
eetrans[0]=((((((((0.0211952528999615)*(IKcos(j[0]))))+(((0.00607770256757201)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((((((-0.042872095879224)*(IKcos(j[0]))))+(((-0.0122935002678277)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((((((-0.0382372493228778)*(IKcos(j[0]))))+(((-0.0109644659341134)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((((((((((-0.017375631881156)*(IKcos(j[0]))))+(((-0.00498243276434224)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((((((0.00276179991678348)*(IKcos(j[0]))))+(((0.000791941408983405)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((((((0.00276179991678348)*(IKsin(j[0]))))+(((0.00963144330353494)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((((((0.00142870408517998)*(IKsin(j[0]))))+(((0.00498243276434224)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((-0.133347784065887)*(IKcos(j[0]))))+(((-0.0382372493228778)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((((((((((-0.0813583113535827)*(IKsin(j[0]))))+(((-0.283727274489163)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((((((-0.023329356820644)*(IKsin(j[0]))))+(((-0.0813583113535827)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((((((-0.0450975232689632)*(IKsin(j[0]))))+(((-0.15727216003422)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((((((0.0129316377708055)*(IKsin(j[0]))))+(((0.0450975232689632)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[3]))))+(((((((((((0.351074219529974)*(((((0.231741058806616)*(IKsin(j[0]))))+(((0.808168924704933)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.351074219529974)*(((((-0.128455810082953)*(IKcos(j[0]))))+(((-0.036834484138763)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((0.351074219529974)*(((((-0.0664513527990687)*(IKsin(j[0]))))+(((-0.231741058806616)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.351074219529974)*(((((-0.128455810082953)*(IKsin(j[0]))))+(((-0.44797410714116)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((0.337473939797104)*(IKsin(j[0]))))+(((-0.0967700758313304)*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((((((-5.08206394422145e-8)*(IKsin(j[0]))))+(((1.45727315584028e-8)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((((((5.28687232528727e-8)*(((((-0.128455810082953)*(IKsin(j[0]))))+(((-0.44797410714116)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((5.28687232528727e-8)*(((((-0.128455810082953)*(IKcos(j[0]))))+(((-0.036834484138763)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((5.28687232528727e-8)*(((((-0.0664513527990687)*(IKsin(j[0]))))+(((-0.231741058806616)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((5.28687232528727e-8)*(((((0.231741058806616)*(IKsin(j[0]))))+(((0.808168924704933)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-0.0184776246297896)*(((((-0.961260955728737)*(IKsin(j[0]))))+(((0.275639937221503)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-0.0184776246297896)*(((((-1.0)*(((((-0.128455810082953)*(IKsin(j[0]))))+(((-0.44797410714116)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-1.0)*(((((-0.0664513527990687)*(IKsin(j[0]))))+(((-0.231741058806616)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-1.0)*(((((0.231741058806616)*(IKsin(j[0]))))+(((0.808168924704933)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-1.0)*(((((-0.128455810082953)*(IKcos(j[0]))))+(((-0.036834484138763)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((0.00765358661268021)*(((((-0.231741058806616)*(IKsin(j[0]))))+(((-0.808168924704933)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.00765358661268021)*(((((0.128455810082953)*(IKcos(j[0]))))+(((0.036834484138763)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.00765358661268021)*(((((-0.0664513527990687)*(IKsin(j[0]))))+(((-0.231741058806616)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.00765358661268021)*(((((-0.128455810082953)*(IKsin(j[0]))))+(((-0.44797410714116)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[3]))))+(((((((-0.0184776246297896)*(((((-0.128455810082953)*(IKsin(j[0]))))+(((-0.44797410714116)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.0184776246297896)*(((((-0.0664513527990687)*(IKsin(j[0]))))+(((-0.231741058806616)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.0184776246297896)*(((((0.128455810082953)*(IKcos(j[0]))))+(((0.036834484138763)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.0184776246297896)*(((((-0.231741058806616)*(IKsin(j[0]))))+(((-0.808168924704933)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((((((0.00765358661268021)*(((((0.961260955728737)*(IKsin(j[0]))))+(((-0.275639937221503)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((0.00765358661268021)*(((((((((-0.0664513527990687)*(IKsin(j[0]))))+(((-0.231741058806616)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((((((-0.128455810082953)*(IKcos(j[0]))))+(((-0.036834484138763)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((((((-0.128455810082953)*(IKsin(j[0]))))+(((-0.44797410714116)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((((((0.231741058806616)*(IKsin(j[0]))))+(((0.808168924704933)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((((((-0.0237643248653462)*(IKsin(j[0]))))+(((-0.0828752098211146)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.0243939937221503)*(IKcos(j[0]))))+(((((((((((0.0181356229750941)*(((((-0.0664513527990687)*(IKsin(j[0]))))+(((-0.231741058806616)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.0181356229750941)*(((((-0.231741058806616)*(IKsin(j[0]))))+(((-0.808168924704933)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.0181356229750941)*(((((-0.128455810082953)*(IKsin(j[0]))))+(((-0.44797410714116)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.0181356229750941)*(((((0.128455810082953)*(IKcos(j[0]))))+(((0.036834484138763)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[3]))))+(((((((0.00751191570880462)*(((((-1.0)*(((((-0.128455810082953)*(IKsin(j[0]))))+(((-0.44797410714116)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-1.0)*(((((-0.0664513527990687)*(IKsin(j[0]))))+(((-0.231741058806616)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-1.0)*(((((0.231741058806616)*(IKsin(j[0]))))+(((0.808168924704933)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-1.0)*(((((-0.128455810082953)*(IKcos(j[0]))))+(((-0.036834484138763)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.00751191570880462)*(((((-0.961260955728737)*(IKsin(j[0]))))+(((0.275639937221503)*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((0.0181356229750941)*(((((0.961260955728737)*(IKsin(j[0]))))+(((-0.275639937221503)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((0.0181356229750941)*(((((((((-0.0664513527990687)*(IKsin(j[0]))))+(((-0.231741058806616)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((((((-0.128455810082953)*(IKcos(j[0]))))+(((-0.036834484138763)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((((((-0.128455810082953)*(IKsin(j[0]))))+(((-0.44797410714116)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((((((0.231741058806616)*(IKsin(j[0]))))+(((0.808168924704933)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((0.00751191570880462)*(((((0.128455810082953)*(IKcos(j[0]))))+(((0.036834484138763)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.00751191570880462)*(((((-0.128455810082953)*(IKsin(j[0]))))+(((-0.44797410714116)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.00751191570880462)*(((((-0.0664513527990687)*(IKsin(j[0]))))+(((-0.231741058806616)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.00751191570880462)*(((((-0.231741058806616)*(IKsin(j[0]))))+(((-0.808168924704933)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((((((-0.00383018298375596)*(((((-0.128455810082953)*(IKcos(j[0]))))+(((-0.036834484138763)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.00383018298375596)*(((((-0.128455810082953)*(IKsin(j[0]))))+(((-0.44797410714116)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00383018298375596)*(((((-0.0664513527990687)*(IKsin(j[0]))))+(((-0.231741058806616)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00383018298375596)*(((((0.231741058806616)*(IKsin(j[0]))))+(((0.808168924704933)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-0.00105575139718936)*(IKcos(j[0]))))+(((0.00368180535558121)*(IKsin(j[0]))))))*(IKcos(j[2]))))))*(IKcos(j[4]))))+(((((((0.0237643248653462)*(IKcos(j[0]))))+(((0.00681437956567116)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((((((-0.042872095879224)*(IKsin(j[0]))))+(((-0.149511251070413)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((((((-0.0211952528999615)*(IKsin(j[0]))))+(((-0.0739158819469499)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((((((((((-0.0336997177331601)*(IKcos(j[0]))))+(((-0.00966333650086577)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((((((0.00535646002790869)*(IKsin(j[0]))))+(((0.0186800067423198)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((((((-0.0336997177331601)*(IKsin(j[0]))))+(((-0.117523691241935)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((((((-0.0186800067423198)*(IKsin(j[0]))))+(((-0.0651442650696585)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[3]))))+(((((((((((-0.145419710718082)*(((((-0.128455810082953)*(IKcos(j[0]))))+(((-0.036834484138763)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.145419710718082)*(((((0.231741058806616)*(IKsin(j[0]))))+(((0.808168924704933)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.145419710718082)*(((((-0.128455810082953)*(IKsin(j[0]))))+(((-0.44797410714116)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.145419710718082)*(((((-0.0664513527990687)*(IKsin(j[0]))))+(((-0.231741058806616)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((0.0400834799331012)*(IKcos(j[0]))))+(((-0.13978629010666)*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((0.0206671105481679)*(IKsin(j[0]))))+(((-0.00592625865026232)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((-0.0850710955728738)*(IKsin(j[0])))));
eerot[3]=((((((((((((0.382679330634011)*(((((-0.231741058806616)*(IKsin(j[0]))))+(((0.0664513527990687)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.382679330634011)*(((((-0.036834484138763)*(IKcos(j[0]))))+(((0.128455810082953)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.382679330634011)*(((((-0.808168924704933)*(IKsin(j[0]))))+(((0.231741058806616)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.382679330634011)*(((((-0.44797410714116)*(IKsin(j[0]))))+(((0.128455810082953)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[3]))))+(((((((2.54103197211072e-6)*(IKcos(j[0]))))+(((7.28636577920142e-7)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((0.382679330634011)*(((((-0.275639937221503)*(IKsin(j[0]))))+(((-0.961260955728737)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((0.382679330634011)*(((((((((-0.44797410714116)*(IKsin(j[0]))))+(((0.128455810082953)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((((((-0.128455810082953)*(IKsin(j[0]))))+(((0.036834484138763)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((((((-0.231741058806616)*(IKsin(j[0]))))+(((0.0664513527990687)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((((((0.808168924704933)*(IKsin(j[0]))))+(((-0.231741058806616)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((-0.92388123148948)*(((((-1.0)*(((((-0.231741058806616)*(IKsin(j[0]))))+(((0.0664513527990687)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-1.0)*(((((-0.44797410714116)*(IKsin(j[0]))))+(((0.128455810082953)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-1.0)*(((((-0.128455810082953)*(IKsin(j[0]))))+(((0.036834484138763)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-1.0)*(((((0.808168924704933)*(IKsin(j[0]))))+(((-0.231741058806616)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.92388123148948)*(((((0.275639937221503)*(IKsin(j[0]))))+(((0.961260955728737)*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((-0.92388123148948)*(((((-0.231741058806616)*(IKsin(j[0]))))+(((0.0664513527990687)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.92388123148948)*(((((-0.036834484138763)*(IKcos(j[0]))))+(((0.128455810082953)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.92388123148948)*(((((-0.44797410714116)*(IKsin(j[0]))))+(((0.128455810082953)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.92388123148948)*(((((-0.808168924704933)*(IKsin(j[0]))))+(((0.231741058806616)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((((((2.64343616264363e-6)*(((((-0.44797410714116)*(IKsin(j[0]))))+(((0.128455810082953)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((2.64343616264363e-6)*(((((0.808168924704933)*(IKsin(j[0]))))+(((-0.231741058806616)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((2.64343616264363e-6)*(((((-0.231741058806616)*(IKsin(j[0]))))+(((0.0664513527990687)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((2.64343616264363e-6)*(((((-0.128455810082953)*(IKsin(j[0]))))+(((0.036834484138763)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[4]))))+(((((((((((0.906781148754705)*(((((-0.808168924704933)*(IKsin(j[0]))))+(((0.231741058806616)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.906781148754705)*(((((-0.231741058806616)*(IKsin(j[0]))))+(((0.0664513527990687)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.906781148754705)*(((((-0.036834484138763)*(IKcos(j[0]))))+(((0.128455810082953)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.906781148754705)*(((((-0.44797410714116)*(IKsin(j[0]))))+(((0.128455810082953)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[3]))))+(((((((-0.191509149187798)*(((((-0.128455810082953)*(IKsin(j[0]))))+(((0.036834484138763)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.191509149187798)*(((((0.808168924704933)*(IKsin(j[0]))))+(((-0.231741058806616)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.191509149187798)*(((((-0.44797410714116)*(IKsin(j[0]))))+(((0.128455810082953)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.191509149187798)*(((((-0.231741058806616)*(IKsin(j[0]))))+(((0.0664513527990687)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((0.375595785440231)*(((((-0.231741058806616)*(IKsin(j[0]))))+(((0.0664513527990687)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.375595785440231)*(((((-0.036834484138763)*(IKcos(j[0]))))+(((0.128455810082953)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.375595785440231)*(((((-0.44797410714116)*(IKsin(j[0]))))+(((0.128455810082953)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.375595785440231)*(((((-0.808168924704933)*(IKsin(j[0]))))+(((0.231741058806616)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((((((-0.18409026777906)*(IKcos(j[0]))))+(((-0.0527875698594682)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((0.375595785440231)*(((((0.275639937221503)*(IKsin(j[0]))))+(((0.961260955728737)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((0.375595785440231)*(((((-1.0)*(((((-0.231741058806616)*(IKsin(j[0]))))+(((0.0664513527990687)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-1.0)*(((((-0.44797410714116)*(IKsin(j[0]))))+(((0.128455810082953)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-1.0)*(((((-0.128455810082953)*(IKsin(j[0]))))+(((0.036834484138763)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-1.0)*(((((0.808168924704933)*(IKsin(j[0]))))+(((-0.231741058806616)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((0.906781148754705)*(((((((((-0.44797410714116)*(IKsin(j[0]))))+(((0.128455810082953)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((((((-0.128455810082953)*(IKsin(j[0]))))+(((0.036834484138763)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((((((-0.231741058806616)*(IKsin(j[0]))))+(((0.0664513527990687)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((((((0.808168924704933)*(IKsin(j[0]))))+(((-0.231741058806616)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.906781148754705)*(((((-0.275639937221503)*(IKsin(j[0]))))+(((-0.961260955728737)*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKcos(j[4])))));
eerot[4]=((((((((((((-0.981490828164165)*(((((0.808168924704933)*(IKsin(j[0]))))+(((-0.231741058806616)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.981490828164165)*(((((-0.128455810082953)*(IKsin(j[0]))))+(((0.036834484138763)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.981490828164165)*(((((-0.231741058806616)*(IKsin(j[0]))))+(((0.0664513527990687)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.981490828164165)*(((((-0.44797410714116)*(IKsin(j[0]))))+(((0.128455810082953)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((-0.176930715729644)*(((((((((-0.44797410714116)*(IKsin(j[0]))))+(((0.128455810082953)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((((((-0.128455810082953)*(IKsin(j[0]))))+(((0.036834484138763)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((((((-0.231741058806616)*(IKsin(j[0]))))+(((0.0664513527990687)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((((((0.808168924704933)*(IKsin(j[0]))))+(((-0.231741058806616)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.176930715729644)*(((((-0.275639937221503)*(IKsin(j[0]))))+(((-0.961260955728737)*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((-0.176930715729644)*(((((-0.44797410714116)*(IKsin(j[0]))))+(((0.128455810082953)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.176930715729644)*(((((-0.808168924704933)*(IKsin(j[0]))))+(((0.231741058806616)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.176930715729644)*(((((-0.231741058806616)*(IKsin(j[0]))))+(((0.0664513527990687)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.176930715729644)*(((((-0.036834484138763)*(IKcos(j[0]))))+(((0.128455810082953)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[3]))))+(((((((-0.0732889900395557)*(((((-0.036834484138763)*(IKcos(j[0]))))+(((0.128455810082953)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.0732889900395557)*(((((-0.808168924704933)*(IKsin(j[0]))))+(((0.231741058806616)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.0732889900395557)*(((((-0.44797410714116)*(IKsin(j[0]))))+(((0.128455810082953)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.0732889900395557)*(((((-0.231741058806616)*(IKsin(j[0]))))+(((0.0664513527990687)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[3]))))+(((((((-0.0732889900395557)*(((((-1.0)*(((((-0.231741058806616)*(IKsin(j[0]))))+(((0.0664513527990687)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-1.0)*(((((-0.44797410714116)*(IKsin(j[0]))))+(((0.128455810082953)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-1.0)*(((((-0.128455810082953)*(IKsin(j[0]))))+(((0.036834484138763)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-1.0)*(((((0.808168924704933)*(IKsin(j[0]))))+(((-0.231741058806616)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.0732889900395557)*(((((0.275639937221503)*(IKsin(j[0]))))+(((0.961260955728737)*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((-0.943468811520075)*(IKcos(j[0]))))+(((-0.270538070258651)*(IKsin(j[0]))))))*(IKcos(j[2]))))))*(IKcos(j[5]))))+(((((((((((-1.0)*(((((2.64343616264363e-6)*(((((-0.44797410714116)*(IKsin(j[0]))))+(((0.128455810082953)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((2.64343616264363e-6)*(((((0.808168924704933)*(IKsin(j[0]))))+(((-0.231741058806616)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((2.64343616264363e-6)*(((((-0.231741058806616)*(IKsin(j[0]))))+(((0.0664513527990687)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((2.64343616264363e-6)*(((((-0.128455810082953)*(IKsin(j[0]))))+(((0.036834484138763)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((0.382679330634011)*(((((-0.275639937221503)*(IKsin(j[0]))))+(((-0.961260955728737)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((0.382679330634011)*(((((((((-0.44797410714116)*(IKsin(j[0]))))+(((0.128455810082953)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((((((-0.128455810082953)*(IKsin(j[0]))))+(((0.036834484138763)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((((((-0.231741058806616)*(IKsin(j[0]))))+(((0.0664513527990687)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((((((0.808168924704933)*(IKsin(j[0]))))+(((-0.231741058806616)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((-1.0)*(((((0.382679330634011)*(((((-0.231741058806616)*(IKsin(j[0]))))+(((0.0664513527990687)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.382679330634011)*(((((-0.036834484138763)*(IKcos(j[0]))))+(((0.128455810082953)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.382679330634011)*(((((-0.808168924704933)*(IKsin(j[0]))))+(((0.231741058806616)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.382679330634011)*(((((-0.44797410714116)*(IKsin(j[0]))))+(((0.128455810082953)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[3]))))+(((-1.0)*(((((2.54103197211072e-6)*(IKcos(j[0]))))+(((7.28636577920142e-7)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-1.0)*(((((-0.92388123148948)*(((((-0.231741058806616)*(IKsin(j[0]))))+(((0.0664513527990687)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.92388123148948)*(((((-0.036834484138763)*(IKcos(j[0]))))+(((0.128455810082953)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.92388123148948)*(((((-0.44797410714116)*(IKsin(j[0]))))+(((0.128455810082953)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.92388123148948)*(((((-0.808168924704933)*(IKsin(j[0]))))+(((0.231741058806616)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((-1.0)*(((((-0.92388123148948)*(((((-1.0)*(((((-0.231741058806616)*(IKsin(j[0]))))+(((0.0664513527990687)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-1.0)*(((((-0.44797410714116)*(IKsin(j[0]))))+(((0.128455810082953)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-1.0)*(((((-0.128455810082953)*(IKsin(j[0]))))+(((0.036834484138763)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-1.0)*(((((0.808168924704933)*(IKsin(j[0]))))+(((-0.231741058806616)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.92388123148948)*(((((0.275639937221503)*(IKsin(j[0]))))+(((0.961260955728737)*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((((((-1.0)*(((((0.191509149187798)*(((((-0.231741058806616)*(IKsin(j[0]))))+(((0.0664513527990687)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.191509149187798)*(((((0.808168924704933)*(IKsin(j[0]))))+(((-0.231741058806616)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.191509149187798)*(((((-0.128455810082953)*(IKsin(j[0]))))+(((0.036834484138763)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.191509149187798)*(((((-0.44797410714116)*(IKsin(j[0]))))+(((0.128455810082953)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((0.0527875698594682)*(IKsin(j[0]))))+(((0.18409026777906)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((-1.0)*(((((-0.906781148754705)*(((((((((-0.44797410714116)*(IKsin(j[0]))))+(((0.128455810082953)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((((((-0.128455810082953)*(IKsin(j[0]))))+(((0.036834484138763)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((((((-0.231741058806616)*(IKsin(j[0]))))+(((0.0664513527990687)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((((((0.808168924704933)*(IKsin(j[0]))))+(((-0.231741058806616)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.906781148754705)*(((((-0.275639937221503)*(IKsin(j[0]))))+(((-0.961260955728737)*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-1.0)*(((((-0.906781148754705)*(((((-0.808168924704933)*(IKsin(j[0]))))+(((0.231741058806616)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.906781148754705)*(((((-0.231741058806616)*(IKsin(j[0]))))+(((0.0664513527990687)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.906781148754705)*(((((-0.44797410714116)*(IKsin(j[0]))))+(((0.128455810082953)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.906781148754705)*(((((-0.036834484138763)*(IKcos(j[0]))))+(((0.128455810082953)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[3]))))+(((-1.0)*(((((-0.375595785440231)*(((((0.275639937221503)*(IKsin(j[0]))))+(((0.961260955728737)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-0.375595785440231)*(((((-1.0)*(((((-0.231741058806616)*(IKsin(j[0]))))+(((0.0664513527990687)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-1.0)*(((((-0.44797410714116)*(IKsin(j[0]))))+(((0.128455810082953)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-1.0)*(((((-0.128455810082953)*(IKsin(j[0]))))+(((0.036834484138763)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-1.0)*(((((0.808168924704933)*(IKsin(j[0]))))+(((-0.231741058806616)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((-1.0)*(((((-0.375595785440231)*(((((-0.036834484138763)*(IKcos(j[0]))))+(((0.128455810082953)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.375595785440231)*(((((-0.808168924704933)*(IKsin(j[0]))))+(((0.231741058806616)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.375595785440231)*(((((-0.231741058806616)*(IKsin(j[0]))))+(((0.0664513527990687)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.375595785440231)*(((((-0.44797410714116)*(IKsin(j[0]))))+(((0.128455810082953)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))))*(IKsin(j[5])))));
eerot[5]=((((((((((((-1.0)*(((((2.64343616264363e-6)*(((((-0.44797410714116)*(IKsin(j[0]))))+(((0.128455810082953)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((2.64343616264363e-6)*(((((0.808168924704933)*(IKsin(j[0]))))+(((-0.231741058806616)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((2.64343616264363e-6)*(((((-0.231741058806616)*(IKsin(j[0]))))+(((0.0664513527990687)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((2.64343616264363e-6)*(((((-0.128455810082953)*(IKsin(j[0]))))+(((0.036834484138763)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((0.382679330634011)*(((((-0.275639937221503)*(IKsin(j[0]))))+(((-0.961260955728737)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((0.382679330634011)*(((((((((-0.44797410714116)*(IKsin(j[0]))))+(((0.128455810082953)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((((((-0.128455810082953)*(IKsin(j[0]))))+(((0.036834484138763)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((((((-0.231741058806616)*(IKsin(j[0]))))+(((0.0664513527990687)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((((((0.808168924704933)*(IKsin(j[0]))))+(((-0.231741058806616)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((-1.0)*(((((0.382679330634011)*(((((-0.231741058806616)*(IKsin(j[0]))))+(((0.0664513527990687)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.382679330634011)*(((((-0.036834484138763)*(IKcos(j[0]))))+(((0.128455810082953)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.382679330634011)*(((((-0.808168924704933)*(IKsin(j[0]))))+(((0.231741058806616)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.382679330634011)*(((((-0.44797410714116)*(IKsin(j[0]))))+(((0.128455810082953)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[3]))))+(((-1.0)*(((((2.54103197211072e-6)*(IKcos(j[0]))))+(((7.28636577920142e-7)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-1.0)*(((((-0.92388123148948)*(((((-0.231741058806616)*(IKsin(j[0]))))+(((0.0664513527990687)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.92388123148948)*(((((-0.036834484138763)*(IKcos(j[0]))))+(((0.128455810082953)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.92388123148948)*(((((-0.44797410714116)*(IKsin(j[0]))))+(((0.128455810082953)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.92388123148948)*(((((-0.808168924704933)*(IKsin(j[0]))))+(((0.231741058806616)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((-1.0)*(((((-0.92388123148948)*(((((-1.0)*(((((-0.231741058806616)*(IKsin(j[0]))))+(((0.0664513527990687)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-1.0)*(((((-0.44797410714116)*(IKsin(j[0]))))+(((0.128455810082953)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-1.0)*(((((-0.128455810082953)*(IKsin(j[0]))))+(((0.036834484138763)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-1.0)*(((((0.808168924704933)*(IKsin(j[0]))))+(((-0.231741058806616)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.92388123148948)*(((((0.275639937221503)*(IKsin(j[0]))))+(((0.961260955728737)*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((((((-1.0)*(((((0.191509149187798)*(((((-0.231741058806616)*(IKsin(j[0]))))+(((0.0664513527990687)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.191509149187798)*(((((0.808168924704933)*(IKsin(j[0]))))+(((-0.231741058806616)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.191509149187798)*(((((-0.128455810082953)*(IKsin(j[0]))))+(((0.036834484138763)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.191509149187798)*(((((-0.44797410714116)*(IKsin(j[0]))))+(((0.128455810082953)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((0.0527875698594682)*(IKsin(j[0]))))+(((0.18409026777906)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((-1.0)*(((((-0.906781148754705)*(((((((((-0.44797410714116)*(IKsin(j[0]))))+(((0.128455810082953)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((((((-0.128455810082953)*(IKsin(j[0]))))+(((0.036834484138763)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((((((-0.231741058806616)*(IKsin(j[0]))))+(((0.0664513527990687)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((((((0.808168924704933)*(IKsin(j[0]))))+(((-0.231741058806616)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.906781148754705)*(((((-0.275639937221503)*(IKsin(j[0]))))+(((-0.961260955728737)*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-1.0)*(((((-0.906781148754705)*(((((-0.808168924704933)*(IKsin(j[0]))))+(((0.231741058806616)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.906781148754705)*(((((-0.231741058806616)*(IKsin(j[0]))))+(((0.0664513527990687)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.906781148754705)*(((((-0.44797410714116)*(IKsin(j[0]))))+(((0.128455810082953)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.906781148754705)*(((((-0.036834484138763)*(IKcos(j[0]))))+(((0.128455810082953)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[3]))))+(((-1.0)*(((((-0.375595785440231)*(((((0.275639937221503)*(IKsin(j[0]))))+(((0.961260955728737)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-0.375595785440231)*(((((-1.0)*(((((-0.231741058806616)*(IKsin(j[0]))))+(((0.0664513527990687)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-1.0)*(((((-0.44797410714116)*(IKsin(j[0]))))+(((0.128455810082953)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-1.0)*(((((-0.128455810082953)*(IKsin(j[0]))))+(((0.036834484138763)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-1.0)*(((((0.808168924704933)*(IKsin(j[0]))))+(((-0.231741058806616)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((-1.0)*(((((-0.375595785440231)*(((((-0.036834484138763)*(IKcos(j[0]))))+(((0.128455810082953)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.375595785440231)*(((((-0.808168924704933)*(IKsin(j[0]))))+(((0.231741058806616)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.375595785440231)*(((((-0.231741058806616)*(IKsin(j[0]))))+(((0.0664513527990687)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.375595785440231)*(((((-0.44797410714116)*(IKsin(j[0]))))+(((0.128455810082953)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))))*(IKcos(j[5]))))+(((((((((((0.0732889900395557)*(((((-1.0)*(((((-0.231741058806616)*(IKsin(j[0]))))+(((0.0664513527990687)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-1.0)*(((((-0.44797410714116)*(IKsin(j[0]))))+(((0.128455810082953)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-1.0)*(((((-0.128455810082953)*(IKsin(j[0]))))+(((0.036834484138763)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-1.0)*(((((0.808168924704933)*(IKsin(j[0]))))+(((-0.231741058806616)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.0732889900395557)*(((((0.275639937221503)*(IKsin(j[0]))))+(((0.961260955728737)*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((0.0732889900395557)*(((((-0.808168924704933)*(IKsin(j[0]))))+(((0.231741058806616)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.0732889900395557)*(((((-0.44797410714116)*(IKsin(j[0]))))+(((0.128455810082953)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.0732889900395557)*(((((-0.231741058806616)*(IKsin(j[0]))))+(((0.0664513527990687)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.0732889900395557)*(((((-0.036834484138763)*(IKcos(j[0]))))+(((0.128455810082953)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((((((0.981490828164165)*(((((-0.231741058806616)*(IKsin(j[0]))))+(((0.0664513527990687)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.981490828164165)*(((((0.808168924704933)*(IKsin(j[0]))))+(((-0.231741058806616)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.981490828164165)*(((((-0.128455810082953)*(IKsin(j[0]))))+(((0.036834484138763)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.981490828164165)*(((((-0.44797410714116)*(IKsin(j[0]))))+(((0.128455810082953)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((0.176930715729644)*(((((-0.231741058806616)*(IKsin(j[0]))))+(((0.0664513527990687)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.176930715729644)*(((((-0.808168924704933)*(IKsin(j[0]))))+(((0.231741058806616)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.176930715729644)*(((((-0.44797410714116)*(IKsin(j[0]))))+(((0.128455810082953)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.176930715729644)*(((((-0.036834484138763)*(IKcos(j[0]))))+(((0.128455810082953)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[3]))))+(((((((0.176930715729644)*(((((((((-0.44797410714116)*(IKsin(j[0]))))+(((0.128455810082953)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((((((-0.128455810082953)*(IKsin(j[0]))))+(((0.036834484138763)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((((((-0.231741058806616)*(IKsin(j[0]))))+(((0.0664513527990687)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((((((0.808168924704933)*(IKsin(j[0]))))+(((-0.231741058806616)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.176930715729644)*(((((-0.275639937221503)*(IKsin(j[0]))))+(((-0.961260955728737)*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((0.270538070258651)*(IKsin(j[0]))))+(((0.943468811520075)*(IKcos(j[0]))))))*(IKcos(j[2]))))))*(IKsin(j[5])))));
eetrans[1]=((((((((((((-0.0651442650696585)*(IKsin(j[0]))))+(((0.0186800067423198)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((((((-0.0336997177331601)*(IKsin(j[0]))))+(((0.00966333650086577)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((((((0.0186800067423198)*(IKsin(j[0]))))+(((-0.00535646002790869)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((((((0.0336997177331601)*(IKcos(j[0]))))+(((-0.117523691241935)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((((((((((-0.0129316377708055)*(IKcos(j[0]))))+(((0.0450975232689632)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((((((-0.283727274489163)*(IKsin(j[0]))))+(((0.0813583113535827)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((((((-0.15727216003422)*(IKsin(j[0]))))+(((0.0450975232689632)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((((((-0.0813583113535827)*(IKsin(j[0]))))+(((0.023329356820644)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[3]))))+(((((((((((5.28687232528727e-8)*(((((-0.128455810082953)*(IKsin(j[0]))))+(((0.036834484138763)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((5.28687232528727e-8)*(((((0.808168924704933)*(IKsin(j[0]))))+(((-0.231741058806616)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((5.28687232528727e-8)*(((((-0.231741058806616)*(IKsin(j[0]))))+(((0.0664513527990687)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((5.28687232528727e-8)*(((((-0.44797410714116)*(IKsin(j[0]))))+(((0.128455810082953)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((-0.0184776246297896)*(((((-1.0)*(((((-0.231741058806616)*(IKsin(j[0]))))+(((0.0664513527990687)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-1.0)*(((((-0.44797410714116)*(IKsin(j[0]))))+(((0.128455810082953)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-1.0)*(((((-0.128455810082953)*(IKsin(j[0]))))+(((0.036834484138763)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-1.0)*(((((0.808168924704933)*(IKsin(j[0]))))+(((-0.231741058806616)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.0184776246297896)*(((((0.275639937221503)*(IKsin(j[0]))))+(((0.961260955728737)*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((1.45727315584028e-8)*(IKsin(j[0]))))+(((5.08206394422145e-8)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((((((0.00765358661268021)*(((((-0.275639937221503)*(IKsin(j[0]))))+(((-0.961260955728737)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((0.00765358661268021)*(((((((((-0.44797410714116)*(IKsin(j[0]))))+(((0.128455810082953)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((((((-0.128455810082953)*(IKsin(j[0]))))+(((0.036834484138763)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((((((-0.231741058806616)*(IKsin(j[0]))))+(((0.0664513527990687)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((((((0.808168924704933)*(IKsin(j[0]))))+(((-0.231741058806616)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((0.00765358661268021)*(((((-0.808168924704933)*(IKsin(j[0]))))+(((0.231741058806616)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.00765358661268021)*(((((-0.231741058806616)*(IKsin(j[0]))))+(((0.0664513527990687)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.00765358661268021)*(((((-0.036834484138763)*(IKcos(j[0]))))+(((0.128455810082953)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.00765358661268021)*(((((-0.44797410714116)*(IKsin(j[0]))))+(((0.128455810082953)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[3]))))+(((((((-0.0184776246297896)*(((((-0.808168924704933)*(IKsin(j[0]))))+(((0.231741058806616)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.0184776246297896)*(((((-0.231741058806616)*(IKsin(j[0]))))+(((0.0664513527990687)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.0184776246297896)*(((((-0.44797410714116)*(IKsin(j[0]))))+(((0.128455810082953)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.0184776246297896)*(((((-0.036834484138763)*(IKcos(j[0]))))+(((0.128455810082953)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((((((-0.149511251070413)*(IKsin(j[0]))))+(((0.042872095879224)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((((((0.0211952528999615)*(IKsin(j[0]))))+(((-0.00607770256757201)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((((((0.0211952528999615)*(IKcos(j[0]))))+(((-0.0739158819469499)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((((((-0.00592625865026232)*(IKsin(j[0]))))+(((-0.0206671105481679)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((((((((((-0.00105575139718936)*(IKsin(j[0]))))+(((-0.00368180535558121)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((((((0.0181356229750941)*(((((-0.808168924704933)*(IKsin(j[0]))))+(((0.231741058806616)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.0181356229750941)*(((((-0.036834484138763)*(IKcos(j[0]))))+(((0.128455810082953)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.0181356229750941)*(((((-0.44797410714116)*(IKsin(j[0]))))+(((0.128455810082953)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.0181356229750941)*(((((-0.231741058806616)*(IKsin(j[0]))))+(((0.0664513527990687)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[3]))))+(((((((-0.00383018298375596)*(((((-0.231741058806616)*(IKsin(j[0]))))+(((0.0664513527990687)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00383018298375596)*(((((-0.44797410714116)*(IKsin(j[0]))))+(((0.128455810082953)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00383018298375596)*(((((0.808168924704933)*(IKsin(j[0]))))+(((-0.231741058806616)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00383018298375596)*(((((-0.128455810082953)*(IKsin(j[0]))))+(((0.036834484138763)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((0.00751191570880462)*(((((-0.036834484138763)*(IKcos(j[0]))))+(((0.128455810082953)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.00751191570880462)*(((((-0.808168924704933)*(IKsin(j[0]))))+(((0.231741058806616)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.00751191570880462)*(((((-0.231741058806616)*(IKsin(j[0]))))+(((0.0664513527990687)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.00751191570880462)*(((((-0.44797410714116)*(IKsin(j[0]))))+(((0.128455810082953)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[3]))))+(((((((0.00751191570880462)*(((((-1.0)*(((((-0.231741058806616)*(IKsin(j[0]))))+(((0.0664513527990687)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-1.0)*(((((-0.44797410714116)*(IKsin(j[0]))))+(((0.128455810082953)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-1.0)*(((((-0.128455810082953)*(IKsin(j[0]))))+(((0.036834484138763)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-1.0)*(((((0.808168924704933)*(IKsin(j[0]))))+(((-0.231741058806616)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.00751191570880462)*(((((0.275639937221503)*(IKsin(j[0]))))+(((0.961260955728737)*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((0.0181356229750941)*(((((((((-0.44797410714116)*(IKsin(j[0]))))+(((0.128455810082953)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((((((-0.128455810082953)*(IKsin(j[0]))))+(((0.036834484138763)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((((((-0.231741058806616)*(IKsin(j[0]))))+(((0.0664513527990687)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((((((0.808168924704933)*(IKsin(j[0]))))+(((-0.231741058806616)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.0181356229750941)*(((((-0.275639937221503)*(IKsin(j[0]))))+(((-0.961260955728737)*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((0.0850710955728738)*(IKcos(j[0]))))+(((0.0243939937221503)*(IKsin(j[0]))))+(((((((0.0237643248653462)*(IKcos(j[0]))))+(((-0.0828752098211146)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((((((0.0382372493228778)*(IKcos(j[0]))))+(((-0.133347784065887)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((((((-0.00681437956567116)*(IKcos(j[0]))))+(((0.0237643248653462)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((((((-0.0382372493228778)*(IKsin(j[0]))))+(((0.0109644659341134)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((((((0.0122935002678277)*(IKcos(j[0]))))+(((-0.042872095879224)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((((((((((0.351074219529974)*(((((0.808168924704933)*(IKsin(j[0]))))+(((-0.231741058806616)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.351074219529974)*(((((-0.128455810082953)*(IKsin(j[0]))))+(((0.036834484138763)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.351074219529974)*(((((-0.231741058806616)*(IKsin(j[0]))))+(((0.0664513527990687)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.351074219529974)*(((((-0.44797410714116)*(IKsin(j[0]))))+(((0.128455810082953)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((-0.0967700758313304)*(IKsin(j[0]))))+(((-0.337473939797104)*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((((((0.00498243276434224)*(IKsin(j[0]))))+(((-0.00142870408517998)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((((((0.00963144330353494)*(IKsin(j[0]))))+(((-0.00276179991678348)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((((((0.00498243276434224)*(IKcos(j[0]))))+(((-0.017375631881156)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((((((-0.000791941408983405)*(IKcos(j[0]))))+(((0.00276179991678348)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((((((-0.145419710718082)*(((((-0.44797410714116)*(IKsin(j[0]))))+(((0.128455810082953)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.145419710718082)*(((((-0.231741058806616)*(IKsin(j[0]))))+(((0.0664513527990687)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.145419710718082)*(((((0.808168924704933)*(IKsin(j[0]))))+(((-0.231741058806616)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.145419710718082)*(((((-0.128455810082953)*(IKsin(j[0]))))+(((0.036834484138763)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.0400834799331012)*(IKsin(j[0]))))+(((0.13978629010666)*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKsin(j[3])))));
eerot[6]=(((x7*(((((-1.0)*x23))+(((-0.92388123148948)*x19))+x29+(((-0.92388123148948)*x10*x13))))))+((x6*(((((-1.0)*x24))+x30)))));
eerot[7]=(((x31*x9))+((x8*(((((-0.176930715729644)*x11*x14))+(((-0.0732889900395557)*x19))+(((-0.0732889900395557)*x10*x13))+x25+(((-0.176930715729644)*x18)))))));
eerot[8]=(((x31*x8))+((x9*(((((-1.0)*x25))+(((0.0732889900395557)*x10*x13))+(((0.0732889900395557)*x19))+(((0.176930715729644)*x18))+(((0.176930715729644)*x11*x14)))))));
IkReal x32=(x10*x13);
IkReal x33=(x11*x14);
eetrans[2]=((0.0555)+((x0*(((((-0.102827108404378)*x1))+(((0.102827418729271)*x2))))))+(((-0.24748686186951)*x1))+(((0.247487880946764)*x2))+((x4*(((((0.248247335924401)*x2))+(((-0.248246586733873)*x1))))))+((x10*(((((0.102827108404378)*x2))+(((0.102827418729271)*x1))))))+((x5*(((((0.0152027728550503)*x2))+(((0.0152028187359366)*x1))))))+((x11*(((((-0.248247335924401)*x1))+(((-0.248246586733873)*x2))))))+((x6*(((((0.00751191570880462)*x19))+(((0.00751191570880462)*x32))+(((0.0181356229750941)*x18))+(((0.0181356229750941)*x33))+(((-0.02)*x24))))))+((x7*(((((0.00765358661268021)*x33))+(((-0.0184776246297896)*x32))+(((0.00765358661268021)*x18))+(((-0.0184776246297896)*x19))+(((-0.02)*x23)))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((-1.0)*r02);
new_r01=r01;
new_r02=r00;
new_px=((((-0.02)*r00))+px);
new_r10=((-1.0)*r12);
new_r11=r11;
new_r12=r10;
new_py=((((-0.02)*r10))+py);
new_r20=((-1.0)*r22);
new_r21=r21;
new_r22=r20;
new_pz=((-0.0555)+pz+(((-0.02)*r20)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x34=((1.0)*px);
IkReal x35=((1.0)*pz);
IkReal x36=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=(((pz*r10))+(((-1.0)*r20*x36)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x35)));
rxp0_2=((((-1.0)*r10*x34))+((py*r00)));
rxp1_0=((((-1.0)*r21*x36))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x35)));
rxp1_2=((((-1.0)*r11*x34))+((py*r01)));
rxp2_0=((((-1.0)*r22*x36))+((pz*r12)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x35)));
rxp2_2=((((-1.0)*r12*x34))+((py*r02)));
{
IkReal j5eval[2];
j5eval[0]=((1.0)+(((-1.0)*(r22*r22))));
j5eval[1]=((r20*r20)+(r21*r21));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1, j5]

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x39 = IKatan2WithCheck(IkReal(((0.185)*r21)),IkReal(((0.185)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x39.valid){
continue;
}
IkReal x37=((1.0)*(x39.value));
if((((((0.034225)*(r20*r20)))+(((0.034225)*(r21*r21))))) < -0.00001)
continue;
CheckValue<IkReal> x40=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.034225)*(r20*r20)))+(((0.034225)*(r21*r21)))))),-1);
if(!x40.valid){
continue;
}
if( ((pz*(x40.value))) < -1-IKFAST_SINCOS_THRESH || ((pz*(x40.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x38=IKasin((pz*(x40.value)));
j5array[0]=((((-1.0)*x38))+(((-1.0)*x37)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x37))+x38);
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

IkReal op[4+1], zeror[4];
int numroots;
IkReal x41=py*py;
IkReal x42=r11*r11;
IkReal x43=r21*r21;
IkReal x44=r01*r01;
IkReal x45=px*px;
IkReal x46=pz*pz;
IkReal x47=r10*r10;
IkReal x48=r00*r00;
IkReal x49=r20*r20;
IkReal x50=cj5*cj5;
IkReal x51=r02*r02;
IkReal x52=r22*r22;
IkReal x53=r12*r12;
IkReal x54=(npx*sj5);
IkReal x55=(cj5*npy);
IkReal x56=((0.034225)*x48);
IkReal x57=((0.034225)*x49);
IkReal x58=((0.37)*x55);
IkReal x59=((0.37)*x54);
IkReal x60=((0.034225)*x47);
IkReal x61=((0.06845)*x50);
IkReal x62=((0.034225)*x50);
IkReal x63=((2.0)*x48);
IkReal x64=((2.0)*x42);
IkReal x65=((2.0)*x52);
IkReal x66=((2.0)*x47);
IkReal x67=((1.0)*x52);
IkReal x68=((2.0)*x43);
IkReal x69=((2.0)*x49);
IkReal x70=(x41*x42);
IkReal x71=(x44*x45);
IkReal x72=(x45*x51);
IkReal x73=(x46*x52);
IkReal x74=(x46*x49);
IkReal x75=(x43*x46);
IkReal x76=(x41*x47);
IkReal x77=(x41*x53);
IkReal x78=(x45*x48);
IkReal x79=(x41*x44);
IkReal x80=(x46*x53);
IkReal x81=(x41*x43);
IkReal x82=(x46*x51);
IkReal x83=(x44*x62);
IkReal x84=(x43*x62);
IkReal x85=(x42*x62);
IkReal x86=(x44*x75);
IkReal x87=(x43*x70);
IkReal x88=(x47*x78);
IkReal x89=(x47*x74);
IkReal x90=(x42*x71);
IkReal x91=(x44*x70);
IkReal x92=(x48*x76);
IkReal x93=(x42*x75);
IkReal x94=(x48*x74);
IkReal x95=(x49*x76);
IkReal x96=(x49*x78);
IkReal x97=(x43*x71);
IkReal x98=((((1.0)*x51*x77))+(((1.0)*x53*x72))+((x68*x74))+((x67*x82))+((x67*x80))+((x67*x72))+((x67*x77))+((x50*x56))+((x50*x57))+((x50*x60))+((x63*x71))+((x64*x76)));
IkReal x99=(x77+x76+x75+x74+x73+x72+x71+x70+x78+x59+x58+x57+x56+x60+x88+x89+x83+x86+x87+x84+x85+x91+x90+x93+x92+x95+x94+x97+x96);
op[0]=((-0.0137448348252846)+x99+(((-1.0)*x98)));
op[1]=0.0544499991886451;
op[2]=((-0.0274890858894941)+((x41*x49*x66))+((x44*x46*x68))+((x64*x81))+((x44*x61))+(((-4.0)*x48*x71))+(((0.74)*x54))+(((0.74)*x55))+((x45*x63))+(((-2.0)*x51*x77))+(((-1.0)*x49*x61))+(((-1.0)*x48*x61))+((x68*x71))+(((-1.0)*x47*x61))+(((-2.0)*x53*x72))+(((-4.0)*x47*x70))+(((-1.0)*x65*x80))+(((-1.0)*x65*x82))+(((-4.0)*x43*x74))+((x42*x61))+((x46*x68))+((x46*x69))+((x46*x65))+((x43*x61))+((x63*x74))+((x63*x76))+(((2.0)*x77))+(((2.0)*x71))+(((2.0)*x72))+((x64*x79))+((x64*x75))+((x64*x71))+((x45*x49*x63))+((x41*x64))+((x41*x66))+((x66*x74))+(((0.06845)*x48))+(((0.06845)*x49))+(((0.06845)*x47))+((x45*x47*x63))+(((-1.0)*x65*x77))+(((-1.0)*x65*x72)));
op[3]=-0.0544499970639738;
op[4]=((-0.0137448337629433)+x99+(((-1.0)*x98)));
polyroots4(op,zeror,numroots);
IkReal j1array[4], cj1array[4], sj1array[4], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[4]={true,true,true,true};
_nj1 = 4;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j0eval[2];
IkReal x100=(cj1*rxp2_2);
IkReal x101=(cj5*r20);
IkReal x102=((10.1450217142192)*cj1);
IkReal x103=((0.00594951614973157)*sj1);
IkReal x104=((10.1449674306958)*sj1);
IkReal x105=((35.3795366781791)*cj1);
IkReal x106=(pz*r22);
IkReal x107=((0.0321595467553058)*sj1);
IkReal x108=((54.837661787545)*sj1);
IkReal x109=(rxp2_2*sj1);
IkReal x110=(r21*sj5);
IkReal x111=((0.00594954798430385)*cj1);
IkReal x112=((35.3793473709543)*sj1);
IkReal x113=((54.8379552119957)*cj1);
IkReal x114=((0.0207482182656961)*sj1);
IkReal x115=((0.0321597188340749)*cj1);
IkReal x116=((0.0207483292849181)*cj1);
IkReal x117=(r20*r22*sj5);
IkReal x118=(cj5*r21*r22);
j0eval[0]=((((-18.8507119106488)*npz))+(((18.8507119106488)*x106))+(((-191.239715518672)*x109))+(((-191.240738800968)*x100))+(((-1.0)*x106*x108))+(((-1.0)*x110*x112))+x101+(((-1.0)*x106*x113))+(((3.48738170347003)*x118))+(((3.48738170347003)*x117))+((npz*x113))+((npz*x108))+(((-1.0)*x102*x117))+(((-1.0)*x102*x118))+((x101*x112))+(((-1.0)*x110))+(((-1.0)*x105*x110))+((x101*x105))+(((-5.40540540540541)*rxp2_2))+(((-1.0)*x104*x117))+(((-1.0)*x104*x118)));
j0eval[1]=IKsign(((((-1.0)*x111*x118))+(((-1.0)*x111*x117))+(((0.011055)*x106))+(((-0.00058645)*x110))+(((-1.0)*x106*x107))+(((-1.0)*x110*x116))+(((-1.0)*x110*x114))+(((-1.0)*x106*x115))+(((0.002045175)*x117))+(((0.002045175)*x118))+(((-0.112152531165925)*x109))+(((-0.011055)*npz))+((npz*x115))+((npz*x107))+(((-1.0)*x103*x117))+(((-1.0)*x103*x118))+((x101*x116))+((x101*x114))+(((-0.112153131269828)*x100))+(((-0.00317)*rxp2_2))+(((0.00058645)*x101))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x119=(cj5*r20);
IkReal x120=(cj1*npz);
IkReal x121=(cj1*rxp2_2);
IkReal x122=(r22*sj1);
IkReal x123=(cj5*r21);
IkReal x124=(cj1*r22);
IkReal x125=(r21*sj5);
IkReal x126=(r20*sj5);
IkReal x127=((10.1450217142192)*cj1);
IkReal x128=((10.1449674306958)*sj1);
IkReal x129=(npz*sj1);
IkReal x130=((1.0)*r22);
IkReal x131=((0.00058645)*r22);
IkReal x132=((0.00594951614973157)*sj1);
IkReal x133=(rxp2_2*sj1);
IkReal x134=((0.00594954798430385)*cj1);
IkReal x135=(pz*r22);
j0eval[0]=((((-1.0)*x119*x128))+(((-1.0)*x119*x127))+(((-1.0)*x123*x130))+(((191.239715518672)*x129))+(((5.40540540540541)*npz))+(((-35.3795366781791)*x124*x126))+(((191.240738800968)*x120))+(((-5.40540540540541)*x135))+(((54.837661787545)*x133))+(((-1.0)*x126*x130))+(((-3.48738170347003)*x125))+((x125*x127))+((x125*x128))+(((54.8379552119957)*x121))+(((3.48738170347003)*x119))+(((-35.3793473709543)*x122*x126))+(((-35.3793473709543)*x122*x123))+(((-18.8507119106488)*rxp2_2))+(((-191.240738800968)*pz*x124))+(((-191.239715518672)*pz*x122))+(((-35.3795366781791)*x123*x124)));
j0eval[1]=IKsign(((((-1.0)*x123*x131))+(((0.112152531165925)*x129))+(((-0.0207483292849181)*x123*x124))+(((-1.0)*x126*x131))+(((0.112153131269828)*x120))+(((-0.0207482182656961)*x122*x123))+(((-0.0207482182656961)*x122*x126))+(((0.002045175)*x119))+(((-0.011055)*rxp2_2))+(((0.00317)*npz))+((x125*x132))+((x125*x134))+(((-0.002045175)*x125))+(((-0.0207483292849181)*x124*x126))+(((0.0321597188340749)*x121))+(((-0.112152531165925)*pz*x122))+(((-0.00317)*x135))+(((-0.112153131269828)*pz*x124))+(((0.0321595467553058)*x133))+(((-1.0)*x119*x134))+(((-1.0)*x119*x132))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x136=cj5*cj5;
IkReal x137=r20*r20;
IkReal x138=r21*r21;
IkReal x139=pz*pz;
IkReal x140=((0.37)*pz);
IkReal x141=(cj5*r21);
IkReal x142=(r20*sj5);
IkReal x143=(npx*sj5);
IkReal x144=(cj5*npy);
IkReal x145=((10.8108108108108)*pz);
IkReal x146=(x136*x137);
IkReal x147=(x136*x138);
j0eval[0]=((-1.0)+((x142*x145))+(((2.0)*x141*x142))+(((-10.8108108108108)*x144))+(((-10.8108108108108)*x143))+x147+x137+((x141*x145))+(((-29.218407596786)*pp))+(((-1.0)*x146))+(((29.218407596786)*x139)));
j0eval[1]=IKsign(((-0.034225)+((x140*x142))+((x140*x141))+(((-0.37)*x143))+(((-0.37)*x144))+(((0.034225)*x137))+x139+(((-1.0)*pp))+(((-0.034225)*x146))+(((0.034225)*x147))+(((0.06845)*x141*x142))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x148=cj5*cj5;
IkReal x149=((0.37)*sj5);
IkReal x150=(cj5*r11);
IkReal x151=((0.0207483292849181)*cj1);
IkReal x152=((0.0321597188340749)*cj1);
IkReal x153=(sj1*sj5);
IkReal x154=(py*sj1);
IkReal x155=((0.0207482182656961)*sj1);
IkReal x156=(cj5*r01);
IkReal x157=(px*sj1);
IkReal x158=(r10*sj5);
IkReal x159=((0.00594954798430385)*cj1);
IkReal x160=(cj5*r21);
IkReal x161=(r00*sj5);
IkReal x162=((0.112153131269828)*cj1);
IkReal x163=((0.00594951614973157)*sj1);
IkReal x164=((0.034225)*x148);
CheckValue<IkReal> x165=IKPowWithIntegerCheck(IKsign(((-0.034225)+((pz*r20*x149))+(((-1.0)*pp))+(((r20*r20)*(((0.034225)+(((-1.0)*x164))))))+(pz*pz)+(((0.37)*pz*x160))+(((-0.37)*cj5*npy))+(((-1.0)*npx*x149))+((x164*(r21*r21)))+(((0.06845)*r20*sj5*x160)))),-1);
if(!x165.valid){
continue;
}
CheckValue<IkReal> x166 = IKatan2WithCheck(IkReal((((py*x162))+(((0.0207482182656961)*r10*x153))+(((0.00317)*py))+(((0.00058645)*x158))+(((0.00058645)*x150))+(((-0.002045175)*x156))+((x150*x155))+((x150*x151))+(((0.00594951614973157)*r00*x153))+(((-0.002045175)*x161))+((x151*x158))+((x156*x163))+(((0.112152531165925)*x154))+(((-0.011055)*px))+((x156*x159))+((px*x152))+(((0.0321595467553058)*x157))+((x159*x161)))),IkReal(((((0.011055)*py))+(((0.00317)*px))+(((0.00058645)*x156))+((x151*x161))+(((0.002045175)*x150))+(((0.002045175)*x158))+(((-1.0)*py*x152))+(((-1.0)*x150*x159))+(((-1.0)*x158*x159))+(((0.00058645)*x161))+(((-1.0)*x150*x163))+((x151*x156))+((x155*x156))+(((0.112152531165925)*x157))+(((-0.00594951614973157)*r10*x153))+((px*x162))+(((0.0207482182656961)*r00*x153))+(((-0.0321595467553058)*x154)))),IKFAST_ATAN2_MAGTHRESH);
if(!x166.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x165.value)))+(x166.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x167=IKcos(j0);
IkReal x168=IKsin(j0);
IkReal x169=((0.112152531165925)*sj1);
IkReal x170=((0.185)*cj5);
IkReal x171=(py*sj1);
IkReal x172=((0.112153131269828)*cj1);
IkReal x173=((0.185)*sj5);
IkReal x174=((0.0321597188340749)*cj1);
IkReal x175=((0.0321595467553058)*sj1);
IkReal x176=(r02*x167);
IkReal x177=(r01*x168);
IkReal x178=(r12*x168);
IkReal x179=((0.011055)*x167);
IkReal x180=(cj1*x168);
IkReal x181=(r00*x167);
IkReal x182=(py*x168);
IkReal x183=(sj1*x168);
IkReal x184=(r11*x168);
IkReal x185=(r01*x167);
IkReal x186=(r00*x168);
IkReal x187=(py*x167);
IkReal x188=(px*x168);
IkReal x189=(r10*x168);
IkReal x190=(px*x167);
IkReal x191=(x167*x173);
IkReal x192=(x167*x174);
IkReal x193=(x167*x175);
evalcond[0]=((0.00317)+((x173*x181))+((x173*x189))+x172+x169+x190+x182+((x170*x184))+((x170*x185)));
evalcond[1]=((0.011055)+((r11*x167*x170))+(((-1.0)*x174))+(((-1.0)*x175))+(((-1.0)*x188))+x187+(((-1.0)*x170*x177))+((r10*x191))+(((-1.0)*x173*x186)));
evalcond[2]=(((r02*x168*x175))+((r02*x168*x174))+(((-1.0)*r12*x193))+(((-1.0)*r12*x192))+((x169*x176))+((x169*x178))+((x172*x178))+((x172*x176))+npz+((r12*x179))+(((0.00317)*x178))+(((0.00317)*x176))+(((-0.011055)*r02*x168)));
evalcond[3]=(((x169*x181))+((x169*x189))+((x172*x189))+((x172*x181))+(((-0.011055)*x186))+((x174*x186))+npx+((x175*x186))+x173+((r10*x179))+(((0.00317)*x181))+(((0.00317)*x189))+(((-1.0)*r10*x193))+(((-1.0)*r10*x192)));
evalcond[4]=(((x169*x185))+((x169*x184))+((x172*x184))+((x172*x185))+(((-1.0)*r11*x193))+(((-1.0)*r11*x192))+(((-0.011055)*x177))+npy+((x175*x177))+x170+((x174*x177))+(((0.00317)*x184))+(((0.00317)*x185))+((r11*x179)));
evalcond[5]=((0.0204803113805695)+(((-0.22430506233185)*x168*x171))+(((5.31167845905561e-10)*sj1))+(((0.0643194376681498)*cj1*x187))+(((-0.224306262539655)*py*x180))+(((0.02211)*x188))+(((-1.45674683459633e-7)*(cj1*cj1)))+(((-0.0643190935106116)*px*x183))+(((5.31170688069656e-10)*cj1))+(((-0.0272249990631547)*cj1*sj1))+(((-1.0)*pp))+(((-0.224306262539655)*cj1*x190))+(((-0.00634)*x190))+(((-0.22430506233185)*sj1*x190))+(((0.0643190935106116)*x167*x171))+(((-0.02211)*x187))+(((-0.00634)*x182))+(((-0.0643194376681498)*px*x180)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1043=((0.112152531165925)*sj1);
IkReal x1044=((0.112153131269828)*cj1);
IkReal x1045=cj1*cj1;
IkReal x1046=((0.185)*npz);
IkReal x1047=(r12*sj1);
IkReal x1048=((1.0)*npz);
IkReal x1049=((0.00206848396296384)*cj1);
IkReal x1050=(r02*sj1);
IkReal x1051=((0.000711051383421396)*cj1);
IkReal x1052=((0.00594951614973157)*sj1);
IkReal x1053=((0.00594954798430385)*cj1);
IkReal x1054=((0.00113790655748393)*cj1);
IkReal x1055=((0.0207482182656961)*sj1);
IkReal x1056=((0.0207483292849181)*cj1);
IkReal x1057=((0.00721358773765195)*cj1*sj1);
IkReal x1058=(r02*x1045);
IkReal x1059=(r12*x1045);
IkReal x1060=(x1043+x1044);
CheckValue<IkReal> x1061 = IKatan2WithCheck(IkReal((((r02*x1054))+(((0.0011564494725067)*r12))+(((-0.000711047578759811)*x1047))+(((-1.0)*r12*x1051))+(((-0.00721358773765195)*cj1*x1050))+(((-1.0)*py*x1048))+(((-0.00357173021975646)*r02))+(((-1.0)*r10*sj5*x1046))+(((0.00113790046882498)*x1050))+((x1047*x1049))+(((1.10679800519768e-8)*x1059))+(((-3.85982422938959e-8)*x1058))+(((-1.0)*cj5*r11*x1046)))),IkReal(((((3.85982422938959e-8)*x1059))+(((-1.0)*r02*x1051))+(((0.0011564494725067)*r02))+(((0.00357173021975646)*r12))+(((-0.000711047578759811)*x1050))+(((-1.0)*r12*x1054))+(((-1.0)*px*x1048))+(((-0.00113790046882498)*x1047))+(((-1.0)*cj5*r01*x1046))+(((-1.0)*r00*sj5*x1046))+((x1049*x1050))+(((1.10679800519768e-8)*x1058))+(((0.00721358773765195)*cj1*x1047)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1061.valid){
continue;
}
CheckValue<IkReal> x1062=IKPowWithIntegerCheck(IKsign((((r21*(((((-0.002045175)*sj5))+((sj5*x1053))+((sj5*x1052))))))+((pz*r22*(((-0.00317)+(((-1.0)*x1060))))))+((r20*r22*(((((-1.0)*sj5*x1055))+(((-1.0)*sj5*x1056))+(((-0.00058645)*sj5))))))+((npz*(((0.00317)+x1060))))+((r20*(((((-1.0)*cj5*x1053))+(((-1.0)*cj5*x1052))+(((0.002045175)*cj5))))))+((r21*r22*(((((-1.0)*cj5*x1055))+(((-1.0)*cj5*x1056))+(((-0.00058645)*cj5))))))+((rxp2_2*(((-0.011055)+(((0.0321597188340749)*cj1))+(((0.0321595467553058)*sj1)))))))),-1);
if(!x1062.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1061.value)+(((1.5707963267949)*(x1062.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1063=IKcos(j0);
IkReal x1064=IKsin(j0);
IkReal x1065=((0.112152531165925)*sj1);
IkReal x1066=((0.185)*cj5);
IkReal x1067=(py*sj1);
IkReal x1068=((0.112153131269828)*cj1);
IkReal x1069=((0.185)*sj5);
IkReal x1070=((0.0321597188340749)*cj1);
IkReal x1071=((0.0321595467553058)*sj1);
IkReal x1072=(r02*x1063);
IkReal x1073=(r01*x1064);
IkReal x1074=(r12*x1064);
IkReal x1075=((0.011055)*x1063);
IkReal x1076=(cj1*x1064);
IkReal x1077=(r00*x1063);
IkReal x1078=(py*x1064);
IkReal x1079=(sj1*x1064);
IkReal x1080=(r11*x1064);
IkReal x1081=(r01*x1063);
IkReal x1082=(r00*x1064);
IkReal x1083=(py*x1063);
IkReal x1084=(px*x1064);
IkReal x1085=(r10*x1064);
IkReal x1086=(px*x1063);
IkReal x1087=(x1063*x1069);
IkReal x1088=(x1063*x1070);
IkReal x1089=(x1063*x1071);
evalcond[0]=((0.00317)+((x1069*x1077))+x1078+x1068+x1065+x1086+((x1069*x1085))+((x1066*x1080))+((x1066*x1081)));
evalcond[1]=((0.011055)+x1083+((r10*x1087))+(((-1.0)*x1084))+(((-1.0)*x1069*x1082))+((r11*x1063*x1066))+(((-1.0)*x1066*x1073))+(((-1.0)*x1071))+(((-1.0)*x1070)));
evalcond[2]=(((x1068*x1072))+((x1068*x1074))+((r12*x1075))+((r02*x1064*x1070))+((r02*x1064*x1071))+npz+(((-0.011055)*r02*x1064))+(((0.00317)*x1074))+(((0.00317)*x1072))+((x1065*x1072))+((x1065*x1074))+(((-1.0)*r12*x1088))+(((-1.0)*r12*x1089)));
evalcond[3]=(((x1068*x1077))+x1069+(((-1.0)*r10*x1088))+(((-1.0)*r10*x1089))+((x1068*x1085))+npx+((x1070*x1082))+((x1071*x1082))+((r10*x1075))+(((-0.011055)*x1082))+(((0.00317)*x1085))+(((0.00317)*x1077))+((x1065*x1085))+((x1065*x1077)));
evalcond[4]=((((-1.0)*r11*x1089))+(((-1.0)*r11*x1088))+x1066+((x1070*x1073))+((x1071*x1073))+((x1068*x1081))+((x1068*x1080))+npy+(((-0.011055)*x1073))+(((0.00317)*x1081))+(((0.00317)*x1080))+((x1065*x1081))+((x1065*x1080))+((r11*x1075)));
evalcond[5]=((0.0204803113805695)+(((0.0643194376681498)*cj1*x1083))+(((-0.00634)*x1078))+(((5.31167845905561e-10)*sj1))+(((-0.22430506233185)*x1064*x1067))+(((0.02211)*x1084))+(((-0.224306262539655)*py*x1076))+(((0.0643190935106116)*x1063*x1067))+(((-1.45674683459633e-7)*(cj1*cj1)))+(((5.31170688069656e-10)*cj1))+(((-0.02211)*x1083))+(((-0.0272249990631547)*cj1*sj1))+(((-1.0)*pp))+(((-0.224306262539655)*cj1*x1086))+(((-0.0643190935106116)*px*x1079))+(((-0.0643194376681498)*px*x1076))+(((-0.00634)*x1086))+(((-0.22430506233185)*sj1*x1086)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1090=cj1*cj1;
IkReal x1091=((0.0321597188340749)*cj1);
IkReal x1092=((0.0321595467553058)*sj1);
IkReal x1093=((0.185)*npz);
IkReal x1094=(r12*sj1);
IkReal x1095=(cj1*cj5);
IkReal x1096=((0.000711050852250708)*cj1);
IkReal x1097=(cj5*sj1);
IkReal x1098=(cj1*r02);
IkReal x1099=(r02*sj1);
IkReal x1100=(cj1*sj5);
IkReal x1101=(sj1*sj5);
IkReal x1102=((0.00721358773765195)*cj1*sj1);
IkReal x1103=((3.85982422938959e-8)*x1090);
IkReal x1104=((1.34606703407656e-7)*x1090);
IkReal x1105=(x1091+x1092);
CheckValue<IkReal> x1106 = IKatan2WithCheck(IkReal((((r02*x1104))+(((-1.0)*r12*x1103))+(((0.0125882391469238)*r02))+(((0.00113790655748393)*cj1*r12))+(((-0.00721358773765195)*cj1*x1094))+(((0.0251565151001909)*sj1*x1098))+((r02*x1096))+(((0.00113790046882498)*x1094))+(((-0.00357173021975646)*r12))+(((-1.0)*cj5*r01*x1093))+(((-1.0)*r00*sj5*x1093))+(((0.000711047047591965)*x1099))+(((-1.0)*npz*px)))),IkReal(((((-1.0)*r12*x1104))+((cj5*r11*x1093))+(((-0.0251565151001909)*cj1*x1094))+(((0.00113790046882498)*x1099))+(((-0.000711047047591965)*x1094))+(((-0.00357173021975646)*r02))+(((-1.0)*r12*x1096))+(((-1.0)*r02*x1103))+(((-0.0125882391469238)*r12))+(((0.00113790655748393)*x1098))+((npz*py))+(((-0.00721358773765195)*sj1*x1098))+((r10*sj5*x1093)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1106.valid){
continue;
}
CheckValue<IkReal> x1107=IKPowWithIntegerCheck(IKsign((((npz*(((-0.011055)+x1105))))+((r20*r22*(((((-0.00594951614973157)*x1101))+(((-0.00594954798430385)*x1100))+(((0.002045175)*sj5))))))+((pz*r22*(((0.011055)+(((-1.0)*x1105))))))+((r20*(((((0.00058645)*cj5))+(((0.0207483292849181)*x1095))+(((0.0207482182656961)*x1097))))))+((r21*r22*(((((-0.00594951614973157)*x1097))+(((-0.00594954798430385)*x1095))+(((0.002045175)*cj5))))))+((r21*(((((-0.0207482182656961)*x1101))+(((-0.0207483292849181)*x1100))+(((-0.00058645)*sj5))))))+((rxp2_2*(((-0.00317)+(((-0.112152531165925)*sj1))+(((-0.112153131269828)*cj1)))))))),-1);
if(!x1107.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1106.value)+(((1.5707963267949)*(x1107.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1108=IKcos(j0);
IkReal x1109=IKsin(j0);
IkReal x1110=((0.112152531165925)*sj1);
IkReal x1111=((0.185)*cj5);
IkReal x1112=(py*sj1);
IkReal x1113=((0.112153131269828)*cj1);
IkReal x1114=((0.185)*sj5);
IkReal x1115=((0.0321597188340749)*cj1);
IkReal x1116=((0.0321595467553058)*sj1);
IkReal x1117=(r02*x1108);
IkReal x1118=(r01*x1109);
IkReal x1119=(r12*x1109);
IkReal x1120=((0.011055)*x1108);
IkReal x1121=(cj1*x1109);
IkReal x1122=(r00*x1108);
IkReal x1123=(py*x1109);
IkReal x1124=(sj1*x1109);
IkReal x1125=(r11*x1109);
IkReal x1126=(r01*x1108);
IkReal x1127=(r00*x1109);
IkReal x1128=(py*x1108);
IkReal x1129=(px*x1109);
IkReal x1130=(r10*x1109);
IkReal x1131=(px*x1108);
IkReal x1132=(x1108*x1114);
IkReal x1133=(x1108*x1115);
IkReal x1134=(x1108*x1116);
evalcond[0]=((0.00317)+x1110+x1113+x1123+x1131+((x1114*x1122))+((x1111*x1126))+((x1111*x1125))+((x1114*x1130)));
evalcond[1]=((0.011055)+x1128+(((-1.0)*x1114*x1127))+((r10*x1132))+((r11*x1108*x1111))+(((-1.0)*x1129))+(((-1.0)*x1116))+(((-1.0)*x1115))+(((-1.0)*x1111*x1118)));
evalcond[2]=((((-1.0)*r12*x1133))+(((-1.0)*r12*x1134))+(((-0.011055)*r02*x1109))+((x1113*x1117))+((x1113*x1119))+(((0.00317)*x1117))+(((0.00317)*x1119))+((x1110*x1117))+((x1110*x1119))+npz+((r02*x1109*x1116))+((r02*x1109*x1115))+((r12*x1120)));
evalcond[3]=(x1114+((r10*x1120))+(((0.00317)*x1130))+(((0.00317)*x1122))+(((-1.0)*r10*x1133))+(((-1.0)*r10*x1134))+((x1110*x1122))+npx+((x1113*x1130))+(((-0.011055)*x1127))+((x1110*x1130))+((x1113*x1122))+((x1116*x1127))+((x1115*x1127)));
evalcond[4]=(x1111+(((-1.0)*r11*x1133))+(((-1.0)*r11*x1134))+(((-0.011055)*x1118))+(((0.00317)*x1126))+(((0.00317)*x1125))+((x1110*x1125))+((x1110*x1126))+npy+((x1113*x1125))+((x1113*x1126))+((x1116*x1118))+((r11*x1120))+((x1115*x1118)));
evalcond[5]=((0.0204803113805695)+(((-0.0643190935106116)*px*x1124))+(((-0.22430506233185)*sj1*x1131))+(((5.31167845905561e-10)*sj1))+(((-0.22430506233185)*x1109*x1112))+(((0.0643194376681498)*cj1*x1128))+(((-0.00634)*x1123))+(((-1.45674683459633e-7)*(cj1*cj1)))+(((-0.00634)*x1131))+(((5.31170688069656e-10)*cj1))+(((-0.224306262539655)*py*x1121))+(((-0.0272249990631547)*cj1*sj1))+(((-1.0)*pp))+(((-0.02211)*x1128))+(((0.0643190935106116)*x1108*x1112))+(((-0.224306262539655)*cj1*x1131))+(((-0.0643194376681498)*px*x1121))+(((0.02211)*x1129)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
    }
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x194=(cj5*r20);
IkReal x195=((0.484808591279923)*sj1);
IkReal x196=((0.0759773749914742)*cj0);
IkReal x197=(r20*sj5);
IkReal x198=((0.961260955728737)*cj0);
IkReal x199=((0.874620277504001)*sj1);
IkReal x200=(r12*sj0);
IkReal x201=((0.924022625008526)*cj0);
IkReal x202=((0.484808591279923)*cj1);
IkReal x203=((1.0)*cj5);
IkReal x204=(r02*sj0);
IkReal x205=((0.874620277504001)*cj1);
IkReal x206=((0.961260955728737)*sj0);
IkReal x207=(cj5*r21);
IkReal x208=((0.264961909490551)*cj0);
IkReal x209=(r21*sj5);
IkReal x210=((0.275639937221503)*cj0);
IkReal x211=((0.264961909490551)*sj0);
IkReal x212=(((r01*sj5))+(((-1.0)*r00*x203)));
IkReal x213=(((r11*sj5))+(((-1.0)*r10*x203)));
IkReal x214=(((cj5*r11))+((r10*sj5)));
IkReal x215=(((r00*sj5))+((cj5*r01)));
IkReal x216=(sj0*x213);
IkReal x217=(sj0*x212);
IkReal x218=(sj0*x214);
IkReal x219=(cj0*x212);
IkReal x220=((((0.961260955728737)*r22))+(((0.264961909490551)*x200))+(((-1.0)*r12*x196))+(((0.0759773749914742)*x204))+((r02*x208)));
IkReal x221=((((0.275639937221503)*r22))+(((-1.0)*r02*x201))+(((-0.264961909490551)*x204))+(((-0.924022625008526)*x200))+((r12*x208)));
IkReal x222=((((-0.275639937221503)*x209))+((x211*x212))+(((0.275639937221503)*x194))+(((0.924022625008526)*x216))+(((-1.0)*x208*x213))+((x201*x212)));
IkReal x223=((((-0.0759773749914742)*sj0*x215))+(((-0.961260955728737)*x197))+((x196*x214))+(((-1.0)*x211*x214))+(((-0.961260955728737)*x207))+(((-1.0)*x208*x215)));
IkReal x224=((((-0.275639937221503)*x207))+((x211*x215))+(((0.924022625008526)*x218))+(((-1.0)*x208*x214))+(((-0.275639937221503)*x197))+((x201*x215)));
IkReal x225=((((0.961260955728737)*x194))+((x196*x213))+(((-0.0759773749914742)*x217))+(((-0.264961909490551)*x216))+(((-0.264961909490551)*x219))+(((-0.961260955728737)*x209)));
IkReal x226=((0.874620277504001)*x224);
new_r00=(((x205*x221))+((x202*x220))+(((-1.0)*x195*x221))+((x199*x220)));
new_r01=(((r02*x210))+((r12*x198))+(((-0.961260955728737)*x204))+(((0.275639937221503)*x200)));
new_r02=(((x205*x220))+(((-1.0)*x195*x220))+(((-1.0)*x199*x221))+(((-1.0)*x202*x221)));
new_r10=(((x205*x222))+((x202*x225))+(((-1.0)*x195*x222))+((x199*x225)));
new_r11=(((x206*x212))+(((-1.0)*x198*x213))+(((-1.0)*x210*x212))+(((-0.275639937221503)*x216)));
new_r12=(((x205*x225))+(((-1.0)*x195*x225))+(((-1.0)*x199*x222))+(((-1.0)*x202*x222)));
new_r20=(((x205*x224))+((x202*x223))+(((-1.0)*x195*x224))+((x199*x223)));
new_r21=(((x206*x215))+(((-1.0)*x198*x214))+(((-1.0)*x210*x215))+(((-0.275639937221503)*x218)));
new_r22=(((x205*x223))+(((-1.0)*x195*x223))+(((-1.0)*x199*x224))+(((-1.0)*x202*x224)));
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
if( (((5.22168264099024)*new_r22)) < -1-IKFAST_SINCOS_THRESH || (((5.22168264099024)*new_r22)) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x227=IKasin(((5.22168264099024)*new_r22));
j3array[0]=((-0.392708189721731)+(((-1.0)*x227)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((2.74888446386806)+x227);
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IkReal j2eval[3];
IkReal x228=cj3*cj3;
IkReal x229=((1.8598868073379e+59)*cj3);
IkReal x230=(cj3*sj3);
IkReal x231=((7.70410186470807e+58)*sj3);
j2eval[0]=((-37.3534867700752)+(((1.00003643275569)*x230))+(((-1.0)*x228)));
j2eval[1]=IKsign(((-1.01828787271427e+60)+(((2.72618451395377e+58)*x230))+(((-2.72608519515785e+58)*x228))));
j2eval[2]=((IKabs(((((-1.0)*new_r21*x231))+((new_r21*x229))+(((1.03173823453868e+60)*new_r20)))))+(IKabs((((new_r20*x229))+(((-1.0)*new_r20*x231))+(((-1.03173823453868e+60)*new_r21))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j2eval[0]=0.031304478168604;
j2eval[1]=cj3;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j4eval[0]=0.968695521831396;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
j2array[0]=-0.178351851409032;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=2.96324080218076;
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[1];
evalcond[0]=((((-0.981490828164165)*(IKcos(j2))))+(((0.176930715729644)*(IKsin(j2)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[4];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=((((-2.45977528849694)*new_r10))+(((-1.0)*new_r00)));
j4eval[1]=6.45015404314502e+49;
j4eval[2]=cj2;
j4eval[3]=IKsign(((((-7.90387838998532e+24)*new_r00))+(((-1.94417647469709e+25)*new_r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=((((-2.45977528849694)*new_r11))+(((-1.0)*new_r01)));
j4eval[1]=IKsign(((((-7.90387838998532e+24)*new_r01))+(((-1.94417647469709e+25)*new_r11))));
j4eval[2]=6.45015404314502e+49;
j4eval[3]=sj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=((((-2.45977528849694)*new_r00))+new_r10);
j4eval[1]=6.45015404314502e+49;
j4eval[2]=cj2;
j4eval[3]=IKsign(((((7.90387838998532e+24)*new_r10))+(((-1.94417647469709e+25)*new_r00))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj3=0;
cj3=1.0;
j3=0;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
IkReal x232=(new_r01*new_r10);
IkReal x233=(new_r00*new_r11);
j4eval[0]=(x233+(((-1.0)*x232)));
j4eval[1]=IKsign(((((1.68927033786437e+63)*x233))+(((-1.68927033786437e+63)*x232))));
j4eval[2]=((IKabs(((((6.46448842153826e+62)*new_r10))+(((-4.4654782995919e+57)*new_r11)))))+(IKabs(((((4.4654782995919e+57)*new_r01))+(((-6.46448842153826e+62)*new_r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj3=0;
cj3=1.0;
j3=0;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
IkReal x234=(new_r00*new_r01);
IkReal x235=(new_r10*new_r11);
j4eval[0]=(x234+x235);
j4eval[1]=((IKabs(((((1.5317984975259e+63)*new_r10))+(((-4.4654782995919e+57)*new_r01)))))+(IKabs(((((-1.5317984975259e+63)*new_r00))+(((-4.4654782995919e+57)*new_r11))))));
j4eval[2]=IKsign(((((1.68927033786437e+63)*x234))+(((1.68927033786437e+63)*x235))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj3=0;
cj3=1.0;
j3=0;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
IkReal x236=new_r01*new_r01;
IkReal x237=new_r10*new_r10;
j4eval[0]=((-1.0)+x236+(((-1.0)*x237)));
j4eval[1]=IKsign(((-1.05119498311411e+60)+(((1.05119498311411e+60)*x236))+(((-1.05119498311411e+60)*x237))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x238=IKPowWithIntegerCheck(IKsign(((((-1.05119498311411e+60)*(new_r10*new_r10)))+(((-1.05119498311411e+60)*(new_r00*new_r00))))),-1);
if(!x238.valid){
continue;
}
CheckValue<IkReal> x239 = IKatan2WithCheck(IkReal(((((2.01313456846665e+59)*new_r10))+(((2.77876683235339e+54)*new_r00)))),IkReal(((((2.77876683235339e+54)*new_r10))+(((-2.01313456846665e+59)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x239.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x238.value)))+(x239.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[16];
IkReal x240=IKcos(j4);
IkReal x241=IKsin(j4);
IkReal x242=(new_r10*x240);
IkReal x243=(new_r11*x241);
IkReal x244=((0.191509149187798)*x240);
IkReal x245=((0.191509149187798)*x241);
IkReal x246=(new_r00*x241);
IkReal x247=((0.375595785440231)*x240);
IkReal x248=((0.906781148754705)*x240);
IkReal x249=(new_r10*x241);
IkReal x250=((2.64343616264363e-6)*x240);
IkReal x251=((0.382679330634011)*x241);
IkReal x252=((0.382679330634011)*x240);
IkReal x253=((2.64343616264363e-6)*x241);
IkReal x254=(new_r11*x240);
IkReal x255=((0.92388123148948)*x241);
evalcond[0]=((2.64343616264363e-6)+x242+x246);
evalcond[1]=((0.382679330634011)+x254+((new_r01*x241)));
evalcond[2]=((-0.191509149187798)+(((-1.0)*x249))+((new_r00*x240)));
evalcond[3]=((0.906781148754705)+(((-1.0)*x243))+((new_r01*x240)));
evalcond[4]=(x247+(((-1.0)*x255)));
evalcond[5]=((((-0.375595785440231)*x241))+(((-0.92388123148948)*x240)));
evalcond[6]=(x253+(((-1.0)*x244))+new_r00);
evalcond[7]=(x251+x248+new_r01);
evalcond[8]=(x250+x245+new_r10);
evalcond[9]=(x252+new_r11+(((-0.906781148754705)*x241)));
evalcond[10]=((((-1.0)*new_r01*x253))+(((-0.191509149187798)*x243))+(((-1.0)*new_r11*x250))+((new_r01*x244)));
evalcond[11]=((((-1.0)*new_r00*x247))+(((0.92388123148948)*x242))+(((0.92388123148948)*x246))+(((0.375595785440231)*x249)));
evalcond[12]=(((new_r01*x255))+(((0.92388123148948)*x254))+(((-1.0)*new_r01*x247))+(((0.375595785440231)*x243)));
evalcond[13]=((((0.906781148754705)*x249))+(((-1.0)*new_r00*x248))+(((-0.382679330634011)*x246))+(((-0.382679330634011)*x242)));
evalcond[14]=((-1.0)+((new_r00*x244))+(((-1.0)*new_r10*x245))+(((-2.64343616264363e-6)*x246))+(((-2.64343616264363e-6)*x242)));
evalcond[15]=((-1.0)+(((-1.0)*new_r01*x251))+(((0.906781148754705)*x243))+(((-1.0)*new_r01*x248))+(((-1.0)*new_r11*x252)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x256 = IKatan2WithCheck(IkReal(((((1.5317984975259e+63)*new_r10))+(((-4.4654782995919e+57)*new_r01)))),IkReal(((((-1.5317984975259e+63)*new_r00))+(((-4.4654782995919e+57)*new_r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x256.valid){
continue;
}
CheckValue<IkReal> x257=IKPowWithIntegerCheck(IKsign(((((1.68927033786437e+63)*new_r00*new_r01))+(((1.68927033786437e+63)*new_r10*new_r11)))),-1);
if(!x257.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x256.value)+(((1.5707963267949)*(x257.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[16];
IkReal x258=IKcos(j4);
IkReal x259=IKsin(j4);
IkReal x260=(new_r10*x258);
IkReal x261=(new_r11*x259);
IkReal x262=((0.191509149187798)*x258);
IkReal x263=((0.191509149187798)*x259);
IkReal x264=(new_r00*x259);
IkReal x265=((0.375595785440231)*x258);
IkReal x266=((0.906781148754705)*x258);
IkReal x267=(new_r10*x259);
IkReal x268=((2.64343616264363e-6)*x258);
IkReal x269=((0.382679330634011)*x259);
IkReal x270=((0.382679330634011)*x258);
IkReal x271=((2.64343616264363e-6)*x259);
IkReal x272=(new_r11*x258);
IkReal x273=((0.92388123148948)*x259);
evalcond[0]=((2.64343616264363e-6)+x264+x260);
evalcond[1]=((0.382679330634011)+((new_r01*x259))+x272);
evalcond[2]=((-0.191509149187798)+(((-1.0)*x267))+((new_r00*x258)));
evalcond[3]=((0.906781148754705)+((new_r01*x258))+(((-1.0)*x261)));
evalcond[4]=(x265+(((-1.0)*x273)));
evalcond[5]=((((-0.92388123148948)*x258))+(((-0.375595785440231)*x259)));
evalcond[6]=(x271+new_r00+(((-1.0)*x262)));
evalcond[7]=(x266+x269+new_r01);
evalcond[8]=(x263+x268+new_r10);
evalcond[9]=((((-0.906781148754705)*x259))+x270+new_r11);
evalcond[10]=((((-1.0)*new_r01*x271))+(((-0.191509149187798)*x261))+((new_r01*x262))+(((-1.0)*new_r11*x268)));
evalcond[11]=((((-1.0)*new_r00*x265))+(((0.92388123148948)*x260))+(((0.92388123148948)*x264))+(((0.375595785440231)*x267)));
evalcond[12]=((((-1.0)*new_r01*x265))+(((0.92388123148948)*x272))+((new_r01*x273))+(((0.375595785440231)*x261)));
evalcond[13]=((((0.906781148754705)*x267))+(((-1.0)*new_r00*x266))+(((-0.382679330634011)*x264))+(((-0.382679330634011)*x260)));
evalcond[14]=((-1.0)+(((-1.0)*new_r10*x263))+(((-2.64343616264363e-6)*x260))+(((-2.64343616264363e-6)*x264))+((new_r00*x262)));
evalcond[15]=((-1.0)+(((0.906781148754705)*x261))+(((-1.0)*new_r01*x266))+(((-1.0)*new_r01*x269))+(((-1.0)*new_r11*x270)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x274=IKPowWithIntegerCheck(IKsign(((((-1.68927033786437e+63)*new_r01*new_r10))+(((1.68927033786437e+63)*new_r00*new_r11)))),-1);
if(!x274.valid){
continue;
}
CheckValue<IkReal> x275 = IKatan2WithCheck(IkReal(((((6.46448842153826e+62)*new_r10))+(((-4.4654782995919e+57)*new_r11)))),IkReal(((((4.4654782995919e+57)*new_r01))+(((-6.46448842153826e+62)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x275.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x274.value)))+(x275.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[16];
IkReal x276=IKcos(j4);
IkReal x277=IKsin(j4);
IkReal x278=(new_r10*x276);
IkReal x279=(new_r11*x277);
IkReal x280=((0.191509149187798)*x276);
IkReal x281=((0.191509149187798)*x277);
IkReal x282=(new_r00*x277);
IkReal x283=((0.375595785440231)*x276);
IkReal x284=((0.906781148754705)*x276);
IkReal x285=(new_r10*x277);
IkReal x286=((2.64343616264363e-6)*x276);
IkReal x287=((0.382679330634011)*x277);
IkReal x288=((0.382679330634011)*x276);
IkReal x289=((2.64343616264363e-6)*x277);
IkReal x290=(new_r11*x276);
IkReal x291=((0.92388123148948)*x277);
evalcond[0]=((2.64343616264363e-6)+x278+x282);
evalcond[1]=((0.382679330634011)+x290+((new_r01*x277)));
evalcond[2]=((-0.191509149187798)+((new_r00*x276))+(((-1.0)*x285)));
evalcond[3]=((0.906781148754705)+(((-1.0)*x279))+((new_r01*x276)));
evalcond[4]=((((-1.0)*x291))+x283);
evalcond[5]=((((-0.375595785440231)*x277))+(((-0.92388123148948)*x276)));
evalcond[6]=(x289+(((-1.0)*x280))+new_r00);
evalcond[7]=(x287+x284+new_r01);
evalcond[8]=(x286+x281+new_r10);
evalcond[9]=((((-0.906781148754705)*x277))+x288+new_r11);
evalcond[10]=((((-0.191509149187798)*x279))+(((-1.0)*new_r01*x289))+(((-1.0)*new_r11*x286))+((new_r01*x280)));
evalcond[11]=((((0.92388123148948)*x278))+(((-1.0)*new_r00*x283))+(((0.92388123148948)*x282))+(((0.375595785440231)*x285)));
evalcond[12]=((((0.92388123148948)*x290))+((new_r01*x291))+(((-1.0)*new_r01*x283))+(((0.375595785440231)*x279)));
evalcond[13]=((((0.906781148754705)*x285))+(((-1.0)*new_r00*x284))+(((-0.382679330634011)*x282))+(((-0.382679330634011)*x278)));
evalcond[14]=((-1.0)+(((-1.0)*new_r10*x281))+(((-2.64343616264363e-6)*x278))+(((-2.64343616264363e-6)*x282))+((new_r00*x280)));
evalcond[15]=((-1.0)+(((0.906781148754705)*x279))+(((-1.0)*new_r01*x287))+(((-1.0)*new_r01*x284))+(((-1.0)*new_r11*x288)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj3=0;
cj3=1.0;
j3=0;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x292=(new_r01*new_r10);
IkReal x293=(new_r00*new_r11);
j4eval[0]=((((-1.0)*x292))+x293);
j4eval[1]=IKsign(((((1.68927033786437e+63)*x293))+(((-1.68927033786437e+63)*x292))));
j4eval[2]=((IKabs(((((-4.4654782995919e+57)*new_r01))+(((6.46448842153826e+62)*new_r00)))))+(IKabs(((((-6.46448842153826e+62)*new_r10))+(((4.4654782995919e+57)*new_r11))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj3=0;
cj3=1.0;
j3=0;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x294=(new_r00*new_r01);
IkReal x295=(new_r10*new_r11);
j4eval[0]=(x294+x295);
j4eval[1]=((IKabs(((((4.4654782995919e+57)*new_r11))+(((1.5317984975259e+63)*new_r00)))))+(IKabs(((((-1.5317984975259e+63)*new_r10))+(((4.4654782995919e+57)*new_r01))))));
j4eval[2]=IKsign(((((1.68927033786437e+63)*x295))+(((1.68927033786437e+63)*x294))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj3=0;
cj3=1.0;
j3=0;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x296=new_r10*new_r10;
IkReal x297=new_r01*new_r01;
j4eval[0]=((1.0)+(((-1.0)*x297))+x296);
j4eval[1]=IKsign(((1.05119498311411e+60)+(((1.05119498311411e+60)*x296))+(((-1.05119498311411e+60)*x297))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x298=IKPowWithIntegerCheck(IKsign(((((1.05119498311411e+60)*(new_r00*new_r00)))+(((1.05119498311411e+60)*(new_r10*new_r10))))),-1);
if(!x298.valid){
continue;
}
CheckValue<IkReal> x299 = IKatan2WithCheck(IkReal(((((2.01313456846665e+59)*new_r10))+(((2.77876683235339e+54)*new_r00)))),IkReal(((((2.77876683235339e+54)*new_r10))+(((-2.01313456846665e+59)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x299.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x298.value)))+(x299.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[16];
IkReal x300=IKcos(j4);
IkReal x301=IKsin(j4);
IkReal x302=(new_r10*x300);
IkReal x303=(new_r11*x301);
IkReal x304=((0.191509149187798)*x300);
IkReal x305=((0.191509149187798)*x301);
IkReal x306=(new_r00*x301);
IkReal x307=((0.375595785440231)*x300);
IkReal x308=((0.906781148754705)*x300);
IkReal x309=(new_r10*x301);
IkReal x310=((2.64343616264363e-6)*x300);
IkReal x311=((0.382679330634011)*x301);
IkReal x312=((0.382679330634011)*x300);
IkReal x313=((2.64343616264363e-6)*x301);
IkReal x314=(new_r11*x300);
IkReal x315=((0.92388123148948)*x301);
evalcond[0]=((-2.64343616264363e-6)+x306+x302);
evalcond[1]=((-0.382679330634011)+((new_r01*x301))+x314);
evalcond[2]=((0.191509149187798)+((new_r00*x300))+(((-1.0)*x309)));
evalcond[3]=((-0.906781148754705)+((new_r01*x300))+(((-1.0)*x303)));
evalcond[4]=(x307+(((-1.0)*x315)));
evalcond[5]=((((-0.375595785440231)*x301))+(((-0.92388123148948)*x300)));
evalcond[6]=(x304+(((-1.0)*x313))+new_r00);
evalcond[7]=((((-1.0)*x311))+new_r01+(((-1.0)*x308)));
evalcond[8]=((((-1.0)*x310))+new_r10+(((-1.0)*x305)));
evalcond[9]=((((0.906781148754705)*x301))+(((-1.0)*x312))+new_r11);
evalcond[10]=(((new_r01*x304))+(((-1.0)*new_r11*x310))+(((-0.191509149187798)*x303))+(((-1.0)*new_r01*x313)));
evalcond[11]=((((0.375595785440231)*x309))+(((0.92388123148948)*x306))+(((0.92388123148948)*x302))+(((-1.0)*new_r00*x307)));
evalcond[12]=((((0.375595785440231)*x303))+(((0.92388123148948)*x314))+((new_r01*x315))+(((-1.0)*new_r01*x307)));
evalcond[13]=((((0.906781148754705)*x309))+(((-0.382679330634011)*x302))+(((-0.382679330634011)*x306))+(((-1.0)*new_r00*x308)));
evalcond[14]=((1.0)+((new_r00*x304))+(((-2.64343616264363e-6)*x302))+(((-2.64343616264363e-6)*x306))+(((-1.0)*new_r10*x305)));
evalcond[15]=((1.0)+(((-1.0)*new_r11*x312))+(((0.906781148754705)*x303))+(((-1.0)*new_r01*x308))+(((-1.0)*new_r01*x311)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x316 = IKatan2WithCheck(IkReal(((((-1.5317984975259e+63)*new_r10))+(((4.4654782995919e+57)*new_r01)))),IkReal(((((4.4654782995919e+57)*new_r11))+(((1.5317984975259e+63)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x316.valid){
continue;
}
CheckValue<IkReal> x317=IKPowWithIntegerCheck(IKsign(((((1.68927033786437e+63)*new_r00*new_r01))+(((1.68927033786437e+63)*new_r10*new_r11)))),-1);
if(!x317.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x316.value)+(((1.5707963267949)*(x317.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[16];
IkReal x318=IKcos(j4);
IkReal x319=IKsin(j4);
IkReal x320=(new_r10*x318);
IkReal x321=(new_r11*x319);
IkReal x322=((0.191509149187798)*x318);
IkReal x323=((0.191509149187798)*x319);
IkReal x324=(new_r00*x319);
IkReal x325=((0.375595785440231)*x318);
IkReal x326=((0.906781148754705)*x318);
IkReal x327=(new_r10*x319);
IkReal x328=((2.64343616264363e-6)*x318);
IkReal x329=((0.382679330634011)*x319);
IkReal x330=((0.382679330634011)*x318);
IkReal x331=((2.64343616264363e-6)*x319);
IkReal x332=(new_r11*x318);
IkReal x333=((0.92388123148948)*x319);
evalcond[0]=((-2.64343616264363e-6)+x324+x320);
evalcond[1]=((-0.382679330634011)+((new_r01*x319))+x332);
evalcond[2]=((0.191509149187798)+((new_r00*x318))+(((-1.0)*x327)));
evalcond[3]=((-0.906781148754705)+((new_r01*x318))+(((-1.0)*x321)));
evalcond[4]=(x325+(((-1.0)*x333)));
evalcond[5]=((((-0.375595785440231)*x319))+(((-0.92388123148948)*x318)));
evalcond[6]=(x322+(((-1.0)*x331))+new_r00);
evalcond[7]=((((-1.0)*x326))+(((-1.0)*x329))+new_r01);
evalcond[8]=((((-1.0)*x323))+(((-1.0)*x328))+new_r10);
evalcond[9]=((((-1.0)*x330))+(((0.906781148754705)*x319))+new_r11);
evalcond[10]=(((new_r01*x322))+(((-0.191509149187798)*x321))+(((-1.0)*new_r11*x328))+(((-1.0)*new_r01*x331)));
evalcond[11]=((((0.375595785440231)*x327))+(((-1.0)*new_r00*x325))+(((0.92388123148948)*x320))+(((0.92388123148948)*x324)));
evalcond[12]=((((0.375595785440231)*x321))+((new_r01*x333))+(((-1.0)*new_r01*x325))+(((0.92388123148948)*x332)));
evalcond[13]=((((0.906781148754705)*x327))+(((-1.0)*new_r00*x326))+(((-0.382679330634011)*x324))+(((-0.382679330634011)*x320)));
evalcond[14]=((1.0)+((new_r00*x322))+(((-2.64343616264363e-6)*x324))+(((-2.64343616264363e-6)*x320))+(((-1.0)*new_r10*x323)));
evalcond[15]=((1.0)+(((-1.0)*new_r11*x330))+(((0.906781148754705)*x321))+(((-1.0)*new_r01*x326))+(((-1.0)*new_r01*x329)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x334=IKPowWithIntegerCheck(IKsign(((((-1.68927033786437e+63)*new_r01*new_r10))+(((1.68927033786437e+63)*new_r00*new_r11)))),-1);
if(!x334.valid){
continue;
}
CheckValue<IkReal> x335 = IKatan2WithCheck(IkReal(((((-6.46448842153826e+62)*new_r10))+(((4.4654782995919e+57)*new_r11)))),IkReal(((((-4.4654782995919e+57)*new_r01))+(((6.46448842153826e+62)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x335.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x334.value)))+(x335.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[16];
IkReal x336=IKcos(j4);
IkReal x337=IKsin(j4);
IkReal x338=(new_r10*x336);
IkReal x339=(new_r11*x337);
IkReal x340=((0.191509149187798)*x336);
IkReal x341=((0.191509149187798)*x337);
IkReal x342=(new_r00*x337);
IkReal x343=((0.375595785440231)*x336);
IkReal x344=((0.906781148754705)*x336);
IkReal x345=(new_r10*x337);
IkReal x346=((2.64343616264363e-6)*x336);
IkReal x347=((0.382679330634011)*x337);
IkReal x348=((0.382679330634011)*x336);
IkReal x349=((2.64343616264363e-6)*x337);
IkReal x350=(new_r11*x336);
IkReal x351=((0.92388123148948)*x337);
evalcond[0]=((-2.64343616264363e-6)+x338+x342);
evalcond[1]=((-0.382679330634011)+((new_r01*x337))+x350);
evalcond[2]=((0.191509149187798)+((new_r00*x336))+(((-1.0)*x345)));
evalcond[3]=((-0.906781148754705)+((new_r01*x336))+(((-1.0)*x339)));
evalcond[4]=((((-1.0)*x351))+x343);
evalcond[5]=((((-0.375595785440231)*x337))+(((-0.92388123148948)*x336)));
evalcond[6]=(x340+new_r00+(((-1.0)*x349)));
evalcond[7]=(new_r01+(((-1.0)*x344))+(((-1.0)*x347)));
evalcond[8]=(new_r10+(((-1.0)*x346))+(((-1.0)*x341)));
evalcond[9]=((((0.906781148754705)*x337))+new_r11+(((-1.0)*x348)));
evalcond[10]=((((-1.0)*new_r11*x346))+((new_r01*x340))+(((-1.0)*new_r01*x349))+(((-0.191509149187798)*x339)));
evalcond[11]=((((0.92388123148948)*x342))+(((0.375595785440231)*x345))+(((-1.0)*new_r00*x343))+(((0.92388123148948)*x338)));
evalcond[12]=(((new_r01*x351))+(((0.375595785440231)*x339))+(((-1.0)*new_r01*x343))+(((0.92388123148948)*x350)));
evalcond[13]=((((-1.0)*new_r00*x344))+(((0.906781148754705)*x345))+(((-0.382679330634011)*x342))+(((-0.382679330634011)*x338)));
evalcond[14]=((1.0)+(((-2.64343616264363e-6)*x338))+(((-1.0)*new_r10*x341))+(((-2.64343616264363e-6)*x342))+((new_r00*x340)));
evalcond[15]=((1.0)+(((-1.0)*new_r11*x348))+(((0.906781148754705)*x339))+(((-1.0)*new_r01*x347))+(((-1.0)*new_r01*x344)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj3=0;
cj3=1.0;
j3=0;
sj2=0;
cj2=1.0;
j2=0;
IkReal x352=(new_r01*new_r10);
IkReal x353=(new_r00*new_r11);
j4eval[0]=((((-1.0)*x352))+x353);
j4eval[1]=IKsign(((((1.68927033786437e+63)*x353))+(((-1.68927033786437e+63)*x352))));
j4eval[2]=((IKabs(((((4.4654782995919e+57)*new_r00))+(((6.46448842153826e+62)*new_r01)))))+(IKabs(((((-6.46448842153826e+62)*new_r11))+(((-4.4654782995919e+57)*new_r10))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj3=0;
cj3=1.0;
j3=0;
sj2=0;
cj2=1.0;
j2=0;
IkReal x354=(new_r00*new_r01);
IkReal x355=(new_r10*new_r11);
j4eval[0]=(x355+x354);
j4eval[1]=((IKabs(((((-3.2351072515259e+62)*new_r00))+(((-6.46448842153826e+62)*new_r11)))))+(IKabs(((((-6.46448842153826e+62)*new_r01))+(((3.2351072515259e+62)*new_r10))))));
j4eval[2]=IKsign(((((1.68927033786437e+63)*x355))+(((1.68927033786437e+63)*x354))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj3=0;
cj3=1.0;
j3=0;
sj2=0;
cj2=1.0;
j2=0;
IkReal x356=new_r10*new_r10;
IkReal x357=new_r01*new_r01;
j4eval[0]=((1.0)+(((-1.0)*x357))+x356);
j4eval[1]=IKsign(((2.37119410650553e+25)+(((2.37119410650553e+25)*x356))+(((-2.37119410650553e+25)*x357))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x358 = IKatan2WithCheck(IkReal(((((-9.07406973480849e+24)*new_r00))+(((2.15015411581747e+25)*new_r10)))),IkReal(((((-9.07406973480849e+24)*new_r10))+(((-2.15015411581747e+25)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x358.valid){
continue;
}
CheckValue<IkReal> x359=IKPowWithIntegerCheck(IKsign(((((2.37119410650553e+25)*(new_r00*new_r00)))+(((2.37119410650553e+25)*(new_r10*new_r10))))),-1);
if(!x359.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x358.value)+(((1.5707963267949)*(x359.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[16];
IkReal x360=IKcos(j4);
IkReal x361=IKsin(j4);
IkReal x362=(new_r10*x360);
IkReal x363=(new_r11*x361);
IkReal x364=((0.191509149187798)*x360);
IkReal x365=((0.191509149187798)*x361);
IkReal x366=(new_r00*x361);
IkReal x367=((0.375595785440231)*x360);
IkReal x368=((0.906781148754705)*x360);
IkReal x369=(new_r10*x361);
IkReal x370=((2.64343616264363e-6)*x360);
IkReal x371=((0.382679330634011)*x361);
IkReal x372=((0.382679330634011)*x360);
IkReal x373=((2.64343616264363e-6)*x361);
IkReal x374=(new_r11*x360);
IkReal x375=((0.92388123148948)*x361);
evalcond[0]=((0.382679330634011)+x362+x366);
evalcond[1]=((-2.64343616264363e-6)+x374+((new_r01*x361)));
evalcond[2]=((0.906781148754705)+(((-1.0)*x369))+((new_r00*x360)));
evalcond[3]=((0.191509149187798)+(((-1.0)*x363))+((new_r01*x360)));
evalcond[4]=((((-1.0)*x375))+x367);
evalcond[5]=((((-0.92388123148948)*x360))+(((-0.375595785440231)*x361)));
evalcond[6]=(x371+x368+new_r00);
evalcond[7]=((((-1.0)*x373))+x364+new_r01);
evalcond[8]=((((-0.906781148754705)*x361))+x372+new_r10);
evalcond[9]=((((-1.0)*x365))+(((-1.0)*x370))+new_r11);
evalcond[10]=(((new_r00*x364))+(((-1.0)*new_r10*x365))+(((-2.64343616264363e-6)*x366))+(((-2.64343616264363e-6)*x362)));
evalcond[11]=((((-1.0)*new_r00*x367))+(((0.92388123148948)*x366))+(((0.92388123148948)*x362))+(((0.375595785440231)*x369)));
evalcond[12]=((((0.92388123148948)*x374))+((new_r01*x375))+(((0.375595785440231)*x363))+(((-1.0)*new_r01*x367)));
evalcond[13]=((((0.906781148754705)*x363))+(((-1.0)*new_r11*x372))+(((-1.0)*new_r01*x371))+(((-1.0)*new_r01*x368)));
evalcond[14]=((1.0)+(((-0.191509149187798)*x363))+((new_r01*x364))+(((-1.0)*new_r11*x370))+(((-1.0)*new_r01*x373)));
evalcond[15]=((-1.0)+(((-1.0)*new_r00*x368))+(((0.906781148754705)*x369))+(((-0.382679330634011)*x366))+(((-0.382679330634011)*x362)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x376 = IKatan2WithCheck(IkReal(((((-6.46448842153826e+62)*new_r01))+(((3.2351072515259e+62)*new_r10)))),IkReal(((((-3.2351072515259e+62)*new_r00))+(((-6.46448842153826e+62)*new_r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x376.valid){
continue;
}
CheckValue<IkReal> x377=IKPowWithIntegerCheck(IKsign(((((1.68927033786437e+63)*new_r00*new_r01))+(((1.68927033786437e+63)*new_r10*new_r11)))),-1);
if(!x377.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x376.value)+(((1.5707963267949)*(x377.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[16];
IkReal x378=IKcos(j4);
IkReal x379=IKsin(j4);
IkReal x380=(new_r10*x378);
IkReal x381=(new_r11*x379);
IkReal x382=((0.191509149187798)*x378);
IkReal x383=((0.191509149187798)*x379);
IkReal x384=(new_r00*x379);
IkReal x385=((0.375595785440231)*x378);
IkReal x386=((0.906781148754705)*x378);
IkReal x387=(new_r10*x379);
IkReal x388=((2.64343616264363e-6)*x378);
IkReal x389=((0.382679330634011)*x379);
IkReal x390=((0.382679330634011)*x378);
IkReal x391=((2.64343616264363e-6)*x379);
IkReal x392=(new_r11*x378);
IkReal x393=((0.92388123148948)*x379);
evalcond[0]=((0.382679330634011)+x384+x380);
evalcond[1]=((-2.64343616264363e-6)+((new_r01*x379))+x392);
evalcond[2]=((0.906781148754705)+((new_r00*x378))+(((-1.0)*x387)));
evalcond[3]=((0.191509149187798)+((new_r01*x378))+(((-1.0)*x381)));
evalcond[4]=((((-1.0)*x393))+x385);
evalcond[5]=((((-0.92388123148948)*x378))+(((-0.375595785440231)*x379)));
evalcond[6]=(x386+x389+new_r00);
evalcond[7]=((((-1.0)*x391))+x382+new_r01);
evalcond[8]=((((-0.906781148754705)*x379))+x390+new_r10);
evalcond[9]=((((-1.0)*x383))+(((-1.0)*x388))+new_r11);
evalcond[10]=((((-1.0)*new_r10*x383))+((new_r00*x382))+(((-2.64343616264363e-6)*x380))+(((-2.64343616264363e-6)*x384)));
evalcond[11]=((((-1.0)*new_r00*x385))+(((0.375595785440231)*x387))+(((0.92388123148948)*x384))+(((0.92388123148948)*x380)));
evalcond[12]=((((0.375595785440231)*x381))+(((0.92388123148948)*x392))+(((-1.0)*new_r01*x385))+((new_r01*x393)));
evalcond[13]=((((0.906781148754705)*x381))+(((-1.0)*new_r01*x386))+(((-1.0)*new_r01*x389))+(((-1.0)*new_r11*x390)));
evalcond[14]=((1.0)+(((-1.0)*new_r01*x391))+((new_r01*x382))+(((-1.0)*new_r11*x388))+(((-0.191509149187798)*x381)));
evalcond[15]=((-1.0)+(((-1.0)*new_r00*x386))+(((0.906781148754705)*x387))+(((-0.382679330634011)*x380))+(((-0.382679330634011)*x384)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x394=IKPowWithIntegerCheck(IKsign(((((-1.68927033786437e+63)*new_r01*new_r10))+(((1.68927033786437e+63)*new_r00*new_r11)))),-1);
if(!x394.valid){
continue;
}
CheckValue<IkReal> x395 = IKatan2WithCheck(IkReal(((((-6.46448842153826e+62)*new_r11))+(((-4.4654782995919e+57)*new_r10)))),IkReal(((((4.4654782995919e+57)*new_r00))+(((6.46448842153826e+62)*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x395.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x394.value)))+(x395.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[16];
IkReal x396=IKcos(j4);
IkReal x397=IKsin(j4);
IkReal x398=(new_r10*x396);
IkReal x399=(new_r11*x397);
IkReal x400=((0.191509149187798)*x396);
IkReal x401=((0.191509149187798)*x397);
IkReal x402=(new_r00*x397);
IkReal x403=((0.375595785440231)*x396);
IkReal x404=((0.906781148754705)*x396);
IkReal x405=(new_r10*x397);
IkReal x406=((2.64343616264363e-6)*x396);
IkReal x407=((0.382679330634011)*x397);
IkReal x408=((0.382679330634011)*x396);
IkReal x409=((2.64343616264363e-6)*x397);
IkReal x410=(new_r11*x396);
IkReal x411=((0.92388123148948)*x397);
evalcond[0]=((0.382679330634011)+x398+x402);
evalcond[1]=((-2.64343616264363e-6)+x410+((new_r01*x397)));
evalcond[2]=((0.906781148754705)+((new_r00*x396))+(((-1.0)*x405)));
evalcond[3]=((0.191509149187798)+(((-1.0)*x399))+((new_r01*x396)));
evalcond[4]=(x403+(((-1.0)*x411)));
evalcond[5]=((((-0.375595785440231)*x397))+(((-0.92388123148948)*x396)));
evalcond[6]=(x404+x407+new_r00);
evalcond[7]=(x400+new_r01+(((-1.0)*x409)));
evalcond[8]=((((-0.906781148754705)*x397))+x408+new_r10);
evalcond[9]=(new_r11+(((-1.0)*x401))+(((-1.0)*x406)));
evalcond[10]=((((-2.64343616264363e-6)*x398))+(((-2.64343616264363e-6)*x402))+(((-1.0)*new_r10*x401))+((new_r00*x400)));
evalcond[11]=((((0.375595785440231)*x405))+(((0.92388123148948)*x398))+(((0.92388123148948)*x402))+(((-1.0)*new_r00*x403)));
evalcond[12]=((((0.92388123148948)*x410))+(((0.375595785440231)*x399))+(((-1.0)*new_r01*x403))+((new_r01*x411)));
evalcond[13]=((((-1.0)*new_r11*x408))+(((-1.0)*new_r01*x404))+(((-1.0)*new_r01*x407))+(((0.906781148754705)*x399)));
evalcond[14]=((1.0)+(((-0.191509149187798)*x399))+((new_r01*x400))+(((-1.0)*new_r11*x406))+(((-1.0)*new_r01*x409)));
evalcond[15]=((-1.0)+(((0.906781148754705)*x405))+(((-0.382679330634011)*x402))+(((-0.382679330634011)*x398))+(((-1.0)*new_r00*x404)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj3=0;
cj3=1.0;
j3=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x412=(new_r01*new_r10);
IkReal x413=(new_r00*new_r11);
j4eval[0]=(x413+(((-1.0)*x412)));
j4eval[1]=IKsign(((((1.68927033786437e+63)*x413))+(((-1.68927033786437e+63)*x412))));
j4eval[2]=((IKabs(((((4.4654782995919e+57)*new_r10))+(((6.46448842153826e+62)*new_r11)))))+(IKabs(((((-6.46448842153826e+62)*new_r01))+(((-4.4654782995919e+57)*new_r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj3=0;
cj3=1.0;
j3=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x414=(new_r00*new_r01);
IkReal x415=(new_r10*new_r11);
j4eval[0]=(x414+x415);
j4eval[1]=((IKabs(((((-3.2351072515259e+62)*new_r10))+(((6.46448842153826e+62)*new_r01)))))+(IKabs(((((3.2351072515259e+62)*new_r00))+(((6.46448842153826e+62)*new_r11))))));
j4eval[2]=IKsign(((((1.68927033786437e+63)*x414))+(((1.68927033786437e+63)*x415))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj3=0;
cj3=1.0;
j3=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x416=new_r10*new_r10;
IkReal x417=new_r01*new_r01;
j4eval[0]=((1.0)+x416+(((-1.0)*x417)));
j4eval[1]=IKsign(((2.37119410650553e+25)+(((-2.37119410650553e+25)*x417))+(((2.37119410650553e+25)*x416))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x418 = IKatan2WithCheck(IkReal(((((-2.15015411581747e+25)*new_r10))+(((9.07406973480849e+24)*new_r00)))),IkReal(((((9.07406973480849e+24)*new_r10))+(((2.15015411581747e+25)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x418.valid){
continue;
}
CheckValue<IkReal> x419=IKPowWithIntegerCheck(IKsign(((((2.37119410650553e+25)*(new_r00*new_r00)))+(((2.37119410650553e+25)*(new_r10*new_r10))))),-1);
if(!x419.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x418.value)+(((1.5707963267949)*(x419.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[16];
IkReal x420=IKcos(j4);
IkReal x421=IKsin(j4);
IkReal x422=(new_r10*x420);
IkReal x423=(new_r11*x421);
IkReal x424=((0.191509149187798)*x420);
IkReal x425=((0.191509149187798)*x421);
IkReal x426=(new_r00*x421);
IkReal x427=((0.375595785440231)*x420);
IkReal x428=((0.906781148754705)*x420);
IkReal x429=(new_r10*x421);
IkReal x430=((2.64343616264363e-6)*x420);
IkReal x431=((0.382679330634011)*x421);
IkReal x432=((0.382679330634011)*x420);
IkReal x433=((2.64343616264363e-6)*x421);
IkReal x434=(new_r11*x420);
IkReal x435=((0.92388123148948)*x421);
evalcond[0]=((-0.382679330634011)+x426+x422);
evalcond[1]=((2.64343616264363e-6)+x434+((new_r01*x421)));
evalcond[2]=((-0.906781148754705)+(((-1.0)*x429))+((new_r00*x420)));
evalcond[3]=((-0.191509149187798)+(((-1.0)*x423))+((new_r01*x420)));
evalcond[4]=((((-1.0)*x435))+x427);
evalcond[5]=((((-0.375595785440231)*x421))+(((-0.92388123148948)*x420)));
evalcond[6]=((((-1.0)*x431))+(((-1.0)*x428))+new_r00);
evalcond[7]=((((-1.0)*x424))+x433+new_r01);
evalcond[8]=((((-1.0)*x432))+(((0.906781148754705)*x421))+new_r10);
evalcond[9]=(x425+x430+new_r11);
evalcond[10]=((((-1.0)*new_r10*x425))+((new_r00*x424))+(((-2.64343616264363e-6)*x426))+(((-2.64343616264363e-6)*x422)));
evalcond[11]=((((-1.0)*new_r00*x427))+(((0.375595785440231)*x429))+(((0.92388123148948)*x422))+(((0.92388123148948)*x426)));
evalcond[12]=(((new_r01*x435))+(((0.375595785440231)*x423))+(((0.92388123148948)*x434))+(((-1.0)*new_r01*x427)));
evalcond[13]=((((-1.0)*new_r01*x431))+(((0.906781148754705)*x423))+(((-1.0)*new_r11*x432))+(((-1.0)*new_r01*x428)));
evalcond[14]=((-1.0)+(((-1.0)*new_r01*x433))+(((-0.191509149187798)*x423))+(((-1.0)*new_r11*x430))+((new_r01*x424)));
evalcond[15]=((1.0)+(((-1.0)*new_r00*x428))+(((0.906781148754705)*x429))+(((-0.382679330634011)*x426))+(((-0.382679330634011)*x422)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x436=IKPowWithIntegerCheck(IKsign(((((1.68927033786437e+63)*new_r00*new_r01))+(((1.68927033786437e+63)*new_r10*new_r11)))),-1);
if(!x436.valid){
continue;
}
CheckValue<IkReal> x437 = IKatan2WithCheck(IkReal(((((-3.2351072515259e+62)*new_r10))+(((6.46448842153826e+62)*new_r01)))),IkReal(((((3.2351072515259e+62)*new_r00))+(((6.46448842153826e+62)*new_r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x437.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x436.value)))+(x437.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[16];
IkReal x438=IKcos(j4);
IkReal x439=IKsin(j4);
IkReal x440=(new_r10*x438);
IkReal x441=(new_r11*x439);
IkReal x442=((0.191509149187798)*x438);
IkReal x443=((0.191509149187798)*x439);
IkReal x444=(new_r00*x439);
IkReal x445=((0.375595785440231)*x438);
IkReal x446=((0.906781148754705)*x438);
IkReal x447=(new_r10*x439);
IkReal x448=((2.64343616264363e-6)*x438);
IkReal x449=((0.382679330634011)*x439);
IkReal x450=((0.382679330634011)*x438);
IkReal x451=((2.64343616264363e-6)*x439);
IkReal x452=(new_r11*x438);
IkReal x453=((0.92388123148948)*x439);
evalcond[0]=((-0.382679330634011)+x444+x440);
evalcond[1]=((2.64343616264363e-6)+((new_r01*x439))+x452);
evalcond[2]=((-0.906781148754705)+((new_r00*x438))+(((-1.0)*x447)));
evalcond[3]=((-0.191509149187798)+((new_r01*x438))+(((-1.0)*x441)));
evalcond[4]=((((-1.0)*x453))+x445);
evalcond[5]=((((-0.92388123148948)*x438))+(((-0.375595785440231)*x439)));
evalcond[6]=((((-1.0)*x449))+(((-1.0)*x446))+new_r00);
evalcond[7]=((((-1.0)*x442))+x451+new_r01);
evalcond[8]=((((0.906781148754705)*x439))+(((-1.0)*x450))+new_r10);
evalcond[9]=(x448+x443+new_r11);
evalcond[10]=(((new_r00*x442))+(((-1.0)*new_r10*x443))+(((-2.64343616264363e-6)*x444))+(((-2.64343616264363e-6)*x440)));
evalcond[11]=((((-1.0)*new_r00*x445))+(((0.375595785440231)*x447))+(((0.92388123148948)*x440))+(((0.92388123148948)*x444)));
evalcond[12]=(((new_r01*x453))+(((-1.0)*new_r01*x445))+(((0.375595785440231)*x441))+(((0.92388123148948)*x452)));
evalcond[13]=((((-1.0)*new_r01*x449))+(((-1.0)*new_r01*x446))+(((0.906781148754705)*x441))+(((-1.0)*new_r11*x450)));
evalcond[14]=((-1.0)+((new_r01*x442))+(((-1.0)*new_r01*x451))+(((-1.0)*new_r11*x448))+(((-0.191509149187798)*x441)));
evalcond[15]=((1.0)+(((-1.0)*new_r00*x446))+(((0.906781148754705)*x447))+(((-0.382679330634011)*x444))+(((-0.382679330634011)*x440)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x454=IKPowWithIntegerCheck(IKsign(((((-1.68927033786437e+63)*new_r01*new_r10))+(((1.68927033786437e+63)*new_r00*new_r11)))),-1);
if(!x454.valid){
continue;
}
CheckValue<IkReal> x455 = IKatan2WithCheck(IkReal(((((4.4654782995919e+57)*new_r10))+(((6.46448842153826e+62)*new_r11)))),IkReal(((((-6.46448842153826e+62)*new_r01))+(((-4.4654782995919e+57)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x455.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x454.value)))+(x455.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[16];
IkReal x456=IKcos(j4);
IkReal x457=IKsin(j4);
IkReal x458=(new_r10*x456);
IkReal x459=(new_r11*x457);
IkReal x460=((0.191509149187798)*x456);
IkReal x461=((0.191509149187798)*x457);
IkReal x462=(new_r00*x457);
IkReal x463=((0.375595785440231)*x456);
IkReal x464=((0.906781148754705)*x456);
IkReal x465=(new_r10*x457);
IkReal x466=((2.64343616264363e-6)*x456);
IkReal x467=((0.382679330634011)*x457);
IkReal x468=((0.382679330634011)*x456);
IkReal x469=((2.64343616264363e-6)*x457);
IkReal x470=(new_r11*x456);
IkReal x471=((0.92388123148948)*x457);
evalcond[0]=((-0.382679330634011)+x458+x462);
evalcond[1]=((2.64343616264363e-6)+((new_r01*x457))+x470);
evalcond[2]=((-0.906781148754705)+((new_r00*x456))+(((-1.0)*x465)));
evalcond[3]=((-0.191509149187798)+((new_r01*x456))+(((-1.0)*x459)));
evalcond[4]=((((-1.0)*x471))+x463);
evalcond[5]=((((-0.92388123148948)*x456))+(((-0.375595785440231)*x457)));
evalcond[6]=((((-1.0)*x467))+(((-1.0)*x464))+new_r00);
evalcond[7]=((((-1.0)*x460))+x469+new_r01);
evalcond[8]=((((-1.0)*x468))+(((0.906781148754705)*x457))+new_r10);
evalcond[9]=(x461+x466+new_r11);
evalcond[10]=(((new_r00*x460))+(((-2.64343616264363e-6)*x458))+(((-1.0)*new_r10*x461))+(((-2.64343616264363e-6)*x462)));
evalcond[11]=((((0.375595785440231)*x465))+(((-1.0)*new_r00*x463))+(((0.92388123148948)*x462))+(((0.92388123148948)*x458)));
evalcond[12]=((((0.92388123148948)*x470))+((new_r01*x471))+(((-1.0)*new_r01*x463))+(((0.375595785440231)*x459)));
evalcond[13]=((((-1.0)*new_r11*x468))+(((-1.0)*new_r01*x467))+(((-1.0)*new_r01*x464))+(((0.906781148754705)*x459)));
evalcond[14]=((-1.0)+(((-0.191509149187798)*x459))+((new_r01*x460))+(((-1.0)*new_r11*x466))+(((-1.0)*new_r01*x469)));
evalcond[15]=((1.0)+(((-0.382679330634011)*x458))+(((-0.382679330634011)*x462))+(((-1.0)*new_r00*x464))+(((0.906781148754705)*x465)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x472 = IKatan2WithCheck(IkReal(((((7.43996151971472e+24)*cj2))+(((5.1393063997753e+19)*sj2)))),IkReal(((((-3.0246508916922e+24)*cj2))+(((-2.08933979612247e+19)*sj2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x472.valid){
continue;
}
CheckValue<IkReal> x473=IKPowWithIntegerCheck(IKsign(((((7.90387838998532e+24)*new_r10))+(((-1.94417647469709e+25)*new_r00)))),-1);
if(!x473.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x472.value)+(((1.5707963267949)*(x473.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[16];
IkReal x474=IKsin(j4);
IkReal x475=IKcos(j4);
IkReal x476=((1.0)*sj2);
IkReal x477=(new_r10*x475);
IkReal x478=(new_r11*x474);
IkReal x479=((0.191509149187798)*x475);
IkReal x480=((0.382679330634011)*x475);
IkReal x481=(new_r00*x474);
IkReal x482=((0.375595785440231)*x475);
IkReal x483=(sj2*x474);
IkReal x484=(sj2*x475);
IkReal x485=(new_r10*x474);
IkReal x486=(cj2*x474);
IkReal x487=(cj2*x475);
IkReal x488=(new_r11*x475);
IkReal x489=(new_r01*x474);
IkReal x490=(new_r00*x475);
IkReal x491=(new_r01*x475);
evalcond[0]=((((-0.92388123148948)*x474))+x482);
evalcond[1]=((((-0.92388123148948)*x475))+(((-0.375595785440231)*x474)));
evalcond[2]=((((0.382679330634011)*cj2))+x481+x477+(((2.64343616264363e-6)*sj2)));
evalcond[3]=((((0.382679330634011)*sj2))+(((-2.64343616264363e-6)*cj2))+x489+x488);
evalcond[4]=((((0.906781148754705)*cj2))+(((-1.0)*x485))+x490+(((-0.191509149187798)*sj2)));
evalcond[5]=((((0.191509149187798)*cj2))+(((-1.0)*x478))+x491+(((0.906781148754705)*sj2)));
evalcond[6]=((((0.92388123148948)*x477))+(((-1.0)*new_r00*x482))+(((0.375595785440231)*x485))+(((0.92388123148948)*x481)));
evalcond[7]=((((-1.0)*new_r01*x482))+(((0.375595785440231)*x478))+(((0.92388123148948)*x489))+(((0.92388123148948)*x488)));
evalcond[8]=((((-0.191509149187798)*x478))+cj2+((new_r01*x479))+(((-2.64343616264363e-6)*x489))+(((-2.64343616264363e-6)*x488)));
evalcond[9]=((((-1.0)*sj2*x479))+(((0.382679330634011)*x486))+(((2.64343616264363e-6)*x483))+new_r00+(((0.906781148754705)*x487)));
evalcond[10]=((((0.382679330634011)*x483))+((cj2*x479))+(((-2.64343616264363e-6)*x486))+new_r01+(((0.906781148754705)*x484)));
evalcond[11]=(((cj2*x480))+(((0.191509149187798)*x483))+(((2.64343616264363e-6)*x484))+new_r10+(((-0.906781148754705)*x486)));
evalcond[12]=((((-2.64343616264363e-6)*x487))+((sj2*x480))+new_r11+(((-0.906781148754705)*x483))+(((-0.191509149187798)*x486)));
evalcond[13]=((((-2.64343616264363e-6)*x477))+(((-1.0)*x476))+((new_r00*x479))+(((-2.64343616264363e-6)*x481))+(((-0.191509149187798)*x485)));
evalcond[14]=((((-0.382679330634011)*x477))+(((0.906781148754705)*x485))+(((-0.906781148754705)*x490))+(((-0.382679330634011)*x481))+(((-1.0)*cj2)));
evalcond[15]=((((-1.0)*new_r11*x480))+(((-1.0)*x476))+(((0.906781148754705)*x478))+(((-0.906781148754705)*x491))+(((-0.382679330634011)*x489)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x492 = IKatan2WithCheck(IkReal(((((3.0246508916922e+24)*sj2))+(((-2.08933979612247e+19)*cj2)))),IkReal(((((7.43996151971472e+24)*sj2))+(((-5.1393063997753e+19)*cj2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x492.valid){
continue;
}
CheckValue<IkReal> x493=IKPowWithIntegerCheck(IKsign(((((-7.90387838998532e+24)*new_r01))+(((-1.94417647469709e+25)*new_r11)))),-1);
if(!x493.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x492.value)+(((1.5707963267949)*(x493.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[16];
IkReal x494=IKsin(j4);
IkReal x495=IKcos(j4);
IkReal x496=((1.0)*sj2);
IkReal x497=(new_r10*x495);
IkReal x498=(new_r11*x494);
IkReal x499=((0.191509149187798)*x495);
IkReal x500=((0.382679330634011)*x495);
IkReal x501=(new_r00*x494);
IkReal x502=((0.375595785440231)*x495);
IkReal x503=(sj2*x494);
IkReal x504=(sj2*x495);
IkReal x505=(new_r10*x494);
IkReal x506=(cj2*x494);
IkReal x507=(cj2*x495);
IkReal x508=(new_r11*x495);
IkReal x509=(new_r01*x494);
IkReal x510=(new_r00*x495);
IkReal x511=(new_r01*x495);
evalcond[0]=((((-0.92388123148948)*x494))+x502);
evalcond[1]=((((-0.375595785440231)*x494))+(((-0.92388123148948)*x495)));
evalcond[2]=((((0.382679330634011)*cj2))+x497+x501+(((2.64343616264363e-6)*sj2)));
evalcond[3]=((((0.382679330634011)*sj2))+(((-2.64343616264363e-6)*cj2))+x508+x509);
evalcond[4]=((((0.906781148754705)*cj2))+x510+(((-0.191509149187798)*sj2))+(((-1.0)*x505)));
evalcond[5]=((((0.191509149187798)*cj2))+(((-1.0)*x498))+x511+(((0.906781148754705)*sj2)));
evalcond[6]=((((0.92388123148948)*x497))+(((-1.0)*new_r00*x502))+(((0.375595785440231)*x505))+(((0.92388123148948)*x501)));
evalcond[7]=((((-1.0)*new_r01*x502))+(((0.92388123148948)*x508))+(((0.92388123148948)*x509))+(((0.375595785440231)*x498)));
evalcond[8]=((((-0.191509149187798)*x498))+cj2+(((-2.64343616264363e-6)*x508))+(((-2.64343616264363e-6)*x509))+((new_r01*x499)));
evalcond[9]=((((0.906781148754705)*x507))+(((-1.0)*sj2*x499))+(((2.64343616264363e-6)*x503))+(((0.382679330634011)*x506))+new_r00);
evalcond[10]=((((0.906781148754705)*x504))+(((-2.64343616264363e-6)*x506))+(((0.382679330634011)*x503))+new_r01+((cj2*x499)));
evalcond[11]=(((cj2*x500))+(((2.64343616264363e-6)*x504))+(((-0.906781148754705)*x506))+new_r10+(((0.191509149187798)*x503)));
evalcond[12]=(((sj2*x500))+(((-2.64343616264363e-6)*x507))+(((-0.191509149187798)*x506))+(((-0.906781148754705)*x503))+new_r11);
evalcond[13]=((((-1.0)*x496))+(((-2.64343616264363e-6)*x501))+(((-0.191509149187798)*x505))+(((-2.64343616264363e-6)*x497))+((new_r00*x499)));
evalcond[14]=((((-0.906781148754705)*x510))+(((0.906781148754705)*x505))+(((-0.382679330634011)*x501))+(((-1.0)*cj2))+(((-0.382679330634011)*x497)));
evalcond[15]=((((-0.906781148754705)*x511))+(((-1.0)*x496))+(((-0.382679330634011)*x509))+(((0.906781148754705)*x498))+(((-1.0)*new_r11*x500)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x512=IKPowWithIntegerCheck(IKsign(((((-7.90387838998532e+24)*new_r00))+(((-1.94417647469709e+25)*new_r10)))),-1);
if(!x512.valid){
continue;
}
CheckValue<IkReal> x513 = IKatan2WithCheck(IkReal(((((3.0246508916922e+24)*cj2))+(((2.08933979612247e+19)*sj2)))),IkReal(((((7.43996151971472e+24)*cj2))+(((5.1393063997753e+19)*sj2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x513.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x512.value)))+(x513.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[16];
IkReal x514=IKsin(j4);
IkReal x515=IKcos(j4);
IkReal x516=((1.0)*sj2);
IkReal x517=(new_r10*x515);
IkReal x518=(new_r11*x514);
IkReal x519=((0.191509149187798)*x515);
IkReal x520=((0.382679330634011)*x515);
IkReal x521=(new_r00*x514);
IkReal x522=((0.375595785440231)*x515);
IkReal x523=(sj2*x514);
IkReal x524=(sj2*x515);
IkReal x525=(new_r10*x514);
IkReal x526=(cj2*x514);
IkReal x527=(cj2*x515);
IkReal x528=(new_r11*x515);
IkReal x529=(new_r01*x514);
IkReal x530=(new_r00*x515);
IkReal x531=(new_r01*x515);
evalcond[0]=(x522+(((-0.92388123148948)*x514)));
evalcond[1]=((((-0.375595785440231)*x514))+(((-0.92388123148948)*x515)));
evalcond[2]=((((0.382679330634011)*cj2))+x521+x517+(((2.64343616264363e-6)*sj2)));
evalcond[3]=((((0.382679330634011)*sj2))+(((-2.64343616264363e-6)*cj2))+x528+x529);
evalcond[4]=((((-1.0)*x525))+(((0.906781148754705)*cj2))+x530+(((-0.191509149187798)*sj2)));
evalcond[5]=((((0.191509149187798)*cj2))+(((-1.0)*x518))+x531+(((0.906781148754705)*sj2)));
evalcond[6]=((((0.92388123148948)*x521))+(((0.92388123148948)*x517))+(((-1.0)*new_r00*x522))+(((0.375595785440231)*x525)));
evalcond[7]=((((0.92388123148948)*x528))+(((0.92388123148948)*x529))+(((-1.0)*new_r01*x522))+(((0.375595785440231)*x518)));
evalcond[8]=(((new_r01*x519))+cj2+(((-2.64343616264363e-6)*x528))+(((-2.64343616264363e-6)*x529))+(((-0.191509149187798)*x518)));
evalcond[9]=((((0.906781148754705)*x527))+(((-1.0)*sj2*x519))+(((0.382679330634011)*x526))+(((2.64343616264363e-6)*x523))+new_r00);
evalcond[10]=((((0.906781148754705)*x524))+(((-2.64343616264363e-6)*x526))+(((0.382679330634011)*x523))+((cj2*x519))+new_r01);
evalcond[11]=((((0.191509149187798)*x523))+(((-0.906781148754705)*x526))+(((2.64343616264363e-6)*x524))+((cj2*x520))+new_r10);
evalcond[12]=(((sj2*x520))+(((-2.64343616264363e-6)*x527))+(((-0.906781148754705)*x523))+(((-0.191509149187798)*x526))+new_r11);
evalcond[13]=(((new_r00*x519))+(((-2.64343616264363e-6)*x521))+(((-0.191509149187798)*x525))+(((-2.64343616264363e-6)*x517))+(((-1.0)*x516)));
evalcond[14]=((((-0.382679330634011)*x521))+(((0.906781148754705)*x525))+(((-0.906781148754705)*x530))+(((-0.382679330634011)*x517))+(((-1.0)*cj2)));
evalcond[15]=((((-0.382679330634011)*x529))+(((-1.0)*new_r11*x520))+(((-0.906781148754705)*x531))+(((0.906781148754705)*x518))+(((-1.0)*x516)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
j2array[0]=0.178351851409032;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=3.31994450499883;
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[1];
evalcond[0]=((((-0.981490828164165)*(IKcos(j2))))+(((-0.176930715729644)*(IKsin(j2)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[4];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=((((-2.45977528849694)*new_r10))+(((-1.0)*new_r00)));
j4eval[1]=6.45015404314502e+49;
j4eval[2]=cj2;
j4eval[3]=IKsign(((((-7.90387838998532e+24)*new_r00))+(((-1.94417647469709e+25)*new_r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=((((-2.45977528849694)*new_r11))+(((-1.0)*new_r01)));
j4eval[1]=6.45015404314502e+49;
j4eval[2]=sj2;
j4eval[3]=IKsign(((((-7.90387838998532e+24)*new_r01))+(((-1.94417647469709e+25)*new_r11))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=((((-2.45977528849694)*new_r00))+new_r10);
j4eval[1]=6.45015404314502e+49;
j4eval[2]=cj2;
j4eval[3]=IKsign(((((7.90387838998532e+24)*new_r10))+(((-1.94417647469709e+25)*new_r00))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
IkReal x532=(new_r01*new_r10);
IkReal x533=(new_r00*new_r11);
j4eval[0]=((((-1.0)*x532))+x533);
j4eval[1]=IKsign(((((-1.68927033786437e+63)*x532))+(((1.68927033786437e+63)*x533))));
j4eval[2]=((IKabs(((((-6.46448842153826e+62)*new_r10))+(((-4.4654782995919e+57)*new_r11)))))+(IKabs(((((4.4654782995919e+57)*new_r01))+(((6.46448842153826e+62)*new_r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
IkReal x534=(new_r10*new_r11);
IkReal x535=(new_r00*new_r01);
j4eval[0]=((((-1.0)*x535))+(((-1.0)*x534)));
j4eval[1]=((IKabs(((((4.4654782995919e+57)*new_r01))+(((1.5317984975259e+63)*new_r10)))))+(IKabs(((((-1.5317984975259e+63)*new_r00))+(((4.4654782995919e+57)*new_r11))))));
j4eval[2]=IKsign(((((-1.68927033786437e+63)*x534))+(((-1.68927033786437e+63)*x535))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
IkReal x536=new_r01*new_r01;
IkReal x537=new_r10*new_r10;
j4eval[0]=((-1.0)+(((-1.0)*x537))+x536);
j4eval[1]=IKsign(((-1.05119498311411e+60)+(((1.05119498311411e+60)*x536))+(((-1.05119498311411e+60)*x537))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x538=IKPowWithIntegerCheck(IKsign(((((-1.05119498311411e+60)*(new_r10*new_r10)))+(((-1.05119498311411e+60)*(new_r00*new_r00))))),-1);
if(!x538.valid){
continue;
}
CheckValue<IkReal> x539 = IKatan2WithCheck(IkReal(((((2.01313456846665e+59)*new_r10))+(((2.77876683235339e+54)*new_r00)))),IkReal(((((2.77876683235339e+54)*new_r10))+(((-2.01313456846665e+59)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x539.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x538.value)))+(x539.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[16];
IkReal x540=IKcos(j4);
IkReal x541=IKsin(j4);
IkReal x542=(new_r10*x540);
IkReal x543=(new_r11*x541);
IkReal x544=((0.191509149187798)*x540);
IkReal x545=((0.191509149187798)*x541);
IkReal x546=(new_r00*x541);
IkReal x547=((0.375595785440231)*x540);
IkReal x548=((0.906781148754705)*x540);
IkReal x549=(new_r10*x541);
IkReal x550=((2.64343616264363e-6)*x540);
IkReal x551=((0.382679330634011)*x541);
IkReal x552=((0.382679330634011)*x540);
IkReal x553=((2.64343616264363e-6)*x541);
IkReal x554=(new_r11*x540);
IkReal x555=((0.92388123148948)*x541);
evalcond[0]=((2.64343616264363e-6)+x546+x542);
evalcond[1]=((-0.382679330634011)+x554+((new_r01*x541)));
evalcond[2]=((-0.191509149187798)+((new_r00*x540))+(((-1.0)*x549)));
evalcond[3]=((-0.906781148754705)+(((-1.0)*x543))+((new_r01*x540)));
evalcond[4]=((((-1.0)*x547))+x555);
evalcond[5]=((((0.92388123148948)*x540))+(((0.375595785440231)*x541)));
evalcond[6]=((((-1.0)*x544))+x553+new_r00);
evalcond[7]=((((-1.0)*x548))+(((-1.0)*x551))+new_r01);
evalcond[8]=(x550+x545+new_r10);
evalcond[9]=((((0.906781148754705)*x541))+(((-1.0)*x552))+new_r11);
evalcond[10]=((((-1.0)*new_r11*x550))+(((-1.0)*new_r01*x553))+(((-0.191509149187798)*x543))+((new_r01*x544)));
evalcond[11]=(((new_r00*x547))+(((-0.375595785440231)*x549))+(((-0.92388123148948)*x542))+(((-0.92388123148948)*x546)));
evalcond[12]=((((-0.92388123148948)*x554))+(((-0.375595785440231)*x543))+(((-1.0)*new_r01*x555))+((new_r01*x547)));
evalcond[13]=(((new_r00*x548))+(((0.382679330634011)*x542))+(((0.382679330634011)*x546))+(((-0.906781148754705)*x549)));
evalcond[14]=((-1.0)+((new_r00*x544))+(((-2.64343616264363e-6)*x542))+(((-2.64343616264363e-6)*x546))+(((-1.0)*new_r10*x545)));
evalcond[15]=((-1.0)+((new_r11*x552))+(((-0.906781148754705)*x543))+((new_r01*x551))+((new_r01*x548)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x556 = IKatan2WithCheck(IkReal(((((4.4654782995919e+57)*new_r01))+(((1.5317984975259e+63)*new_r10)))),IkReal(((((-1.5317984975259e+63)*new_r00))+(((4.4654782995919e+57)*new_r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x556.valid){
continue;
}
CheckValue<IkReal> x557=IKPowWithIntegerCheck(IKsign(((((-1.68927033786437e+63)*new_r00*new_r01))+(((-1.68927033786437e+63)*new_r10*new_r11)))),-1);
if(!x557.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x556.value)+(((1.5707963267949)*(x557.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[16];
IkReal x558=IKcos(j4);
IkReal x559=IKsin(j4);
IkReal x560=(new_r10*x558);
IkReal x561=(new_r11*x559);
IkReal x562=((0.191509149187798)*x558);
IkReal x563=((0.191509149187798)*x559);
IkReal x564=(new_r00*x559);
IkReal x565=((0.375595785440231)*x558);
IkReal x566=((0.906781148754705)*x558);
IkReal x567=(new_r10*x559);
IkReal x568=((2.64343616264363e-6)*x558);
IkReal x569=((0.382679330634011)*x559);
IkReal x570=((0.382679330634011)*x558);
IkReal x571=((2.64343616264363e-6)*x559);
IkReal x572=(new_r11*x558);
IkReal x573=((0.92388123148948)*x559);
evalcond[0]=((2.64343616264363e-6)+x564+x560);
evalcond[1]=((-0.382679330634011)+x572+((new_r01*x559)));
evalcond[2]=((-0.191509149187798)+(((-1.0)*x567))+((new_r00*x558)));
evalcond[3]=((-0.906781148754705)+(((-1.0)*x561))+((new_r01*x558)));
evalcond[4]=(x573+(((-1.0)*x565)));
evalcond[5]=((((0.92388123148948)*x558))+(((0.375595785440231)*x559)));
evalcond[6]=(x571+new_r00+(((-1.0)*x562)));
evalcond[7]=(new_r01+(((-1.0)*x566))+(((-1.0)*x569)));
evalcond[8]=(x568+x563+new_r10);
evalcond[9]=((((0.906781148754705)*x559))+(((-1.0)*x570))+new_r11);
evalcond[10]=((((-0.191509149187798)*x561))+((new_r01*x562))+(((-1.0)*new_r01*x571))+(((-1.0)*new_r11*x568)));
evalcond[11]=(((new_r00*x565))+(((-0.92388123148948)*x560))+(((-0.92388123148948)*x564))+(((-0.375595785440231)*x567)));
evalcond[12]=(((new_r01*x565))+(((-0.375595785440231)*x561))+(((-0.92388123148948)*x572))+(((-1.0)*new_r01*x573)));
evalcond[13]=(((new_r00*x566))+(((-0.906781148754705)*x567))+(((0.382679330634011)*x560))+(((0.382679330634011)*x564)));
evalcond[14]=((-1.0)+(((-2.64343616264363e-6)*x560))+(((-2.64343616264363e-6)*x564))+((new_r00*x562))+(((-1.0)*new_r10*x563)));
evalcond[15]=((-1.0)+((new_r11*x570))+((new_r01*x566))+((new_r01*x569))+(((-0.906781148754705)*x561)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x574 = IKatan2WithCheck(IkReal(((((-6.46448842153826e+62)*new_r10))+(((-4.4654782995919e+57)*new_r11)))),IkReal(((((4.4654782995919e+57)*new_r01))+(((6.46448842153826e+62)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x574.valid){
continue;
}
CheckValue<IkReal> x575=IKPowWithIntegerCheck(IKsign(((((-1.68927033786437e+63)*new_r01*new_r10))+(((1.68927033786437e+63)*new_r00*new_r11)))),-1);
if(!x575.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x574.value)+(((1.5707963267949)*(x575.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[16];
IkReal x576=IKcos(j4);
IkReal x577=IKsin(j4);
IkReal x578=(new_r10*x576);
IkReal x579=(new_r11*x577);
IkReal x580=((0.191509149187798)*x576);
IkReal x581=((0.191509149187798)*x577);
IkReal x582=(new_r00*x577);
IkReal x583=((0.375595785440231)*x576);
IkReal x584=((0.906781148754705)*x576);
IkReal x585=(new_r10*x577);
IkReal x586=((2.64343616264363e-6)*x576);
IkReal x587=((0.382679330634011)*x577);
IkReal x588=((0.382679330634011)*x576);
IkReal x589=((2.64343616264363e-6)*x577);
IkReal x590=(new_r11*x576);
IkReal x591=((0.92388123148948)*x577);
evalcond[0]=((2.64343616264363e-6)+x578+x582);
evalcond[1]=((-0.382679330634011)+((new_r01*x577))+x590);
evalcond[2]=((-0.191509149187798)+(((-1.0)*x585))+((new_r00*x576)));
evalcond[3]=((-0.906781148754705)+((new_r01*x576))+(((-1.0)*x579)));
evalcond[4]=(x591+(((-1.0)*x583)));
evalcond[5]=((((0.92388123148948)*x576))+(((0.375595785440231)*x577)));
evalcond[6]=(x589+new_r00+(((-1.0)*x580)));
evalcond[7]=(new_r01+(((-1.0)*x587))+(((-1.0)*x584)));
evalcond[8]=(x581+x586+new_r10);
evalcond[9]=((((0.906781148754705)*x577))+new_r11+(((-1.0)*x588)));
evalcond[10]=((((-1.0)*new_r01*x589))+(((-1.0)*new_r11*x586))+((new_r01*x580))+(((-0.191509149187798)*x579)));
evalcond[11]=((((-0.92388123148948)*x582))+((new_r00*x583))+(((-0.92388123148948)*x578))+(((-0.375595785440231)*x585)));
evalcond[12]=((((-1.0)*new_r01*x591))+(((-0.375595785440231)*x579))+((new_r01*x583))+(((-0.92388123148948)*x590)));
evalcond[13]=((((-0.906781148754705)*x585))+(((0.382679330634011)*x578))+(((0.382679330634011)*x582))+((new_r00*x584)));
evalcond[14]=((-1.0)+(((-2.64343616264363e-6)*x578))+((new_r00*x580))+(((-1.0)*new_r10*x581))+(((-2.64343616264363e-6)*x582)));
evalcond[15]=((-1.0)+(((-0.906781148754705)*x579))+((new_r01*x584))+((new_r01*x587))+((new_r11*x588)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x592=(new_r01*new_r10);
IkReal x593=(new_r00*new_r11);
j4eval[0]=((((-1.0)*x592))+x593);
j4eval[1]=IKsign(((((-1.68927033786437e+63)*x592))+(((1.68927033786437e+63)*x593))));
j4eval[2]=((IKabs(((((4.4654782995919e+57)*new_r11))+(((6.46448842153826e+62)*new_r10)))))+(IKabs(((((-6.46448842153826e+62)*new_r00))+(((-4.4654782995919e+57)*new_r01))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x594=(new_r00*new_r01);
IkReal x595=(new_r10*new_r11);
j4eval[0]=(x595+x594);
j4eval[1]=((IKabs(((((4.4654782995919e+57)*new_r01))+(((1.5317984975259e+63)*new_r10)))))+(IKabs(((((-1.5317984975259e+63)*new_r00))+(((4.4654782995919e+57)*new_r11))))));
j4eval[2]=IKsign(((((1.68927033786437e+63)*x595))+(((1.68927033786437e+63)*x594))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x596=new_r10*new_r10;
IkReal x597=new_r01*new_r01;
j4eval[0]=((1.0)+(((-1.0)*x597))+x596);
j4eval[1]=IKsign(((1.05119498311411e+60)+(((1.05119498311411e+60)*x596))+(((-1.05119498311411e+60)*x597))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x598=IKPowWithIntegerCheck(IKsign(((((1.05119498311411e+60)*(new_r00*new_r00)))+(((1.05119498311411e+60)*(new_r10*new_r10))))),-1);
if(!x598.valid){
continue;
}
CheckValue<IkReal> x599 = IKatan2WithCheck(IkReal(((((2.01313456846665e+59)*new_r10))+(((2.77876683235339e+54)*new_r00)))),IkReal(((((2.77876683235339e+54)*new_r10))+(((-2.01313456846665e+59)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x599.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x598.value)))+(x599.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[16];
IkReal x600=IKcos(j4);
IkReal x601=IKsin(j4);
IkReal x602=(new_r10*x600);
IkReal x603=(new_r11*x601);
IkReal x604=((0.191509149187798)*x600);
IkReal x605=((0.191509149187798)*x601);
IkReal x606=(new_r00*x601);
IkReal x607=((0.375595785440231)*x600);
IkReal x608=((0.906781148754705)*x600);
IkReal x609=(new_r10*x601);
IkReal x610=((2.64343616264363e-6)*x600);
IkReal x611=((0.382679330634011)*x601);
IkReal x612=((0.382679330634011)*x600);
IkReal x613=((2.64343616264363e-6)*x601);
IkReal x614=(new_r11*x600);
IkReal x615=((0.92388123148948)*x601);
evalcond[0]=((-2.64343616264363e-6)+x602+x606);
evalcond[1]=((0.382679330634011)+x614+((new_r01*x601)));
evalcond[2]=((0.191509149187798)+(((-1.0)*x609))+((new_r00*x600)));
evalcond[3]=((0.906781148754705)+(((-1.0)*x603))+((new_r01*x600)));
evalcond[4]=(x615+(((-1.0)*x607)));
evalcond[5]=((((0.92388123148948)*x600))+(((0.375595785440231)*x601)));
evalcond[6]=((((-1.0)*x613))+x604+new_r00);
evalcond[7]=(x608+x611+new_r01);
evalcond[8]=((((-1.0)*x610))+(((-1.0)*x605))+new_r10);
evalcond[9]=((((-0.906781148754705)*x601))+x612+new_r11);
evalcond[10]=((((-1.0)*new_r11*x610))+(((-0.191509149187798)*x603))+((new_r01*x604))+(((-1.0)*new_r01*x613)));
evalcond[11]=((((-0.92388123148948)*x602))+(((-0.92388123148948)*x606))+(((-0.375595785440231)*x609))+((new_r00*x607)));
evalcond[12]=((((-0.92388123148948)*x614))+(((-0.375595785440231)*x603))+((new_r01*x607))+(((-1.0)*new_r01*x615)));
evalcond[13]=((((-0.906781148754705)*x609))+(((0.382679330634011)*x602))+(((0.382679330634011)*x606))+((new_r00*x608)));
evalcond[14]=((1.0)+(((-1.0)*new_r10*x605))+(((-2.64343616264363e-6)*x602))+(((-2.64343616264363e-6)*x606))+((new_r00*x604)));
evalcond[15]=((1.0)+(((-0.906781148754705)*x603))+((new_r11*x612))+((new_r01*x608))+((new_r01*x611)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x616 = IKatan2WithCheck(IkReal(((((4.4654782995919e+57)*new_r01))+(((1.5317984975259e+63)*new_r10)))),IkReal(((((-1.5317984975259e+63)*new_r00))+(((4.4654782995919e+57)*new_r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x616.valid){
continue;
}
CheckValue<IkReal> x617=IKPowWithIntegerCheck(IKsign(((((1.68927033786437e+63)*new_r00*new_r01))+(((1.68927033786437e+63)*new_r10*new_r11)))),-1);
if(!x617.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x616.value)+(((1.5707963267949)*(x617.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[16];
IkReal x618=IKcos(j4);
IkReal x619=IKsin(j4);
IkReal x620=(new_r10*x618);
IkReal x621=(new_r11*x619);
IkReal x622=((0.191509149187798)*x618);
IkReal x623=((0.191509149187798)*x619);
IkReal x624=(new_r00*x619);
IkReal x625=((0.375595785440231)*x618);
IkReal x626=((0.906781148754705)*x618);
IkReal x627=(new_r10*x619);
IkReal x628=((2.64343616264363e-6)*x618);
IkReal x629=((0.382679330634011)*x619);
IkReal x630=((0.382679330634011)*x618);
IkReal x631=((2.64343616264363e-6)*x619);
IkReal x632=(new_r11*x618);
IkReal x633=((0.92388123148948)*x619);
evalcond[0]=((-2.64343616264363e-6)+x624+x620);
evalcond[1]=((0.382679330634011)+x632+((new_r01*x619)));
evalcond[2]=((0.191509149187798)+(((-1.0)*x627))+((new_r00*x618)));
evalcond[3]=((0.906781148754705)+(((-1.0)*x621))+((new_r01*x618)));
evalcond[4]=((((-1.0)*x625))+x633);
evalcond[5]=((((0.92388123148948)*x618))+(((0.375595785440231)*x619)));
evalcond[6]=((((-1.0)*x631))+x622+new_r00);
evalcond[7]=(x626+x629+new_r01);
evalcond[8]=((((-1.0)*x623))+(((-1.0)*x628))+new_r10);
evalcond[9]=((((-0.906781148754705)*x619))+x630+new_r11);
evalcond[10]=((((-1.0)*new_r01*x631))+(((-0.191509149187798)*x621))+((new_r01*x622))+(((-1.0)*new_r11*x628)));
evalcond[11]=((((-0.375595785440231)*x627))+((new_r00*x625))+(((-0.92388123148948)*x620))+(((-0.92388123148948)*x624)));
evalcond[12]=((((-1.0)*new_r01*x633))+(((-0.375595785440231)*x621))+((new_r01*x625))+(((-0.92388123148948)*x632)));
evalcond[13]=(((new_r00*x626))+(((0.382679330634011)*x620))+(((0.382679330634011)*x624))+(((-0.906781148754705)*x627)));
evalcond[14]=((1.0)+((new_r00*x622))+(((-2.64343616264363e-6)*x620))+(((-2.64343616264363e-6)*x624))+(((-1.0)*new_r10*x623)));
evalcond[15]=((1.0)+((new_r01*x629))+((new_r01*x626))+((new_r11*x630))+(((-0.906781148754705)*x621)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x634=IKPowWithIntegerCheck(IKsign(((((-1.68927033786437e+63)*new_r01*new_r10))+(((1.68927033786437e+63)*new_r00*new_r11)))),-1);
if(!x634.valid){
continue;
}
CheckValue<IkReal> x635 = IKatan2WithCheck(IkReal(((((4.4654782995919e+57)*new_r11))+(((6.46448842153826e+62)*new_r10)))),IkReal(((((-6.46448842153826e+62)*new_r00))+(((-4.4654782995919e+57)*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x635.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x634.value)))+(x635.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[16];
IkReal x636=IKcos(j4);
IkReal x637=IKsin(j4);
IkReal x638=(new_r10*x636);
IkReal x639=(new_r11*x637);
IkReal x640=((0.191509149187798)*x636);
IkReal x641=((0.191509149187798)*x637);
IkReal x642=(new_r00*x637);
IkReal x643=((0.375595785440231)*x636);
IkReal x644=((0.906781148754705)*x636);
IkReal x645=(new_r10*x637);
IkReal x646=((2.64343616264363e-6)*x636);
IkReal x647=((0.382679330634011)*x637);
IkReal x648=((0.382679330634011)*x636);
IkReal x649=((2.64343616264363e-6)*x637);
IkReal x650=(new_r11*x636);
IkReal x651=((0.92388123148948)*x637);
evalcond[0]=((-2.64343616264363e-6)+x642+x638);
evalcond[1]=((0.382679330634011)+((new_r01*x637))+x650);
evalcond[2]=((0.191509149187798)+(((-1.0)*x645))+((new_r00*x636)));
evalcond[3]=((0.906781148754705)+((new_r01*x636))+(((-1.0)*x639)));
evalcond[4]=((((-1.0)*x643))+x651);
evalcond[5]=((((0.92388123148948)*x636))+(((0.375595785440231)*x637)));
evalcond[6]=((((-1.0)*x649))+x640+new_r00);
evalcond[7]=(x647+x644+new_r01);
evalcond[8]=((((-1.0)*x646))+(((-1.0)*x641))+new_r10);
evalcond[9]=(x648+new_r11+(((-0.906781148754705)*x637)));
evalcond[10]=((((-1.0)*new_r11*x646))+(((-1.0)*new_r01*x649))+((new_r01*x640))+(((-0.191509149187798)*x639)));
evalcond[11]=((((-0.375595785440231)*x645))+(((-0.92388123148948)*x642))+((new_r00*x643))+(((-0.92388123148948)*x638)));
evalcond[12]=((((-0.375595785440231)*x639))+(((-0.92388123148948)*x650))+(((-1.0)*new_r01*x651))+((new_r01*x643)));
evalcond[13]=((((0.382679330634011)*x642))+(((-0.906781148754705)*x645))+(((0.382679330634011)*x638))+((new_r00*x644)));
evalcond[14]=((1.0)+(((-2.64343616264363e-6)*x642))+(((-1.0)*new_r10*x641))+((new_r00*x640))+(((-2.64343616264363e-6)*x638)));
evalcond[15]=((1.0)+((new_r11*x648))+((new_r01*x647))+((new_r01*x644))+(((-0.906781148754705)*x639)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj2=0;
cj2=1.0;
j2=0;
IkReal x652=(new_r01*new_r10);
IkReal x653=(new_r00*new_r11);
j4eval[0]=((((-1.0)*x652))+x653);
j4eval[1]=IKsign(((((-1.68927033786437e+63)*x652))+(((1.68927033786437e+63)*x653))));
j4eval[2]=((IKabs(((((4.4654782995919e+57)*new_r00))+(((-6.46448842153826e+62)*new_r01)))))+(IKabs(((((6.46448842153826e+62)*new_r11))+(((-4.4654782995919e+57)*new_r10))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj2=0;
cj2=1.0;
j2=0;
IkReal x654=(new_r00*new_r01);
IkReal x655=(new_r10*new_r11);
j4eval[0]=(x654+x655);
j4eval[1]=((IKabs(((((3.2351072515259e+62)*new_r10))+(((6.46448842153826e+62)*new_r01)))))+(IKabs(((((-3.2351072515259e+62)*new_r00))+(((6.46448842153826e+62)*new_r11))))));
j4eval[2]=IKsign(((((1.68927033786437e+63)*x654))+(((1.68927033786437e+63)*x655))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj2=0;
cj2=1.0;
j2=0;
IkReal x656=new_r10*new_r10;
IkReal x657=new_r01*new_r01;
j4eval[0]=((1.0)+(((-1.0)*x657))+x656);
j4eval[1]=IKsign(((2.37119410650553e+25)+(((-2.37119410650553e+25)*x657))+(((2.37119410650553e+25)*x656))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x658 = IKatan2WithCheck(IkReal(((((-2.15015411581747e+25)*new_r10))+(((9.07406973480849e+24)*new_r00)))),IkReal(((((9.07406973480849e+24)*new_r10))+(((2.15015411581747e+25)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x658.valid){
continue;
}
CheckValue<IkReal> x659=IKPowWithIntegerCheck(IKsign(((((2.37119410650553e+25)*(new_r00*new_r00)))+(((2.37119410650553e+25)*(new_r10*new_r10))))),-1);
if(!x659.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x658.value)+(((1.5707963267949)*(x659.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[16];
IkReal x660=IKcos(j4);
IkReal x661=IKsin(j4);
IkReal x662=(new_r10*x660);
IkReal x663=(new_r11*x661);
IkReal x664=((0.191509149187798)*x660);
IkReal x665=((0.191509149187798)*x661);
IkReal x666=(new_r00*x661);
IkReal x667=((0.375595785440231)*x660);
IkReal x668=((0.906781148754705)*x660);
IkReal x669=(new_r10*x661);
IkReal x670=((2.64343616264363e-6)*x660);
IkReal x671=((0.382679330634011)*x661);
IkReal x672=((0.382679330634011)*x660);
IkReal x673=((2.64343616264363e-6)*x661);
IkReal x674=(new_r11*x660);
IkReal x675=((0.92388123148948)*x661);
evalcond[0]=((-0.382679330634011)+x662+x666);
evalcond[1]=((-2.64343616264363e-6)+x674+((new_r01*x661)));
evalcond[2]=((-0.906781148754705)+(((-1.0)*x669))+((new_r00*x660)));
evalcond[3]=((0.191509149187798)+(((-1.0)*x663))+((new_r01*x660)));
evalcond[4]=((((-1.0)*x667))+x675);
evalcond[5]=((((0.92388123148948)*x660))+(((0.375595785440231)*x661)));
evalcond[6]=((((-1.0)*x668))+new_r00+(((-1.0)*x671)));
evalcond[7]=(x664+new_r01+(((-1.0)*x673)));
evalcond[8]=((((0.906781148754705)*x661))+new_r10+(((-1.0)*x672)));
evalcond[9]=((((-1.0)*x665))+new_r11+(((-1.0)*x670)));
evalcond[10]=((((-2.64343616264363e-6)*x666))+(((-2.64343616264363e-6)*x662))+(((-1.0)*new_r10*x665))+((new_r00*x664)));
evalcond[11]=((((-0.92388123148948)*x666))+(((-0.92388123148948)*x662))+(((-0.375595785440231)*x669))+((new_r00*x667)));
evalcond[12]=((((-1.0)*new_r01*x675))+(((-0.375595785440231)*x663))+(((-0.92388123148948)*x674))+((new_r01*x667)));
evalcond[13]=(((new_r11*x672))+((new_r01*x671))+(((-0.906781148754705)*x663))+((new_r01*x668)));
evalcond[14]=((1.0)+(((-1.0)*new_r01*x673))+(((-0.191509149187798)*x663))+(((-1.0)*new_r11*x670))+((new_r01*x664)));
evalcond[15]=((-1.0)+(((-0.906781148754705)*x669))+(((0.382679330634011)*x666))+(((0.382679330634011)*x662))+((new_r00*x668)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x676 = IKatan2WithCheck(IkReal(((((3.2351072515259e+62)*new_r10))+(((6.46448842153826e+62)*new_r01)))),IkReal(((((-3.2351072515259e+62)*new_r00))+(((6.46448842153826e+62)*new_r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x676.valid){
continue;
}
CheckValue<IkReal> x677=IKPowWithIntegerCheck(IKsign(((((1.68927033786437e+63)*new_r00*new_r01))+(((1.68927033786437e+63)*new_r10*new_r11)))),-1);
if(!x677.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x676.value)+(((1.5707963267949)*(x677.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[16];
IkReal x678=IKcos(j4);
IkReal x679=IKsin(j4);
IkReal x680=(new_r10*x678);
IkReal x681=(new_r11*x679);
IkReal x682=((0.191509149187798)*x678);
IkReal x683=((0.191509149187798)*x679);
IkReal x684=(new_r00*x679);
IkReal x685=((0.375595785440231)*x678);
IkReal x686=((0.906781148754705)*x678);
IkReal x687=(new_r10*x679);
IkReal x688=((2.64343616264363e-6)*x678);
IkReal x689=((0.382679330634011)*x679);
IkReal x690=((0.382679330634011)*x678);
IkReal x691=((2.64343616264363e-6)*x679);
IkReal x692=(new_r11*x678);
IkReal x693=((0.92388123148948)*x679);
evalcond[0]=((-0.382679330634011)+x680+x684);
evalcond[1]=((-2.64343616264363e-6)+((new_r01*x679))+x692);
evalcond[2]=((-0.906781148754705)+((new_r00*x678))+(((-1.0)*x687)));
evalcond[3]=((0.191509149187798)+((new_r01*x678))+(((-1.0)*x681)));
evalcond[4]=((((-1.0)*x685))+x693);
evalcond[5]=((((0.375595785440231)*x679))+(((0.92388123148948)*x678)));
evalcond[6]=((((-1.0)*x689))+(((-1.0)*x686))+new_r00);
evalcond[7]=(x682+(((-1.0)*x691))+new_r01);
evalcond[8]=((((-1.0)*x690))+new_r10+(((0.906781148754705)*x679)));
evalcond[9]=((((-1.0)*x688))+(((-1.0)*x683))+new_r11);
evalcond[10]=((((-1.0)*new_r10*x683))+((new_r00*x682))+(((-2.64343616264363e-6)*x684))+(((-2.64343616264363e-6)*x680)));
evalcond[11]=((((-0.375595785440231)*x687))+((new_r00*x685))+(((-0.92388123148948)*x684))+(((-0.92388123148948)*x680)));
evalcond[12]=((((-1.0)*new_r01*x693))+(((-0.375595785440231)*x681))+(((-0.92388123148948)*x692))+((new_r01*x685)));
evalcond[13]=(((new_r11*x690))+((new_r01*x686))+((new_r01*x689))+(((-0.906781148754705)*x681)));
evalcond[14]=((1.0)+(((-0.191509149187798)*x681))+(((-1.0)*new_r01*x691))+((new_r01*x682))+(((-1.0)*new_r11*x688)));
evalcond[15]=((-1.0)+((new_r00*x686))+(((0.382679330634011)*x684))+(((0.382679330634011)*x680))+(((-0.906781148754705)*x687)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x694=IKPowWithIntegerCheck(IKsign(((((-1.68927033786437e+63)*new_r01*new_r10))+(((1.68927033786437e+63)*new_r00*new_r11)))),-1);
if(!x694.valid){
continue;
}
CheckValue<IkReal> x695 = IKatan2WithCheck(IkReal(((((6.46448842153826e+62)*new_r11))+(((-4.4654782995919e+57)*new_r10)))),IkReal(((((4.4654782995919e+57)*new_r00))+(((-6.46448842153826e+62)*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x695.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x694.value)))+(x695.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[16];
IkReal x696=IKcos(j4);
IkReal x697=IKsin(j4);
IkReal x698=(new_r10*x696);
IkReal x699=(new_r11*x697);
IkReal x700=((0.191509149187798)*x696);
IkReal x701=((0.191509149187798)*x697);
IkReal x702=(new_r00*x697);
IkReal x703=((0.375595785440231)*x696);
IkReal x704=((0.906781148754705)*x696);
IkReal x705=(new_r10*x697);
IkReal x706=((2.64343616264363e-6)*x696);
IkReal x707=((0.382679330634011)*x697);
IkReal x708=((0.382679330634011)*x696);
IkReal x709=((2.64343616264363e-6)*x697);
IkReal x710=(new_r11*x696);
IkReal x711=((0.92388123148948)*x697);
evalcond[0]=((-0.382679330634011)+x698+x702);
evalcond[1]=((-2.64343616264363e-6)+((new_r01*x697))+x710);
evalcond[2]=((-0.906781148754705)+(((-1.0)*x705))+((new_r00*x696)));
evalcond[3]=((0.191509149187798)+((new_r01*x696))+(((-1.0)*x699)));
evalcond[4]=((((-1.0)*x703))+x711);
evalcond[5]=((((0.92388123148948)*x696))+(((0.375595785440231)*x697)));
evalcond[6]=((((-1.0)*x704))+(((-1.0)*x707))+new_r00);
evalcond[7]=((((-1.0)*x709))+x700+new_r01);
evalcond[8]=((((0.906781148754705)*x697))+(((-1.0)*x708))+new_r10);
evalcond[9]=((((-1.0)*x706))+(((-1.0)*x701))+new_r11);
evalcond[10]=((((-2.64343616264363e-6)*x698))+((new_r00*x700))+(((-2.64343616264363e-6)*x702))+(((-1.0)*new_r10*x701)));
evalcond[11]=(((new_r00*x703))+(((-0.92388123148948)*x702))+(((-0.92388123148948)*x698))+(((-0.375595785440231)*x705)));
evalcond[12]=((((-0.92388123148948)*x710))+((new_r01*x703))+(((-0.375595785440231)*x699))+(((-1.0)*new_r01*x711)));
evalcond[13]=(((new_r01*x707))+((new_r01*x704))+(((-0.906781148754705)*x699))+((new_r11*x708)));
evalcond[14]=((1.0)+((new_r01*x700))+(((-0.191509149187798)*x699))+(((-1.0)*new_r11*x706))+(((-1.0)*new_r01*x709)));
evalcond[15]=((-1.0)+((new_r00*x704))+(((0.382679330634011)*x698))+(((0.382679330634011)*x702))+(((-0.906781148754705)*x705)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x712=(new_r01*new_r10);
IkReal x713=(new_r00*new_r11);
j4eval[0]=((((-1.0)*x712))+x713);
j4eval[1]=IKsign(((((-1.68927033786437e+63)*x712))+(((1.68927033786437e+63)*x713))));
j4eval[2]=((IKabs(((((-6.46448842153826e+62)*new_r11))+(((4.4654782995919e+57)*new_r10)))))+(IKabs(((((-4.4654782995919e+57)*new_r00))+(((6.46448842153826e+62)*new_r01))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x714=(new_r00*new_r01);
IkReal x715=(new_r10*new_r11);
j4eval[0]=((((-1.0)*x715))+(((-1.0)*x714)));
j4eval[1]=IKsign(((((-1.68927033786437e+63)*x715))+(((-1.68927033786437e+63)*x714))));
j4eval[2]=((IKabs(((((3.2351072515259e+62)*new_r10))+(((6.46448842153826e+62)*new_r01)))))+(IKabs(((((-3.2351072515259e+62)*new_r00))+(((6.46448842153826e+62)*new_r11))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x716=new_r10*new_r10;
IkReal x717=new_r01*new_r01;
j4eval[0]=((1.0)+(((-1.0)*x717))+x716);
j4eval[1]=IKsign(((2.37119410650553e+25)+(((-2.37119410650553e+25)*x717))+(((2.37119410650553e+25)*x716))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x718 = IKatan2WithCheck(IkReal(((((-9.07406973480849e+24)*new_r00))+(((2.15015411581747e+25)*new_r10)))),IkReal(((((-9.07406973480849e+24)*new_r10))+(((-2.15015411581747e+25)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x718.valid){
continue;
}
CheckValue<IkReal> x719=IKPowWithIntegerCheck(IKsign(((((2.37119410650553e+25)*(new_r00*new_r00)))+(((2.37119410650553e+25)*(new_r10*new_r10))))),-1);
if(!x719.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x718.value)+(((1.5707963267949)*(x719.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[16];
IkReal x720=IKcos(j4);
IkReal x721=IKsin(j4);
IkReal x722=(new_r10*x720);
IkReal x723=(new_r11*x721);
IkReal x724=((0.191509149187798)*x720);
IkReal x725=((0.191509149187798)*x721);
IkReal x726=(new_r00*x721);
IkReal x727=((0.375595785440231)*x720);
IkReal x728=((0.906781148754705)*x720);
IkReal x729=(new_r10*x721);
IkReal x730=((2.64343616264363e-6)*x720);
IkReal x731=((0.382679330634011)*x721);
IkReal x732=((0.382679330634011)*x720);
IkReal x733=((2.64343616264363e-6)*x721);
IkReal x734=(new_r11*x720);
IkReal x735=((0.92388123148948)*x721);
evalcond[0]=((0.382679330634011)+x722+x726);
evalcond[1]=((2.64343616264363e-6)+((new_r01*x721))+x734);
evalcond[2]=((0.906781148754705)+((new_r00*x720))+(((-1.0)*x729)));
evalcond[3]=((-0.191509149187798)+((new_r01*x720))+(((-1.0)*x723)));
evalcond[4]=((((-1.0)*x727))+x735);
evalcond[5]=((((0.92388123148948)*x720))+(((0.375595785440231)*x721)));
evalcond[6]=(x731+x728+new_r00);
evalcond[7]=((((-1.0)*x724))+x733+new_r01);
evalcond[8]=((((-0.906781148754705)*x721))+x732+new_r10);
evalcond[9]=(x730+x725+new_r11);
evalcond[10]=(((new_r00*x724))+(((-2.64343616264363e-6)*x722))+(((-2.64343616264363e-6)*x726))+(((-1.0)*new_r10*x725)));
evalcond[11]=((((-0.92388123148948)*x722))+(((-0.92388123148948)*x726))+((new_r00*x727))+(((-0.375595785440231)*x729)));
evalcond[12]=((((-0.92388123148948)*x734))+((new_r01*x727))+(((-0.375595785440231)*x723))+(((-1.0)*new_r01*x735)));
evalcond[13]=((((-0.906781148754705)*x723))+((new_r01*x731))+((new_r01*x728))+((new_r11*x732)));
evalcond[14]=((-1.0)+((new_r01*x724))+(((-0.191509149187798)*x723))+(((-1.0)*new_r01*x733))+(((-1.0)*new_r11*x730)));
evalcond[15]=((1.0)+(((0.382679330634011)*x722))+(((0.382679330634011)*x726))+(((-0.906781148754705)*x729))+((new_r00*x728)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x736 = IKatan2WithCheck(IkReal(((((3.2351072515259e+62)*new_r10))+(((6.46448842153826e+62)*new_r01)))),IkReal(((((-3.2351072515259e+62)*new_r00))+(((6.46448842153826e+62)*new_r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x736.valid){
continue;
}
CheckValue<IkReal> x737=IKPowWithIntegerCheck(IKsign(((((-1.68927033786437e+63)*new_r00*new_r01))+(((-1.68927033786437e+63)*new_r10*new_r11)))),-1);
if(!x737.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x736.value)+(((1.5707963267949)*(x737.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[16];
IkReal x738=IKcos(j4);
IkReal x739=IKsin(j4);
IkReal x740=(new_r10*x738);
IkReal x741=(new_r11*x739);
IkReal x742=((0.191509149187798)*x738);
IkReal x743=((0.191509149187798)*x739);
IkReal x744=(new_r00*x739);
IkReal x745=((0.375595785440231)*x738);
IkReal x746=((0.906781148754705)*x738);
IkReal x747=(new_r10*x739);
IkReal x748=((2.64343616264363e-6)*x738);
IkReal x749=((0.382679330634011)*x739);
IkReal x750=((0.382679330634011)*x738);
IkReal x751=((2.64343616264363e-6)*x739);
IkReal x752=(new_r11*x738);
IkReal x753=((0.92388123148948)*x739);
evalcond[0]=((0.382679330634011)+x744+x740);
evalcond[1]=((2.64343616264363e-6)+((new_r01*x739))+x752);
evalcond[2]=((0.906781148754705)+((new_r00*x738))+(((-1.0)*x747)));
evalcond[3]=((-0.191509149187798)+((new_r01*x738))+(((-1.0)*x741)));
evalcond[4]=(x753+(((-1.0)*x745)));
evalcond[5]=((((0.92388123148948)*x738))+(((0.375595785440231)*x739)));
evalcond[6]=(x746+x749+new_r00);
evalcond[7]=(x751+new_r01+(((-1.0)*x742)));
evalcond[8]=((((-0.906781148754705)*x739))+x750+new_r10);
evalcond[9]=(x743+x748+new_r11);
evalcond[10]=((((-1.0)*new_r10*x743))+((new_r00*x742))+(((-2.64343616264363e-6)*x744))+(((-2.64343616264363e-6)*x740)));
evalcond[11]=((((-0.375595785440231)*x747))+((new_r00*x745))+(((-0.92388123148948)*x744))+(((-0.92388123148948)*x740)));
evalcond[12]=((((-0.375595785440231)*x741))+(((-1.0)*new_r01*x753))+((new_r01*x745))+(((-0.92388123148948)*x752)));
evalcond[13]=(((new_r11*x750))+((new_r01*x749))+((new_r01*x746))+(((-0.906781148754705)*x741)));
evalcond[14]=((-1.0)+(((-1.0)*new_r01*x751))+((new_r01*x742))+(((-1.0)*new_r11*x748))+(((-0.191509149187798)*x741)));
evalcond[15]=((1.0)+((new_r00*x746))+(((0.382679330634011)*x744))+(((0.382679330634011)*x740))+(((-0.906781148754705)*x747)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x754=IKPowWithIntegerCheck(IKsign(((((-1.68927033786437e+63)*new_r01*new_r10))+(((1.68927033786437e+63)*new_r00*new_r11)))),-1);
if(!x754.valid){
continue;
}
CheckValue<IkReal> x755 = IKatan2WithCheck(IkReal(((((-6.46448842153826e+62)*new_r11))+(((4.4654782995919e+57)*new_r10)))),IkReal(((((-4.4654782995919e+57)*new_r00))+(((6.46448842153826e+62)*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x755.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x754.value)))+(x755.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[16];
IkReal x756=IKcos(j4);
IkReal x757=IKsin(j4);
IkReal x758=(new_r10*x756);
IkReal x759=(new_r11*x757);
IkReal x760=((0.191509149187798)*x756);
IkReal x761=((0.191509149187798)*x757);
IkReal x762=(new_r00*x757);
IkReal x763=((0.375595785440231)*x756);
IkReal x764=((0.906781148754705)*x756);
IkReal x765=(new_r10*x757);
IkReal x766=((2.64343616264363e-6)*x756);
IkReal x767=((0.382679330634011)*x757);
IkReal x768=((0.382679330634011)*x756);
IkReal x769=((2.64343616264363e-6)*x757);
IkReal x770=(new_r11*x756);
IkReal x771=((0.92388123148948)*x757);
evalcond[0]=((0.382679330634011)+x758+x762);
evalcond[1]=((2.64343616264363e-6)+((new_r01*x757))+x770);
evalcond[2]=((0.906781148754705)+((new_r00*x756))+(((-1.0)*x765)));
evalcond[3]=((-0.191509149187798)+((new_r01*x756))+(((-1.0)*x759)));
evalcond[4]=((((-1.0)*x763))+x771);
evalcond[5]=((((0.92388123148948)*x756))+(((0.375595785440231)*x757)));
evalcond[6]=(x764+x767+new_r00);
evalcond[7]=((((-1.0)*x760))+x769+new_r01);
evalcond[8]=((((-0.906781148754705)*x757))+x768+new_r10);
evalcond[9]=(x766+x761+new_r11);
evalcond[10]=((((-2.64343616264363e-6)*x758))+(((-2.64343616264363e-6)*x762))+(((-1.0)*new_r10*x761))+((new_r00*x760)));
evalcond[11]=(((new_r00*x763))+(((-0.375595785440231)*x765))+(((-0.92388123148948)*x762))+(((-0.92388123148948)*x758)));
evalcond[12]=((((-1.0)*new_r01*x771))+((new_r01*x763))+(((-0.92388123148948)*x770))+(((-0.375595785440231)*x759)));
evalcond[13]=(((new_r11*x768))+((new_r01*x767))+((new_r01*x764))+(((-0.906781148754705)*x759)));
evalcond[14]=((-1.0)+(((-1.0)*new_r11*x766))+((new_r01*x760))+(((-0.191509149187798)*x759))+(((-1.0)*new_r01*x769)));
evalcond[15]=((1.0)+((new_r00*x764))+(((-0.906781148754705)*x765))+(((0.382679330634011)*x762))+(((0.382679330634011)*x758)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x772 = IKatan2WithCheck(IkReal(((((-7.43996151971472e+24)*cj2))+(((5.1393063997753e+19)*sj2)))),IkReal(((((3.0246508916922e+24)*cj2))+(((-2.08933979612247e+19)*sj2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x772.valid){
continue;
}
CheckValue<IkReal> x773=IKPowWithIntegerCheck(IKsign(((((7.90387838998532e+24)*new_r10))+(((-1.94417647469709e+25)*new_r00)))),-1);
if(!x773.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x772.value)+(((1.5707963267949)*(x773.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[16];
IkReal x774=IKsin(j4);
IkReal x775=IKcos(j4);
IkReal x776=((1.0)*sj2);
IkReal x777=(new_r10*x775);
IkReal x778=(new_r11*x774);
IkReal x779=((0.191509149187798)*x775);
IkReal x780=((0.382679330634011)*x775);
IkReal x781=(new_r00*x774);
IkReal x782=((0.375595785440231)*x775);
IkReal x783=(sj2*x774);
IkReal x784=(sj2*x775);
IkReal x785=(new_r10*x774);
IkReal x786=(cj2*x774);
IkReal x787=(cj2*x775);
IkReal x788=(new_r11*x775);
IkReal x789=(new_r01*x774);
IkReal x790=(new_r00*x775);
IkReal x791=(new_r01*x775);
evalcond[0]=((((-1.0)*x782))+(((0.92388123148948)*x774)));
evalcond[1]=((((0.375595785440231)*x774))+(((0.92388123148948)*x775)));
evalcond[2]=(x777+x781+(((2.64343616264363e-6)*sj2))+(((-0.382679330634011)*cj2)));
evalcond[3]=((((-2.64343616264363e-6)*cj2))+(((-0.382679330634011)*sj2))+x788+x789);
evalcond[4]=((((-0.191509149187798)*sj2))+x790+(((-1.0)*x785))+(((-0.906781148754705)*cj2)));
evalcond[5]=((((0.191509149187798)*cj2))+(((-0.906781148754705)*sj2))+x791+(((-1.0)*x778)));
evalcond[6]=(((new_r00*x782))+(((-0.92388123148948)*x781))+(((-0.92388123148948)*x777))+(((-0.375595785440231)*x785)));
evalcond[7]=((((-0.375595785440231)*x778))+((new_r01*x782))+(((-0.92388123148948)*x788))+(((-0.92388123148948)*x789)));
evalcond[8]=(cj2+((new_r01*x779))+(((-0.191509149187798)*x778))+(((-2.64343616264363e-6)*x788))+(((-2.64343616264363e-6)*x789)));
evalcond[9]=((((-1.0)*sj2*x779))+(((2.64343616264363e-6)*x783))+(((-0.906781148754705)*x787))+new_r00+(((-0.382679330634011)*x786)));
evalcond[10]=(((cj2*x779))+(((-0.906781148754705)*x784))+new_r01+(((-0.382679330634011)*x783))+(((-2.64343616264363e-6)*x786)));
evalcond[11]=((((-1.0)*cj2*x780))+(((2.64343616264363e-6)*x784))+(((0.906781148754705)*x786))+new_r10+(((0.191509149187798)*x783)));
evalcond[12]=((((-0.191509149187798)*x786))+(((0.906781148754705)*x783))+new_r11+(((-1.0)*sj2*x780))+(((-2.64343616264363e-6)*x787)));
evalcond[13]=((((-0.191509149187798)*x785))+((new_r00*x779))+(((-1.0)*x776))+(((-2.64343616264363e-6)*x781))+(((-2.64343616264363e-6)*x777)));
evalcond[14]=((((0.906781148754705)*x790))+(((-0.906781148754705)*x785))+(((0.382679330634011)*x781))+(((0.382679330634011)*x777))+(((-1.0)*cj2)));
evalcond[15]=(((new_r11*x780))+(((0.906781148754705)*x791))+(((0.382679330634011)*x789))+(((-1.0)*x776))+(((-0.906781148754705)*x778)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x792 = IKatan2WithCheck(IkReal(((((-2.08933979612247e+19)*cj2))+(((-3.0246508916922e+24)*sj2)))),IkReal(((((-5.1393063997753e+19)*cj2))+(((-7.43996151971472e+24)*sj2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x792.valid){
continue;
}
CheckValue<IkReal> x793=IKPowWithIntegerCheck(IKsign(((((-7.90387838998532e+24)*new_r01))+(((-1.94417647469709e+25)*new_r11)))),-1);
if(!x793.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x792.value)+(((1.5707963267949)*(x793.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[16];
IkReal x794=IKsin(j4);
IkReal x795=IKcos(j4);
IkReal x796=((1.0)*sj2);
IkReal x797=(new_r10*x795);
IkReal x798=(new_r11*x794);
IkReal x799=((0.191509149187798)*x795);
IkReal x800=((0.382679330634011)*x795);
IkReal x801=(new_r00*x794);
IkReal x802=((0.375595785440231)*x795);
IkReal x803=(sj2*x794);
IkReal x804=(sj2*x795);
IkReal x805=(new_r10*x794);
IkReal x806=(cj2*x794);
IkReal x807=(cj2*x795);
IkReal x808=(new_r11*x795);
IkReal x809=(new_r01*x794);
IkReal x810=(new_r00*x795);
IkReal x811=(new_r01*x795);
evalcond[0]=((((0.92388123148948)*x794))+(((-1.0)*x802)));
evalcond[1]=((((0.375595785440231)*x794))+(((0.92388123148948)*x795)));
evalcond[2]=(x797+x801+(((2.64343616264363e-6)*sj2))+(((-0.382679330634011)*cj2)));
evalcond[3]=((((-2.64343616264363e-6)*cj2))+(((-0.382679330634011)*sj2))+x809+x808);
evalcond[4]=((((-1.0)*x805))+(((-0.191509149187798)*sj2))+(((-0.906781148754705)*cj2))+x810);
evalcond[5]=((((0.191509149187798)*cj2))+(((-0.906781148754705)*sj2))+(((-1.0)*x798))+x811);
evalcond[6]=((((-0.375595785440231)*x805))+((new_r00*x802))+(((-0.92388123148948)*x801))+(((-0.92388123148948)*x797)));
evalcond[7]=((((-0.92388123148948)*x809))+(((-0.92388123148948)*x808))+((new_r01*x802))+(((-0.375595785440231)*x798)));
evalcond[8]=((((-0.191509149187798)*x798))+cj2+(((-2.64343616264363e-6)*x809))+(((-2.64343616264363e-6)*x808))+((new_r01*x799)));
evalcond[9]=((((-0.382679330634011)*x806))+(((2.64343616264363e-6)*x803))+(((-0.906781148754705)*x807))+new_r00+(((-1.0)*sj2*x799)));
evalcond[10]=((((-0.382679330634011)*x803))+(((-2.64343616264363e-6)*x806))+(((-0.906781148754705)*x804))+new_r01+((cj2*x799)));
evalcond[11]=((((0.191509149187798)*x803))+(((2.64343616264363e-6)*x804))+(((-1.0)*cj2*x800))+new_r10+(((0.906781148754705)*x806)));
evalcond[12]=((((-1.0)*sj2*x800))+(((-2.64343616264363e-6)*x807))+(((-0.191509149187798)*x806))+new_r11+(((0.906781148754705)*x803)));
evalcond[13]=((((-1.0)*x796))+(((-2.64343616264363e-6)*x801))+(((-0.191509149187798)*x805))+((new_r00*x799))+(((-2.64343616264363e-6)*x797)));
evalcond[14]=((((0.382679330634011)*x801))+(((0.906781148754705)*x810))+(((-0.906781148754705)*x805))+(((0.382679330634011)*x797))+(((-1.0)*cj2)));
evalcond[15]=((((-1.0)*x796))+(((0.382679330634011)*x809))+(((0.906781148754705)*x811))+((new_r11*x800))+(((-0.906781148754705)*x798)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x812 = IKatan2WithCheck(IkReal(((((2.08933979612247e+19)*sj2))+(((-3.0246508916922e+24)*cj2)))),IkReal(((((-7.43996151971472e+24)*cj2))+(((5.1393063997753e+19)*sj2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x812.valid){
continue;
}
CheckValue<IkReal> x813=IKPowWithIntegerCheck(IKsign(((((-7.90387838998532e+24)*new_r00))+(((-1.94417647469709e+25)*new_r10)))),-1);
if(!x813.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x812.value)+(((1.5707963267949)*(x813.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[16];
IkReal x814=IKsin(j4);
IkReal x815=IKcos(j4);
IkReal x816=((1.0)*sj2);
IkReal x817=(new_r10*x815);
IkReal x818=(new_r11*x814);
IkReal x819=((0.191509149187798)*x815);
IkReal x820=((0.382679330634011)*x815);
IkReal x821=(new_r00*x814);
IkReal x822=((0.375595785440231)*x815);
IkReal x823=(sj2*x814);
IkReal x824=(sj2*x815);
IkReal x825=(new_r10*x814);
IkReal x826=(cj2*x814);
IkReal x827=(cj2*x815);
IkReal x828=(new_r11*x815);
IkReal x829=(new_r01*x814);
IkReal x830=(new_r00*x815);
IkReal x831=(new_r01*x815);
evalcond[0]=((((0.92388123148948)*x814))+(((-1.0)*x822)));
evalcond[1]=((((0.375595785440231)*x814))+(((0.92388123148948)*x815)));
evalcond[2]=(x817+x821+(((2.64343616264363e-6)*sj2))+(((-0.382679330634011)*cj2)));
evalcond[3]=((((-2.64343616264363e-6)*cj2))+(((-0.382679330634011)*sj2))+x829+x828);
evalcond[4]=((((-1.0)*x825))+(((-0.191509149187798)*sj2))+(((-0.906781148754705)*cj2))+x830);
evalcond[5]=((((0.191509149187798)*cj2))+(((-1.0)*x818))+(((-0.906781148754705)*sj2))+x831);
evalcond[6]=((((-0.92388123148948)*x821))+(((-0.92388123148948)*x817))+((new_r00*x822))+(((-0.375595785440231)*x825)));
evalcond[7]=((((-0.92388123148948)*x829))+(((-0.92388123148948)*x828))+((new_r01*x822))+(((-0.375595785440231)*x818)));
evalcond[8]=(cj2+((new_r01*x819))+(((-2.64343616264363e-6)*x829))+(((-2.64343616264363e-6)*x828))+(((-0.191509149187798)*x818)));
evalcond[9]=((((2.64343616264363e-6)*x823))+(((-0.906781148754705)*x827))+(((-0.382679330634011)*x826))+new_r00+(((-1.0)*sj2*x819)));
evalcond[10]=((((-0.906781148754705)*x824))+(((-0.382679330634011)*x823))+new_r01+(((-2.64343616264363e-6)*x826))+((cj2*x819)));
evalcond[11]=((((2.64343616264363e-6)*x824))+(((0.906781148754705)*x826))+(((0.191509149187798)*x823))+new_r10+(((-1.0)*cj2*x820)));
evalcond[12]=((((0.906781148754705)*x823))+(((-0.191509149187798)*x826))+(((-1.0)*sj2*x820))+new_r11+(((-2.64343616264363e-6)*x827)));
evalcond[13]=((((-2.64343616264363e-6)*x817))+((new_r00*x819))+(((-0.191509149187798)*x825))+(((-1.0)*x816))+(((-2.64343616264363e-6)*x821)));
evalcond[14]=((((-0.906781148754705)*x825))+(((0.906781148754705)*x830))+(((0.382679330634011)*x817))+(((0.382679330634011)*x821))+(((-1.0)*cj2)));
evalcond[15]=((((-0.906781148754705)*x818))+(((-1.0)*x816))+((new_r11*x820))+(((0.906781148754705)*x831))+(((0.382679330634011)*x829)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
j2array[0]=0.0745327695456896;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=3.21612542313548;
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[1];
evalcond[0]=((((-0.981490828164165)*(IKcos(j2))))+(((-0.0732889900395557)*(IKsin(j2)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=((IKabs((sj2+(((349500.110706487)*cj2))+(((-378295.498159458)*new_r10)))))+(((6.0749668710991e-36)*(IKabs(((1.2454240695835e+41)*new_r00))))));
if( IKabs(j4eval[0]) < 0.0000000100000000  )
{
{
IkReal j4eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=((((6.0749668710991e-36)*(IKabs(((1.2454240695835e+41)*new_r01)))))+(IKabs(((((349500.110706487)*sj2))+(((-1.0)*cj2))+(((-378295.498159458)*new_r11))))));
if( IKabs(j4eval[0]) < 0.0000000100000000  )
{
{
IkReal j4eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=((((8.38538899161303e-41)*(IKabs(((1.2454240695835e+41)*new_r10)))))+(IKabs(((((-1.0)*sj2))+(((-5.22168264148768)*new_r00))+(((-1.96124199304918)*cj2))))));
if( IKabs(j4eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j4]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x832=((5.22168264148768)*new_r00);
IkReal x833=((1.96124199304918)*cj2);
IkReal x834=((1.0)*sj2);
IkReal x835=(x834+x833);
op[0]=((((-1.0)*x835))+(((-1.0)*x832)));
op[1]=((-10.4433652829754)*new_r10);
op[2]=((((-1.0)*x835))+x832);
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x836=((349500.110706487)*sj2);
IkReal x837=((378295.498159458)*new_r11);
IkReal x838=((1.0)*cj2);
op[0]=((((-1.0)*x838))+(((-1.0)*x837))+x836);
op[1]=((756590.996318917)*new_r01);
op[2]=((((-1.0)*x838))+x836+x837);
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x839=((349500.110706487)*cj2);
IkReal x840=((378295.498159458)*new_r10);
IkReal x841=(sj2+x839);
op[0]=((((-1.0)*x840))+x841);
op[1]=((756590.996318917)*new_r00);
op[2]=(x841+x840);
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
j2array[0]=-0.0745327695456896;
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=3.0670598840441;
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[1];
evalcond[0]=((((-0.981490828164165)*(IKcos(j2))))+(((0.0732889900395557)*(IKsin(j2)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=((IKabs((sj2+(((-349500.110706487)*cj2))+(((-378295.498159458)*new_r10)))))+(((6.0749668710991e-36)*(IKabs(((1.2454240695835e+41)*new_r00))))));
if( IKabs(j4eval[0]) < 0.0000000100000000  )
{
{
IkReal j4eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=((((6.0749668710991e-36)*(IKabs(((1.2454240695835e+41)*new_r01)))))+(IKabs(((((-349500.110706487)*sj2))+(((-1.0)*cj2))+(((-378295.498159458)*new_r11))))));
if( IKabs(j4eval[0]) < 0.0000000100000000  )
{
{
IkReal j4eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=((((8.38538899161303e-41)*(IKabs(((1.2454240695835e+41)*new_r10)))))+(IKabs(((((-1.0)*sj2))+(((1.96124199304918)*cj2))+(((-5.22168264148768)*new_r00))))));
if( IKabs(j4eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j4]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x842=((1.96124199304918)*cj2);
IkReal x843=((5.22168264148768)*new_r00);
IkReal x844=((1.0)*sj2);
op[0]=((((-1.0)*x844))+(((-1.0)*x843))+x842);
op[1]=((-10.4433652829754)*new_r10);
op[2]=((((-1.0)*x844))+x843+x842);
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x845=((378295.498159458)*new_r11);
IkReal x846=((1.0)*cj2);
IkReal x847=((349500.110706487)*sj2);
IkReal x848=(x847+x846);
op[0]=((((-1.0)*x845))+(((-1.0)*x848)));
op[1]=((756590.996318917)*new_r01);
op[2]=((((-1.0)*x848))+x845);
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x849=((378295.498159458)*new_r10);
IkReal x850=((349500.110706487)*cj2);
op[0]=((((-1.0)*x850))+sj2+(((-1.0)*x849)));
op[1]=((756590.996318917)*new_r00);
op[2]=((((-1.0)*x850))+sj2+x849);
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x852 = IKatan2WithCheck(IkReal(((((0.375595785440231)*cj3))+(((0.906781148754705)*sj3)))),IkReal(((((0.382679330634011)*sj3))+(((-0.92388123148948)*cj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x852.valid){
continue;
}
IkReal x851=x852.value;
j4array[0]=((-1.0)*x851);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x851)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x853=IKcos(j4);
IkReal x854=IKsin(j4);
IkReal x855=(cj3*new_r00);
IkReal x856=((0.375595785440231)*cj3);
IkReal x857=((0.906781148754705)*sj3);
IkReal x858=(cj3*new_r01);
IkReal x859=((0.92388123148948)*x854);
IkReal x860=((0.375595785440231)*x853);
IkReal x861=(new_r11*x854);
IkReal x862=(sj3*x854);
IkReal x863=((0.92388123148948)*cj3*x853);
IkReal x864=((0.382679330634011)*sj3*x853);
evalcond[0]=((((-1.0)*x863))+x864+(((-1.0)*x854*x856))+(((-1.0)*x854*x857)));
evalcond[1]=((((-1.0)*new_r00*x853*x857))+((x855*x859))+(((-0.382679330634011)*new_r00*x862))+((new_r10*x854*x856))+((new_r10*x854*x857))+((new_r10*x863))+(((-1.0)*new_r10*x864))+(((-1.0)*x855*x860)));
evalcond[2]=(((x858*x859))+(((-0.382679330634011)*new_r01*x862))+((x856*x861))+((new_r11*x863))+(((-1.0)*new_r11*x864))+((x857*x861))+(((-1.0)*new_r01*x853*x856))+(((-1.0)*new_r01*x853*x857)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j2eval[0]=((((2.41424740081116)*sj3))+cj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j2eval[0]=((1.0)+(((-2.00003831923519)*(cj3*cj3)))+(((-2.00001964557736)*cj3*sj3)));
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((0.392694126233487)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj3=-0.38267885;
cj3=0.923881427653275;
j3=-0.392694126829726;
j2eval[0]=-5.62680841281029e-5;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj3=-0.38267885;
cj3=0.923881427653275;
j3=-0.392694126829726;
j2eval[0]=9.41178235465912e-9;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x865=(new_r00*sj4);
IkReal x866=(cj4*new_r10);
if( IKabs(((((58638210.3284924)*x866))+(((58638210.3284924)*x865)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-300522800.174647)*x866))+(((-300522800.174647)*x865)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((58638210.3284924)*x866))+(((58638210.3284924)*x865))))+IKsqr(((((-300522800.174647)*x866))+(((-300522800.174647)*x865))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((58638210.3284924)*x866))+(((58638210.3284924)*x865))), ((((-300522800.174647)*x866))+(((-300522800.174647)*x865))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[14];
IkReal x867=IKsin(j2);
IkReal x868=IKcos(j2);
IkReal x869=((5.19116571562339e-7)*sj4);
IkReal x870=((5.19116571562339e-7)*cj4);
IkReal x871=((0.981490825517688)*cj4);
IkReal x872=((0.191509149187798)*sj4);
IkReal x873=((0.191509149187798)*cj4);
IkReal x874=(new_r10*sj4);
IkReal x875=(new_r01*sj4);
IkReal x876=(cj4*new_r10);
IkReal x877=(new_r11*sj4);
IkReal x878=(cj4*new_r11);
IkReal x879=(new_r00*sj4);
IkReal x880=((1.0)*x867);
IkReal x881=((2.64343616264363e-6)*x868);
IkReal x882=((2.64343616264363e-6)*x867);
IkReal x883=((0.981490825517688)*x868);
IkReal x884=((0.981490825517688)*x867);
evalcond[0]=((((0.191509148670018)*x868))+(((0.981490828164165)*x867)));
evalcond[1]=((((-0.981490828164165)*x868))+(((0.191509148670018)*x867)));
evalcond[2]=((((5.19116571562339e-7)*x868))+x879+x876+x882);
evalcond[3]=((((-1.0)*x881))+(((5.19116571562339e-7)*x867))+x878+x875);
evalcond[4]=(((cj4*new_r00))+(((-1.0)*x874))+x883+(((-0.191509149187798)*x867)));
evalcond[5]=(((cj4*new_r01))+(((0.191509149187798)*x868))+(((-1.0)*x877))+x884);
evalcond[6]=(((new_r01*x873))+(((-2.64343616264363e-6)*x878))+(((-2.64343616264363e-6)*x875))+(((-1.0)*new_r11*x872))+x868);
evalcond[7]=(((new_r00*x873))+(((-1.0)*x880))+(((-2.64343616264363e-6)*x879))+(((-2.64343616264363e-6)*x876))+(((-1.0)*new_r10*x872)));
evalcond[8]=(((sj4*x882))+((x868*x869))+((x868*x871))+(((-1.0)*x867*x873))+new_r00);
evalcond[9]=(((x867*x871))+((x867*x869))+((x868*x873))+(((-1.0)*sj4*x881))+new_r01);
evalcond[10]=(((x867*x872))+((x868*x870))+(((-1.0)*sj4*x883))+((cj4*x882))+new_r10);
evalcond[11]=(((x867*x870))+(((-1.0)*x868*x872))+(((-1.0)*sj4*x884))+(((-1.0)*cj4*x881))+new_r11);
evalcond[12]=((((-1.0)*new_r00*x869))+(((-1.0)*new_r00*x871))+(((-1.0)*x868))+(((0.981490825517688)*x874))+(((-1.0)*new_r10*x870)));
evalcond[13]=((((-1.0)*new_r01*x869))+(((-1.0)*new_r01*x871))+(((-1.0)*x880))+(((0.981490825517688)*x877))+(((-1.0)*new_r11*x870)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x885=(cj4*new_r11);
IkReal x886=(new_r01*sj4);
if( IKabs(((((-71089.2936384185)*x886))+(((-71089.2936384185)*x885)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((364335.02091851)*x885))+(((364335.02091851)*x886)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-71089.2936384185)*x886))+(((-71089.2936384185)*x885))))+IKsqr(((((364335.02091851)*x885))+(((364335.02091851)*x886))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-71089.2936384185)*x886))+(((-71089.2936384185)*x885))), ((((364335.02091851)*x885))+(((364335.02091851)*x886))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[14];
IkReal x887=IKsin(j2);
IkReal x888=IKcos(j2);
IkReal x889=((5.19116571562339e-7)*sj4);
IkReal x890=((5.19116571562339e-7)*cj4);
IkReal x891=((0.981490825517688)*cj4);
IkReal x892=((0.191509149187798)*sj4);
IkReal x893=((0.191509149187798)*cj4);
IkReal x894=(new_r10*sj4);
IkReal x895=(new_r01*sj4);
IkReal x896=(cj4*new_r10);
IkReal x897=(new_r11*sj4);
IkReal x898=(cj4*new_r11);
IkReal x899=(new_r00*sj4);
IkReal x900=((1.0)*x887);
IkReal x901=((2.64343616264363e-6)*x888);
IkReal x902=((2.64343616264363e-6)*x887);
IkReal x903=((0.981490825517688)*x888);
IkReal x904=((0.981490825517688)*x887);
evalcond[0]=((((0.981490828164165)*x887))+(((0.191509148670018)*x888)));
evalcond[1]=((((-0.981490828164165)*x888))+(((0.191509148670018)*x887)));
evalcond[2]=((((5.19116571562339e-7)*x888))+x896+x899+x902);
evalcond[3]=((((5.19116571562339e-7)*x887))+(((-1.0)*x901))+x895+x898);
evalcond[4]=((((-0.191509149187798)*x887))+((cj4*new_r00))+(((-1.0)*x894))+x903);
evalcond[5]=(((cj4*new_r01))+(((-1.0)*x897))+(((0.191509149187798)*x888))+x904);
evalcond[6]=((((-2.64343616264363e-6)*x898))+(((-2.64343616264363e-6)*x895))+((new_r01*x893))+(((-1.0)*new_r11*x892))+x888);
evalcond[7]=((((-2.64343616264363e-6)*x899))+(((-2.64343616264363e-6)*x896))+((new_r00*x893))+(((-1.0)*new_r10*x892))+(((-1.0)*x900)));
evalcond[8]=(((sj4*x902))+new_r00+((x888*x889))+((x888*x891))+(((-1.0)*x887*x893)));
evalcond[9]=(((x887*x889))+(((-1.0)*sj4*x901))+new_r01+((x888*x893))+((x887*x891)));
evalcond[10]=((((-1.0)*sj4*x903))+((cj4*x902))+new_r10+((x888*x890))+((x887*x892)));
evalcond[11]=((((-1.0)*cj4*x901))+(((-1.0)*sj4*x904))+(((-1.0)*x888*x892))+new_r11+((x887*x890)));
evalcond[12]=((((-1.0)*new_r10*x890))+(((0.981490825517688)*x894))+(((-1.0)*x888))+(((-1.0)*new_r00*x889))+(((-1.0)*new_r00*x891)));
evalcond[13]=((((-1.0)*new_r11*x890))+(((-1.0)*x900))+(((0.981490825517688)*x897))+(((-1.0)*new_r01*x889))+(((-1.0)*new_r01*x891)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-2.74889852735631)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj3=0.38267885;
cj3=-0.923881427653275;
j3=2.74889853697297;
j2eval[0]=-5.62680841281029e-5;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj3=0.38267885;
cj3=-0.923881427653275;
j3=2.74889853697297;
j2eval[0]=-9.41178235465912e-9;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x905=(new_r00*sj4);
IkReal x906=(cj4*new_r10);
if( IKabs(((((58638210.3284924)*x906))+(((58638210.3284924)*x905)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((300522800.174647)*x906))+(((300522800.174647)*x905)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((58638210.3284924)*x906))+(((58638210.3284924)*x905))))+IKsqr(((((300522800.174647)*x906))+(((300522800.174647)*x905))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((58638210.3284924)*x906))+(((58638210.3284924)*x905))), ((((300522800.174647)*x906))+(((300522800.174647)*x905))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[14];
IkReal x907=IKcos(j2);
IkReal x908=IKsin(j2);
IkReal x909=((5.19116571562339e-7)*sj4);
IkReal x910=((5.19116571562339e-7)*cj4);
IkReal x911=((0.981490825517688)*cj4);
IkReal x912=((0.191509149187798)*sj4);
IkReal x913=((0.191509149187798)*cj4);
IkReal x914=(new_r10*sj4);
IkReal x915=(new_r01*sj4);
IkReal x916=(cj4*new_r10);
IkReal x917=(new_r11*sj4);
IkReal x918=(cj4*new_r11);
IkReal x919=(new_r00*sj4);
IkReal x920=((1.0)*x908);
IkReal x921=((2.64343616264363e-6)*x907);
IkReal x922=((2.64343616264363e-6)*x908);
IkReal x923=((0.981490825517688)*x907);
IkReal x924=((0.981490825517688)*x908);
evalcond[0]=((((0.981490828164165)*x908))+(((-0.191509148670018)*x907)));
evalcond[1]=((((-0.981490828164165)*x907))+(((-0.191509148670018)*x908)));
evalcond[2]=((((-5.19116571562339e-7)*x907))+x922+x919+x916);
evalcond[3]=((((-1.0)*x921))+(((-5.19116571562339e-7)*x908))+x918+x915);
evalcond[4]=((((-1.0)*x923))+((cj4*new_r00))+(((-1.0)*x914))+(((-0.191509149187798)*x908)));
evalcond[5]=((((-1.0)*x924))+((cj4*new_r01))+(((0.191509149187798)*x907))+(((-1.0)*x917)));
evalcond[6]=(((new_r01*x913))+(((-1.0)*new_r11*x912))+x907+(((-2.64343616264363e-6)*x918))+(((-2.64343616264363e-6)*x915)));
evalcond[7]=((((-1.0)*x920))+((new_r00*x913))+(((-1.0)*new_r10*x912))+(((-2.64343616264363e-6)*x919))+(((-2.64343616264363e-6)*x916)));
evalcond[8]=((((-1.0)*x908*x913))+((sj4*x922))+new_r00+(((-1.0)*x907*x911))+(((-1.0)*x907*x909)));
evalcond[9]=((((-1.0)*x908*x909))+(((-1.0)*x908*x911))+(((-1.0)*sj4*x921))+((x907*x913))+new_r01);
evalcond[10]=(((sj4*x923))+((x908*x912))+new_r10+(((-1.0)*x907*x910))+((cj4*x922)));
evalcond[11]=((((-1.0)*x908*x910))+((sj4*x924))+(((-1.0)*cj4*x921))+new_r11+(((-1.0)*x907*x912)));
evalcond[12]=((((-0.981490825517688)*x914))+((new_r10*x910))+((new_r00*x911))+(((-1.0)*x907))+((new_r00*x909)));
evalcond[13]=((((-1.0)*x920))+(((-0.981490825517688)*x917))+((new_r11*x910))+((new_r01*x911))+((new_r01*x909)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x925=(cj4*new_r11);
IkReal x926=(new_r01*sj4);
if( IKabs(((((71089.2936384185)*x925))+(((71089.2936384185)*x926)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((364335.02091851)*x925))+(((364335.02091851)*x926)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((71089.2936384185)*x925))+(((71089.2936384185)*x926))))+IKsqr(((((364335.02091851)*x925))+(((364335.02091851)*x926))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((71089.2936384185)*x925))+(((71089.2936384185)*x926))), ((((364335.02091851)*x925))+(((364335.02091851)*x926))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[14];
IkReal x927=IKcos(j2);
IkReal x928=IKsin(j2);
IkReal x929=((5.19116571562339e-7)*sj4);
IkReal x930=((5.19116571562339e-7)*cj4);
IkReal x931=((0.981490825517688)*cj4);
IkReal x932=((0.191509149187798)*sj4);
IkReal x933=((0.191509149187798)*cj4);
IkReal x934=(new_r10*sj4);
IkReal x935=(new_r01*sj4);
IkReal x936=(cj4*new_r10);
IkReal x937=(new_r11*sj4);
IkReal x938=(cj4*new_r11);
IkReal x939=(new_r00*sj4);
IkReal x940=((1.0)*x928);
IkReal x941=((2.64343616264363e-6)*x927);
IkReal x942=((2.64343616264363e-6)*x928);
IkReal x943=((0.981490825517688)*x927);
IkReal x944=((0.981490825517688)*x928);
evalcond[0]=((((-0.191509148670018)*x927))+(((0.981490828164165)*x928)));
evalcond[1]=((((-0.191509148670018)*x928))+(((-0.981490828164165)*x927)));
evalcond[2]=((((-5.19116571562339e-7)*x927))+x939+x936+x942);
evalcond[3]=((((-5.19116571562339e-7)*x928))+(((-1.0)*x941))+x938+x935);
evalcond[4]=((((-1.0)*x943))+((cj4*new_r00))+(((-0.191509149187798)*x928))+(((-1.0)*x934)));
evalcond[5]=((((0.191509149187798)*x927))+(((-1.0)*x944))+((cj4*new_r01))+(((-1.0)*x937)));
evalcond[6]=((((-1.0)*new_r11*x932))+((new_r01*x933))+(((-2.64343616264363e-6)*x935))+(((-2.64343616264363e-6)*x938))+x927);
evalcond[7]=((((-1.0)*x940))+(((-1.0)*new_r10*x932))+((new_r00*x933))+(((-2.64343616264363e-6)*x936))+(((-2.64343616264363e-6)*x939)));
evalcond[8]=((((-1.0)*x928*x933))+(((-1.0)*x927*x929))+(((-1.0)*x927*x931))+((sj4*x942))+new_r00);
evalcond[9]=(((x927*x933))+(((-1.0)*sj4*x941))+(((-1.0)*x928*x931))+(((-1.0)*x928*x929))+new_r01);
evalcond[10]=(((x928*x932))+(((-1.0)*x927*x930))+((sj4*x943))+new_r10+((cj4*x942)));
evalcond[11]=((((-1.0)*x928*x930))+(((-1.0)*x927*x932))+(((-1.0)*cj4*x941))+((sj4*x944))+new_r11);
evalcond[12]=((((-0.981490825517688)*x934))+((new_r00*x929))+((new_r00*x931))+(((-1.0)*x927))+((new_r10*x930)));
evalcond[13]=((((-1.0)*x940))+(((-0.981490825517688)*x937))+((new_r01*x931))+((new_r01*x929))+((new_r11*x930)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x945=cj3*cj3;
IkReal x946=(cj4*new_r11);
IkReal x947=((1.26047803981628e+37)*cj3);
IkReal x948=(new_r01*sj4);
IkReal x949=((5.2212054941513e+36)*sj3);
IkReal x950=(cj3*sj3);
CheckValue<IkReal> x951=IKPowWithIntegerCheck(((4.82358892555762e+36)+(((-9.64736268735376e+36)*x945))+(((-9.64727261330463e+36)*x950))),-1);
if(!x951.valid){
continue;
}
CheckValue<IkReal> x952=IKPowWithIntegerCheck(((-7.11740238487094e+58)+(((1.42350775031578e+59)*x945))+(((1.4234944595221e+59)*x950))),-1);
if(!x952.valid){
continue;
}
if( IKabs(((x951.value)*((((x946*x947))+((x947*x948))+(((-1.0)*x946*x949))+(((-1.0)*x948*x949)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x952.value)*(((((1.03173823453868e+60)*x948))+(((1.03173823453868e+60)*x946)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x951.value)*((((x946*x947))+((x947*x948))+(((-1.0)*x946*x949))+(((-1.0)*x948*x949))))))+IKsqr(((x952.value)*(((((1.03173823453868e+60)*x948))+(((1.03173823453868e+60)*x946))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((x951.value)*((((x946*x947))+((x947*x948))+(((-1.0)*x946*x949))+(((-1.0)*x948*x949))))), ((x952.value)*(((((1.03173823453868e+60)*x948))+(((1.03173823453868e+60)*x946))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[14];
IkReal x953=IKcos(j2);
IkReal x954=IKsin(j2);
IkReal x955=((0.382679330634011)*cj3);
IkReal x956=(cj4*new_r10);
IkReal x957=((0.191509149187798)*cj4);
IkReal x958=((0.191509149187798)*sj4);
IkReal x959=(cj4*new_r01);
IkReal x960=((0.375595785440231)*sj3);
IkReal x961=(new_r11*sj4);
IkReal x962=(new_r00*sj4);
IkReal x963=((0.906781148754705)*cj3);
IkReal x964=((0.92388123148948)*sj3);
IkReal x965=(cj4*new_r00);
IkReal x966=(new_r01*sj4);
IkReal x967=(new_r10*sj4);
IkReal x968=(cj4*new_r11);
IkReal x969=((1.0)*x954);
IkReal x970=(sj4*x963);
IkReal x971=((2.64343616264363e-6)*x953);
IkReal x972=(cj3*x953);
IkReal x973=(sj4*x954);
IkReal x974=(cj4*x954);
IkReal x975=(sj3*x954);
IkReal x976=(sj4*x953);
IkReal x977=(cj4*sj3*x953);
evalcond[0]=((((-0.0732889900395557)*sj3*x953))+(((0.981490828164165)*x954))+(((0.176930715729644)*x972)));
evalcond[1]=((((0.176930715729644)*cj3*x954))+(((-0.981490828164165)*x953))+(((-0.0732889900395557)*x975)));
evalcond[2]=(((new_r01*x957))+(((-2.64343616264363e-6)*x966))+(((-2.64343616264363e-6)*x968))+(((-1.0)*new_r11*x958))+x953);
evalcond[3]=(((x953*x955))+x962+x956+(((2.64343616264363e-6)*x954))+((x953*x964)));
evalcond[4]=(((x954*x964))+x966+x968+(((-1.0)*x971))+((x954*x955)));
evalcond[5]=((((-0.191509149187798)*x954))+(((-1.0)*x967))+(((-1.0)*x953*x960))+x965+((x953*x963)));
evalcond[6]=(((x954*x963))+(((-1.0)*x961))+(((0.191509149187798)*x953))+x959+(((-1.0)*x954*x960)));
evalcond[7]=(((new_r00*x957))+(((-2.64343616264363e-6)*x962))+(((-2.64343616264363e-6)*x956))+(((-1.0)*new_r10*x958))+(((-1.0)*x969)));
evalcond[8]=((((2.64343616264363e-6)*x973))+((cj4*x953*x963))+(((-1.0)*cj4*x953*x960))+((x964*x976))+new_r00+(((-1.0)*x954*x957))+((x955*x976)));
evalcond[9]=(((x963*x974))+((x964*x973))+new_r01+((x953*x957))+((x955*x973))+(((-1.0)*sj4*x971))+(((-1.0)*x960*x974)));
evalcond[10]=((((2.64343616264363e-6)*x974))+((cj4*x953*x955))+((cj4*x953*x964))+((x960*x976))+(((-1.0)*x953*x970))+new_r10+((x954*x958)));
evalcond[11]=(((x960*x973))+(((-1.0)*x953*x958))+((x964*x974))+new_r11+(((-1.0)*cj4*x971))+((x955*x974))+(((-1.0)*x954*x970)));
evalcond[12]=((((-1.0)*x960*x967))+(((-1.0)*x962*x964))+(((-1.0)*x963*x965))+(((-1.0)*x953))+((x960*x965))+(((-1.0)*x956*x964))+((x963*x967))+(((-1.0)*x955*x962))+(((-1.0)*x955*x956)));
evalcond[13]=((((-1.0)*x960*x961))+((x961*x963))+(((-1.0)*x964*x968))+(((-1.0)*x964*x966))+(((-1.0)*x959*x963))+((x959*x960))+(((-1.0)*x955*x968))+(((-1.0)*x955*x966))+(((-1.0)*x969)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x978=(new_r00*sj4);
IkReal x979=((2.20353772018334e+40)*cj3);
IkReal x980=((9.12758722307278e+39)*sj3);
IkReal x981=(cj4*new_r10);
CheckValue<IkReal> x982=IKPowWithIntegerCheck(((((1.12932706850368e+41)*sj3))+(((4.67776031621383e+40)*cj3))),-1);
if(!x982.valid){
continue;
}
CheckValue<IkReal> x983=IKPowWithIntegerCheck(((((-3918667983285.01)*sj3))+(((-1623142674594.32)*cj3))),-1);
if(!x983.valid){
continue;
}
if( IKabs(((x982.value)*((((x978*x979))+((x979*x981))+(((-1.0)*x978*x980))+(((-1.0)*x980*x981)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x983.value)*(((((4241526954433.0)*x978))+(((4241526954433.0)*x981)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x982.value)*((((x978*x979))+((x979*x981))+(((-1.0)*x978*x980))+(((-1.0)*x980*x981))))))+IKsqr(((x983.value)*(((((4241526954433.0)*x978))+(((4241526954433.0)*x981))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((x982.value)*((((x978*x979))+((x979*x981))+(((-1.0)*x978*x980))+(((-1.0)*x980*x981))))), ((x983.value)*(((((4241526954433.0)*x978))+(((4241526954433.0)*x981))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[14];
IkReal x984=IKcos(j2);
IkReal x985=IKsin(j2);
IkReal x986=((0.382679330634011)*cj3);
IkReal x987=(cj4*new_r10);
IkReal x988=((0.191509149187798)*cj4);
IkReal x989=((0.191509149187798)*sj4);
IkReal x990=(cj4*new_r01);
IkReal x991=((0.375595785440231)*sj3);
IkReal x992=(new_r11*sj4);
IkReal x993=(new_r00*sj4);
IkReal x994=((0.906781148754705)*cj3);
IkReal x995=((0.92388123148948)*sj3);
IkReal x996=(cj4*new_r00);
IkReal x997=(new_r01*sj4);
IkReal x998=(new_r10*sj4);
IkReal x999=(cj4*new_r11);
IkReal x1000=((1.0)*x985);
IkReal x1001=(sj4*x994);
IkReal x1002=((2.64343616264363e-6)*x984);
IkReal x1003=(cj3*x984);
IkReal x1004=(sj4*x985);
IkReal x1005=(cj4*x985);
IkReal x1006=(sj3*x985);
IkReal x1007=(sj4*x984);
IkReal x1008=(cj4*sj3*x984);
evalcond[0]=((((0.981490828164165)*x985))+(((0.176930715729644)*x1003))+(((-0.0732889900395557)*sj3*x984)));
evalcond[1]=((((-0.981490828164165)*x984))+(((0.176930715729644)*cj3*x985))+(((-0.0732889900395557)*x1006)));
evalcond[2]=((((-1.0)*new_r11*x989))+x984+((new_r01*x988))+(((-2.64343616264363e-6)*x999))+(((-2.64343616264363e-6)*x997)));
evalcond[3]=((((2.64343616264363e-6)*x985))+((x984*x986))+x993+x987+((x984*x995)));
evalcond[4]=((((-1.0)*x1002))+((x985*x986))+x997+x999+((x985*x995)));
evalcond[5]=((((-1.0)*x998))+(((-0.191509149187798)*x985))+(((-1.0)*x984*x991))+x996+((x984*x994)));
evalcond[6]=((((-1.0)*x992))+(((-1.0)*x985*x991))+(((0.191509149187798)*x984))+x990+((x985*x994)));
evalcond[7]=(((new_r00*x988))+(((-1.0)*x1000))+(((-2.64343616264363e-6)*x987))+(((-1.0)*new_r10*x989))+(((-2.64343616264363e-6)*x993)));
evalcond[8]=((((2.64343616264363e-6)*x1004))+((cj4*x984*x994))+((x1007*x986))+((x1007*x995))+new_r00+(((-1.0)*x985*x988))+(((-1.0)*cj4*x984*x991)));
evalcond[9]=(((x1004*x986))+((x984*x988))+new_r01+(((-1.0)*x1005*x991))+((x1004*x995))+((x1005*x994))+(((-1.0)*sj4*x1002)));
evalcond[10]=((((2.64343616264363e-6)*x1005))+((cj4*x984*x995))+((x1007*x991))+((cj4*x984*x986))+(((-1.0)*x1001*x984))+new_r10+((x985*x989)));
evalcond[11]=(((x1005*x986))+(((-1.0)*cj4*x1002))+(((-1.0)*x1001*x985))+(((-1.0)*x984*x989))+new_r11+((x1004*x991))+((x1005*x995)));
evalcond[12]=(((x994*x998))+((x991*x996))+(((-1.0)*x994*x996))+(((-1.0)*x984))+(((-1.0)*x991*x998))+(((-1.0)*x986*x987))+(((-1.0)*x993*x995))+(((-1.0)*x986*x993))+(((-1.0)*x987*x995)));
evalcond[13]=((((-1.0)*x1000))+((x992*x994))+(((-1.0)*x991*x992))+((x990*x991))+(((-1.0)*x995*x999))+(((-1.0)*x995*x997))+(((-1.0)*x990*x994))+(((-1.0)*x986*x999))+(((-1.0)*x986*x997)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
CheckValue<IkReal> x1010 = IKatan2WithCheck(IkReal(((((-0.0732889900395557)*sj3))+(((0.176930715729644)*cj3)))),IkReal(0.981490828164165),IKFAST_ATAN2_MAGTHRESH);
if(!x1010.valid){
continue;
}
IkReal x1009=x1010.value;
j2array[0]=((-1.0)*x1009);
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((3.14159265358979)+(((-1.0)*x1009)));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[1];
IkReal x1011=IKsin(j2);
evalcond[0]=((((-0.0732889900395557)*sj3*x1011))+(((-0.981490828164165)*(IKcos(j2))))+(((0.176930715729644)*cj3*x1011)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j4eval[0]=((IKabs((sj2+(((144765.868017521)*cj2*cj3))+(((-378295.498159458)*new_r10))+(((349500.110706487)*cj2*sj3)))))+(((6.0749668710991e-36)*(IKabs(((1.2454240695835e+41)*new_r00))))));
if( IKabs(j4eval[0]) < 0.0000000100000000  )
{
{
IkReal j4eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j4eval[0]=((((6.0749668710991e-36)*(IKabs(((1.2454240695835e+41)*new_r01)))))+(IKabs(((((144765.868017521)*cj3*sj2))+(((349500.110706487)*sj2*sj3))+(((-1.0)*cj2))+(((-378295.498159458)*new_r11))))));
if( IKabs(j4eval[0]) < 0.0000000100000000  )
{
{
IkReal j4eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j4eval[0]=((((8.38538899161303e-41)*(IKabs(((1.2454240695835e+41)*new_r10)))))+(IKabs(((((-1.0)*sj2))+(((-1.96124199304918)*cj2*sj3))+(((-5.22168264148768)*new_r00))+(((4.7349233840807)*cj2*cj3))))));
if( IKabs(j4eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j4]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x1012=((5.22168264148768)*new_r00);
IkReal x1013=((1.0)*sj2);
IkReal x1014=((4.7349233840807)*cj2*cj3);
IkReal x1015=((1.96124199304918)*cj2*sj3);
IkReal x1016=(x1015+x1013);
op[0]=(x1014+(((-1.0)*x1016))+(((-1.0)*x1012)));
op[1]=((-10.4433652829754)*new_r10);
op[2]=(x1014+x1012+(((-1.0)*x1016)));
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x1017=((378295.498159458)*new_r11);
IkReal x1018=((1.0)*cj2);
IkReal x1019=((144765.868017521)*cj3*sj2);
IkReal x1020=((349500.110706487)*sj2*sj3);
IkReal x1021=(x1019+x1020);
op[0]=(x1021+(((-1.0)*x1018))+(((-1.0)*x1017)));
op[1]=((756590.996318917)*new_r01);
op[2]=(x1017+x1021+(((-1.0)*x1018)));
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x1022=((378295.498159458)*new_r10);
IkReal x1023=((144765.868017521)*cj2*cj3);
IkReal x1024=((349500.110706487)*cj2*sj3);
IkReal x1025=(sj2+x1024+x1023);
op[0]=(x1025+(((-1.0)*x1022)));
op[1]=((756590.996318917)*new_r00);
op[2]=(x1025+x1022);
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1026=((1.8598868073379e+59)*cj3);
IkReal x1027=((7.70410186470807e+58)*sj3);
CheckValue<IkReal> x1028=IKPowWithIntegerCheck(IKsign(((-1.01828787271427e+60)+(((-2.72608519515785e+58)*(cj3*cj3)))+(((2.72618451395377e+58)*cj3*sj3)))),-1);
if(!x1028.valid){
continue;
}
CheckValue<IkReal> x1029 = IKatan2WithCheck(IkReal(((((1.03173823453868e+60)*new_r20))+((new_r21*x1026))+(((-1.0)*new_r21*x1027)))),IkReal(((((-1.03173823453868e+60)*new_r21))+((new_r20*x1026))+(((-1.0)*new_r20*x1027)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1029.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1028.value)))+(x1029.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[2];
IkReal x1030=IKcos(j2);
IkReal x1031=IKsin(j2);
IkReal x1032=((0.176930715729644)*cj3);
IkReal x1033=((0.0732889900395557)*sj3);
evalcond[0]=(((x1030*x1032))+(((0.981490828164165)*x1031))+(((-1.0)*x1030*x1033))+new_r20);
evalcond[1]=(((x1031*x1032))+(((-0.981490828164165)*x1030))+(((-1.0)*x1031*x1033))+new_r21);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[1];
j4eval[0]=((IKabs(((4869490842486.03)*new_r02)))+(((931726748065.5)*(IKabs(((((-2.61315393842472)*new_r12))+sj3+(((-2.41424387870341)*cj3))))))));
if( IKabs(j4eval[0]) < 0.0000000100000000  )
{
{
IkReal j4eval[1];
j4eval[0]=((IKabs(((4.11007340307247e+31)*new_r12)))+(((7.71863124022004e+30)*(IKabs(((((2.41424740081116)*sj3))+cj3+(((-2.6624366906245)*new_r02))))))));
if( IKabs(j4eval[0]) < 0.0000000100000000  )
{
{
IkReal j4eval[1];
j4eval[0]=((IKabs((sj2+(((144765.868017521)*cj2*cj3))+(((-378295.498159458)*new_r10))+(((349500.110706487)*cj2*sj3)))))+(((6.0749668710991e-36)*(IKabs(((1.2454240695835e+41)*new_r00))))));
if( IKabs(j4eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j4]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x1034=((378295.498159458)*new_r10);
IkReal x1035=((144765.868017521)*cj2*cj3);
IkReal x1036=((349500.110706487)*cj2*sj3);
IkReal x1037=(sj2+x1036+x1035);
op[0]=((((-1.0)*x1034))+x1037);
op[1]=((756590.996318917)*new_r00);
op[2]=(x1037+x1034);
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x1038=((2.41424740081116)*sj3);
IkReal x1039=((2.6624366906245)*new_r02);
IkReal x1040=(x1038+cj3);
op[0]=((((-1.0)*x1039))+x1040);
op[1]=((-5.32487338124901)*new_r12);
op[2]=(x1040+x1039);
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x1041=((2.61315393842472)*new_r12);
IkReal x1042=((2.41424387870341)*cj3);
op[0]=(sj3+(((-1.0)*x1041))+(((-1.0)*x1042)));
op[1]=((5.22630787684944)*new_r02);
op[2]=(sj3+x1041+(((-1.0)*x1042)));
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}
}
}

}

}
}
}
}
}static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - buff_digit (8649da5665006b7dc635f06f47288882)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004a"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
